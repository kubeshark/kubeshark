{"version":3,"file":"immer.esm.js","sources":["../src/utils/errors.ts","../src/utils/common.ts","../src/types/types-internal.ts","../src/utils/plugins.ts","../src/core/scope.ts","../src/core/finalize.ts","../src/core/proxy.ts","../src/core/immerClass.ts","../src/core/current.ts","../src/plugins/es5.ts","../src/plugins/patches.ts","../src/plugins/mapset.ts","../src/plugins/all.ts","../src/immer.ts","../src/utils/env.ts"],"sourcesContent":["const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtypeObject,\n\tArchtypeArray,\n\tArchtypeMap,\n\tArchtypeSet,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === ArchtypeObject) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): 0 | 1 | 2 | 3 {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? ArchtypeArray\n\t\t: isMap(thing)\n\t\t? ArchtypeMap\n\t\t: isSet(thing)\n\t\t? ArchtypeSet\n\t\t: ArchtypeObject\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchtypeMap\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchtypeMap ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchtypeMap) thing.set(propOrOldValue, value)\n\telse if (t === ArchtypeSet) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tSetState,\n\tImmerScope,\n\tProxyObjectState,\n\tProxyArrayState,\n\tES5ObjectState,\n\tES5ArrayState,\n\tMapState,\n\tDRAFT_STATE\n} from \"../internal\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\n\nexport const ArchtypeObject = 0\nexport const ArchtypeArray = 1\nexport const ArchtypeMap = 2\nexport const ArchtypeSet = 3\n\nexport const ProxyTypeProxyObject = 0\nexport const ProxyTypeProxyArray = 1\nexport const ProxyTypeES5Object = 4\nexport const ProxyTypeES5Array = 5\nexport const ProxyTypeMap = 2\nexport const ProxyTypeSet = 3\n\nexport interface ImmerBaseState {\n\tparent_?: ImmerState\n\tscope_: ImmerScope\n\tmodified_: boolean\n\tfinalized_: boolean\n\tisManual_: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\trootState: ImmerState,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeMap\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeSet\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyTypeProxyObject ||\n\t\tstate.type_ === ProxyTypeProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyTypeES5Object,\n\tProxyTypeES5Array,\n\tProxyTypeSet,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyTypeES5Object || state.type_ === ProxyTypeES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyTypeSet ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyTypeSet && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyTypeProxyArray : (ProxyTypeProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existig to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyTypeProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tthis.produce = this.produce.bind(this)\n\t\tthis.produceWithPatches = this.produceWithPatches.bind(this)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce(base: any, recipe?: any, patchListener?: any) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches(arg1: any, arg2?: any, arg3?: any): any {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches.slice(i + 1))\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtypeMap,\n\tArchtypeSet,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === ArchtypeSet ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase ArchtypeMap:\n\t\t\treturn new Map(value)\n\t\tcase ArchtypeSet:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyTypeES5Array : (ProxyTypeES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyTypeES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyTypeES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyTypeES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyTypeES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyTypeES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyTypeProxyObject,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeES5Array,\n\tProxyTypeProxyArray,\n\tProxyTypeSet,\n\tArchtypeMap,\n\tArchtypeSet,\n\tArchtypeArray,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tArchtypeObject\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyTypeProxyObject:\n\t\t\tcase ProxyTypeES5Object:\n\t\t\tcase ProxyTypeMap:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyTypeES5Array:\n\t\t\tcase ProxyTypeProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyTypeSet:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\trootState: ImmerState,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: rootState.base_\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchtypeObject || parentType === ArchtypeArray) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyTypeMap,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tstate.assigned_!.set(key, false)\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyTypeSet,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],"names":["die","error","args","e","errors","msg","apply","Error","length","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","prototype","isPlainObject","Array","isArray","DRAFTABLE","constructor","isMap","isSet","original","base_","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","entry","index","thing","state","type_","has","prop","hasOwnProperty","call","get","set","propOrOldValue","t","delete","add","is","x","y","target","hasMap","Map","hasSet","Set","latest","copy_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","loadPlugin","implementation","getCurrentScope","process","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","undefined","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createProxyProxy","createES5Proxy_","push","current","currentImpl","copy","archType","hasChanges_","copyHelper","from","enableES5","proxyProperty","this","assertUnrevoked","markChangesSweep","drafts","hasArrayChanges","hasObjectChanges","baseValue","baseIsDraft","descriptor","JSON","stringify","defineProperty","createES5Draft","markChangesRecursively","object","min","Math","enablePatches","deepClonePatchValue","entries","cloned","clonePatchValueIfNeeded","ADD","applyPatches_","patches","patch","op","parentType","p","type","splice","basePath","inversePatches","assignedValue","origValue","generatePatchesFromAssigned","generateArrayPatches","unshift","generateSetPatches","rootState","replacement","enableMapSet","__extends","d","b","__","extendStatics","prepareMapCopy","prepareSetCopy","setPrototypeOf","__proto__","DraftMap","size","cb","thisArg","_value","_this","values","iterator","iteratorSymbol","_this2","next","r","done","_this3","DraftSet","enableAllPlugins","castDraft","castImmutable","hasSymbol","Symbol","hasProxies","Reflect","for","data","getOwnPropertySymbols","getOwnPropertyNames","_desc$get","readPropFromProto","currentState","deleteProperty","owner","fn","arguments","isNaN","parseInt","Immer","config","useProxies","setUseProxies","autoFreeze","setAutoFreeze","produce","bind","produceWithPatches","recipe","defaultBase","self","hasError","Promise","then","arg1","arg2","ip","createDraft","finishDraft","applyPatches","applyPatchesImpl"],"mappings":"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"}