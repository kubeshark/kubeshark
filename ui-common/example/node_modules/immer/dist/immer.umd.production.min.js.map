{"version":3,"file":"immer.umd.production.min.js","sources":["../src/utils/errors.ts","../src/utils/common.ts","../src/types/types-internal.ts","../src/utils/plugins.ts","../src/core/scope.ts","../src/core/finalize.ts","../src/core/proxy.ts","../src/core/immerClass.ts","../src/core/current.ts","../src/plugins/es5.ts","../src/plugins/patches.ts","../src/plugins/mapset.ts","../src/utils/env.ts","../src/immer.ts","../src/plugins/all.ts"],"sourcesContent":["const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtypeObject,\n\tArchtypeArray,\n\tArchtypeMap,\n\tArchtypeSet,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === ArchtypeObject) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): 0 | 1 | 2 | 3 {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? ArchtypeArray\n\t\t: isMap(thing)\n\t\t? ArchtypeMap\n\t\t: isSet(thing)\n\t\t? ArchtypeSet\n\t\t: ArchtypeObject\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchtypeMap\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchtypeMap ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchtypeMap) thing.set(propOrOldValue, value)\n\telse if (t === ArchtypeSet) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tSetState,\n\tImmerScope,\n\tProxyObjectState,\n\tProxyArrayState,\n\tES5ObjectState,\n\tES5ArrayState,\n\tMapState,\n\tDRAFT_STATE\n} from \"../internal\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\n\nexport const ArchtypeObject = 0\nexport const ArchtypeArray = 1\nexport const ArchtypeMap = 2\nexport const ArchtypeSet = 3\n\nexport const ProxyTypeProxyObject = 0\nexport const ProxyTypeProxyArray = 1\nexport const ProxyTypeES5Object = 4\nexport const ProxyTypeES5Array = 5\nexport const ProxyTypeMap = 2\nexport const ProxyTypeSet = 3\n\nexport interface ImmerBaseState {\n\tparent_?: ImmerState\n\tscope_: ImmerScope\n\tmodified_: boolean\n\tfinalized_: boolean\n\tisManual_: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\trootState: ImmerState,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeMap\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeSet\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyTypeProxyObject ||\n\t\tstate.type_ === ProxyTypeProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyTypeES5Object,\n\tProxyTypeES5Array,\n\tProxyTypeSet,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyTypeES5Object || state.type_ === ProxyTypeES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyTypeSet ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyTypeSet && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyTypeProxyArray : (ProxyTypeProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existig to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyTypeProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tthis.produce = this.produce.bind(this)\n\t\tthis.produceWithPatches = this.produceWithPatches.bind(this)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce(base: any, recipe?: any, patchListener?: any) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches(arg1: any, arg2?: any, arg3?: any): any {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches.slice(i + 1))\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtypeMap,\n\tArchtypeSet,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === ArchtypeSet ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase ArchtypeMap:\n\t\t\treturn new Map(value)\n\t\tcase ArchtypeSet:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyTypeES5Array : (ProxyTypeES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyTypeES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyTypeES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyTypeES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyTypeES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyTypeES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyTypeProxyObject,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeES5Array,\n\tProxyTypeProxyArray,\n\tProxyTypeSet,\n\tArchtypeMap,\n\tArchtypeSet,\n\tArchtypeArray,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tArchtypeObject\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyTypeProxyObject:\n\t\t\tcase ProxyTypeES5Object:\n\t\t\tcase ProxyTypeMap:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyTypeES5Array:\n\t\t\tcase ProxyTypeProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyTypeSet:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\trootState: ImmerState,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: rootState.base_\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tconst p = path[i]\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchtypeObject || parentType === ArchtypeArray) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyTypeMap,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tstate.assigned_!.set(key, false)\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyTypeSet,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n"],"names":["die","error","args","Error","length","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","prototype","Array","isArray","DRAFTABLE","constructor","isMap","isSet","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","entry","index","thing","state","type_","has","prop","hasOwnProperty","call","get","set","propOrOldValue","t","delete","add","is","x","y","target","hasMap","Map","hasSet","Set","latest","copy_","base_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","loadPlugin","implementation","getCurrentScope","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createES5Proxy_","push","current","currentImpl","copy","archType","hasChanges_","copyHelper","from","enableES5","proxyProperty","this","markChangesSweep","drafts","hasArrayChanges","hasObjectChanges","baseValue","baseIsDraft","descriptor","defineProperty","markChangesRecursively","object","min","Math","enablePatches","deepClonePatchValue","entries","cloned","clonePatchValueIfNeeded","ADD","applyPatches_","patches","patch","op","parentType","p","type","splice","basePath","inversePatches","assignedValue","origValue","unshift","rootState","replacement","enableMapSet","__extends","d","b","__","extendStatics","prepareMapCopy","prepareSetCopy","assertUnrevoked","JSON","stringify","setPrototypeOf","__proto__","DraftMap","size","cb","thisArg","_value","_this","values","iterator","iteratorSymbol","_this2","next","r","done","_this3","DraftSet","hasSymbol","Symbol","hasProxies","Reflect","for","getOwnPropertySymbols","getOwnPropertyNames","_desc$get","currentState","deleteProperty","owner","fn","arguments","apply","Immer","config","useProxies","setUseProxies","autoFreeze","setAutoFreeze","produce","bind","produceWithPatches","recipe","defaultBase","self","hasError","Promise","then","arg1","arg2","ip","createDraft","finishDraft","applyPatches","applyPatchesImpl"],"mappings":"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"}