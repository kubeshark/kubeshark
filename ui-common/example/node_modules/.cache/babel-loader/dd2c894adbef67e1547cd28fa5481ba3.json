{"ast":null,"code":"import { Info } from './info.js';\nimport * as types from './types.js';\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\n\nconst checks = Object.keys(types);\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1;\n    super(property, attribute);\n    mark(this, 'space', space);\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index];\n        mark(this, checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n  }\n\n}\nDefinedInfo.prototype.defined = true;\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\n\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/hast-util-to-html/node_modules/property-information/lib/util/defined-info.js"],"names":["Info","types","checks","Object","keys","DefinedInfo","constructor","property","attribute","mask","space","index","mark","length","check","prototype","defined","values","key","value"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AAEA;AACA;;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAf;AAEA,OAAO,MAAMI,WAAN,SAA0BL,IAA1B,CAA+B;AACpC;AACF;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AAC5C,QAAIC,KAAK,GAAG,CAAC,CAAb;AAEA,UAAMJ,QAAN,EAAgBC,SAAhB;AAEAI,IAAAA,IAAI,CAAC,IAAD,EAAO,OAAP,EAAgBF,KAAhB,CAAJ;;AAEA,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAO,EAAEE,KAAF,GAAUT,MAAM,CAACW,MAAxB,EAAgC;AAC9B,cAAMC,KAAK,GAAGZ,MAAM,CAACS,KAAD,CAApB;AACAC,QAAAA,IAAI,CAAC,IAAD,EAAOV,MAAM,CAACS,KAAD,CAAb,EAAsB,CAACF,IAAI,GAAGR,KAAK,CAACa,KAAD,CAAb,MAA0Bb,KAAK,CAACa,KAAD,CAArD,CAAJ;AACD;AACF;AACF;;AArBmC;AAwBtCT,WAAW,CAACU,SAAZ,CAAsBC,OAAtB,GAAgC,IAAhC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASJ,IAAT,CAAcK,MAAd,EAAsBC,GAAtB,EAA2BC,KAA3B,EAAkC;AAChC,MAAIA,KAAJ,EAAW;AACT;AACAF,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACD;AACF","sourcesContent":["import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n"]},"metadata":{},"sourceType":"module"}