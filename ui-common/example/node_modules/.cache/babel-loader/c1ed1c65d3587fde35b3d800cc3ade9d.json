{"ast":null,"code":"'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\n\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\n\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\n\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n  constructor(parser, opts) {\n    super(parser, opts);\n    this.opts = opts;\n    this.ctLoc = null;\n    this.locBeforeToken = false;\n  }\n\n  _setErrorLocation(err) {\n    if (this.ctLoc) {\n      err.startLine = this.ctLoc.startLine;\n      err.startCol = this.ctLoc.startCol;\n      err.startOffset = this.ctLoc.startOffset;\n      err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n      err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n      err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n    }\n  }\n\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      _bootstrap(document, fragmentContext) {\n        orig._bootstrap.call(this, document, fragmentContext);\n\n        Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n        Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n      },\n\n      _processInputToken(token) {\n        mxn.ctLoc = token.location;\n\n        orig._processInputToken.call(this, token);\n      },\n\n      _err(code, options) {\n        mxn.locBeforeToken = options && options.beforeToken;\n\n        mxn._reportError(code);\n      }\n\n    };\n  }\n\n}\n\nmodule.exports = ErrorReportingParserMixin;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"],"names":["ErrorReportingMixinBase","require","ErrorReportingTokenizerMixin","LocationInfoTokenizerMixin","Mixin","ErrorReportingParserMixin","constructor","parser","opts","ctLoc","locBeforeToken","_setErrorLocation","err","startLine","startCol","startOffset","endLine","endCol","endOffset","_getOverriddenMethods","mxn","orig","_bootstrap","document","fragmentContext","call","install","tokenizer","_processInputToken","token","location","_err","code","options","beforeToken","_reportError","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,cAAD,CAAvC;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,mBAAD,CAA5C;;AACA,MAAME,0BAA0B,GAAGF,OAAO,CAAC,kCAAD,CAA1C;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,mBAAD,CAArB;;AAEA,MAAMI,yBAAN,SAAwCL,uBAAxC,CAAgE;AAC5DM,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB,UAAMD,MAAN,EAAcC,IAAd;AAEA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACH;;AAEDC,EAAAA,iBAAiB,CAACC,GAAD,EAAM;AACnB,QAAI,KAAKH,KAAT,EAAgB;AACZG,MAAAA,GAAG,CAACC,SAAJ,GAAgB,KAAKJ,KAAL,CAAWI,SAA3B;AACAD,MAAAA,GAAG,CAACE,QAAJ,GAAe,KAAKL,KAAL,CAAWK,QAA1B;AACAF,MAAAA,GAAG,CAACG,WAAJ,GAAkB,KAAKN,KAAL,CAAWM,WAA7B;AAEAH,MAAAA,GAAG,CAACI,OAAJ,GAAc,KAAKN,cAAL,GAAsB,KAAKD,KAAL,CAAWI,SAAjC,GAA6C,KAAKJ,KAAL,CAAWO,OAAtE;AACAJ,MAAAA,GAAG,CAACK,MAAJ,GAAa,KAAKP,cAAL,GAAsB,KAAKD,KAAL,CAAWK,QAAjC,GAA4C,KAAKL,KAAL,CAAWQ,MAApE;AACAL,MAAAA,GAAG,CAACM,SAAJ,GAAgB,KAAKR,cAAL,GAAsB,KAAKD,KAAL,CAAWM,WAAjC,GAA+C,KAAKN,KAAL,CAAWS,SAA1E;AACH;AACJ;;AAEDC,EAAAA,qBAAqB,CAACC,GAAD,EAAMC,IAAN,EAAY;AAC7B,WAAO;AACHC,MAAAA,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4B;AAClCH,QAAAA,IAAI,CAACC,UAAL,CAAgBG,IAAhB,CAAqB,IAArB,EAA2BF,QAA3B,EAAqCC,eAArC;;AAEApB,QAAAA,KAAK,CAACsB,OAAN,CAAc,KAAKC,SAAnB,EAA8BzB,4BAA9B,EAA4DkB,GAAG,CAACZ,IAAhE;AACAJ,QAAAA,KAAK,CAACsB,OAAN,CAAc,KAAKC,SAAnB,EAA8BxB,0BAA9B;AACH,OANE;;AAQHyB,MAAAA,kBAAkB,CAACC,KAAD,EAAQ;AACtBT,QAAAA,GAAG,CAACX,KAAJ,GAAYoB,KAAK,CAACC,QAAlB;;AAEAT,QAAAA,IAAI,CAACO,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,EAAmCI,KAAnC;AACH,OAZE;;AAcHE,MAAAA,IAAI,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAChBb,QAAAA,GAAG,CAACV,cAAJ,GAAqBuB,OAAO,IAAIA,OAAO,CAACC,WAAxC;;AACAd,QAAAA,GAAG,CAACe,YAAJ,CAAiBH,IAAjB;AACH;;AAjBE,KAAP;AAmBH;;AAzC2D;;AA4ChEI,MAAM,CAACC,OAAP,GAAiBhC,yBAAjB","sourcesContent":["'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n    constructor(parser, opts) {\n        super(parser, opts);\n\n        this.opts = opts;\n        this.ctLoc = null;\n        this.locBeforeToken = false;\n    }\n\n    _setErrorLocation(err) {\n        if (this.ctLoc) {\n            err.startLine = this.ctLoc.startLine;\n            err.startCol = this.ctLoc.startCol;\n            err.startOffset = this.ctLoc.startOffset;\n\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n            },\n\n            _processInputToken(token) {\n                mxn.ctLoc = token.location;\n\n                orig._processInputToken.call(this, token);\n            },\n\n            _err(code, options) {\n                mxn.locBeforeToken = options && options.beforeToken;\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingParserMixin;\n"]},"metadata":{},"sourceType":"script"}