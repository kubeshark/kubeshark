{"ast":null,"code":"//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n;\n\n(function () {\n  //// Export the API\n  var namespace; // CommonJS / Node module\n\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  } // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = function () {\n      return this || (1, eval)('this');\n    }();\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function\n    /* ... */\n  printf() {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n    ,\n        args = [].slice.call(arguments),\n        i = 0,\n        n = fmt.length,\n        result = '',\n        c,\n        escaped = false,\n        arg,\n        tmp,\n        leadingZero = false,\n        precision,\n        nextArg = function () {\n      return args[argIndex++];\n    },\n        slurpNumber = function () {\n      var digits = '';\n\n      while (/\\d/.test(fmt[i])) {\n        digits += fmt[i++];\n        c = fmt[i];\n      }\n\n      return digits.length > 0 ? parseInt(digits) : null;\n    };\n\n    for (; i < n; ++i) {\n      c = fmt[i];\n\n      if (escaped) {\n        escaped = false;\n\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        } else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        } else {\n          leadingZero = true;\n        }\n\n        precision = slurpNumber();\n\n        switch (c) {\n          case 'b':\n            // number in binary\n            result += parseInt(nextArg(), 10).toString(2);\n            break;\n\n          case 'c':\n            // character\n            arg = nextArg();\n            if (typeof arg === 'string' || arg instanceof String) result += arg;else result += String.fromCharCode(parseInt(arg, 10));\n            break;\n\n          case 'd':\n            // number in decimal\n            result += parseInt(nextArg(), 10);\n            break;\n\n          case 'f':\n            // floating point number\n            tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n            result += leadingZero ? tmp : tmp.replace(/^0/, '');\n            break;\n\n          case 'j':\n            // JSON\n            result += JSON.stringify(nextArg());\n            break;\n\n          case 'o':\n            // number in octal\n            result += '0' + parseInt(nextArg(), 10).toString(8);\n            break;\n\n          case 's':\n            // string\n            result += nextArg();\n            break;\n\n          case 'x':\n            // lowercase hexadecimal\n            result += '0x' + parseInt(nextArg(), 10).toString(16);\n            break;\n\n          case 'X':\n            // uppercase hexadecimal\n            result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n            break;\n\n          default:\n            result += c;\n            break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n\n    return result;\n  }\n})();","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/format/format.js"],"names":["namespace","module","exports","format","eval","vsprintf","console","log","printf","apply","arguments","fmt","replacements","concat","argIndex","args","slice","call","i","n","length","result","c","escaped","arg","tmp","leadingZero","precision","nextArg","slurpNumber","digits","test","parseInt","toString","String","fromCharCode","parseFloat","toFixed","replace","JSON","stringify","toUpperCase"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAE,aAAW;AAEX;AACA,MAAIA,SAAJ,CAHW,CAKX;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,IAAAA,SAAS,GAAGC,MAAM,CAACC,OAAP,GAAiBC,MAA7B;AACD,GAFD,CAIA;AAJA,OAKK;AACH;AACAH,IAAAA,SAAS,GAAI,YAAU;AAAE,aAAO,QAAQ,CAAC,GAAEI,IAAH,EAAS,MAAT,CAAf;AAAiC,KAA7C,EAAb;AACD;;AAEDJ,EAAAA,SAAS,CAACG,MAAV,GAAmBA,MAAnB;AACAH,EAAAA,SAAS,CAACK,QAAV,GAAqBA,QAArB;;AAEA,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,GAAf,KAAuB,UAA7D,EAAyE;AACvEP,IAAAA,SAAS,CAACQ,MAAV,GAAmBA,MAAnB;AACD;;AAED;AAAgB;AAAPA,EAAAA,MAAT,GAA2B;AACzBF,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACM,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAZ;AACD;;AAED,WAASL,QAAT,CAAkBM,GAAlB,EAAuBC,YAAvB,EAAqC;AACnC,WAAOT,MAAM,CAACM,KAAP,CAAa,IAAb,EAAmB,CAACE,GAAD,EAAME,MAAN,CAAaD,YAAb,CAAnB,CAAP;AACD;;AAED,WAAST,MAAT,CAAgBQ,GAAhB,EAAqB;AACnB,QAAIG,QAAQ,GAAG,CAAf,CAAiB;AAAjB;AAAA,QACIC,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcP,SAAd,CADX;AAAA,QAEIQ,CAAC,GAAG,CAFR;AAAA,QAGIC,CAAC,GAAGR,GAAG,CAACS,MAHZ;AAAA,QAIIC,MAAM,GAAG,EAJb;AAAA,QAKIC,CALJ;AAAA,QAMIC,OAAO,GAAG,KANd;AAAA,QAOIC,GAPJ;AAAA,QAQIC,GARJ;AAAA,QASIC,WAAW,GAAG,KATlB;AAAA,QAUIC,SAVJ;AAAA,QAWIC,OAAO,GAAG,YAAW;AAAE,aAAOb,IAAI,CAACD,QAAQ,EAAT,CAAX;AAA0B,KAXrD;AAAA,QAYIe,WAAW,GAAG,YAAW;AACvB,UAAIC,MAAM,GAAG,EAAb;;AACA,aAAO,KAAKC,IAAL,CAAUpB,GAAG,CAACO,CAAD,CAAb,CAAP,EAA0B;AACxBY,QAAAA,MAAM,IAAInB,GAAG,CAACO,CAAC,EAAF,CAAb;AACAI,QAAAA,CAAC,GAAGX,GAAG,CAACO,CAAD,CAAP;AACD;;AACD,aAAOY,MAAM,CAACV,MAAP,GAAgB,CAAhB,GAAoBY,QAAQ,CAACF,MAAD,CAA5B,GAAuC,IAA9C;AACD,KAnBL;;AAqBA,WAAOZ,CAAC,GAAGC,CAAX,EAAc,EAAED,CAAhB,EAAmB;AACjBI,MAAAA,CAAC,GAAGX,GAAG,CAACO,CAAD,CAAP;;AACA,UAAIK,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,KAAV;;AACA,YAAID,CAAC,IAAI,GAAT,EAAc;AACZI,UAAAA,WAAW,GAAG,KAAd;AACAJ,UAAAA,CAAC,GAAGX,GAAG,CAAC,EAAEO,CAAH,CAAP;AACD,SAHD,MAIK,IAAII,CAAC,IAAI,GAAL,IAAYX,GAAG,CAACO,CAAC,GAAG,CAAL,CAAH,IAAc,GAA9B,EAAmC;AACtCQ,UAAAA,WAAW,GAAG,IAAd;AACAR,UAAAA,CAAC,IAAI,CAAL;AACAI,UAAAA,CAAC,GAAGX,GAAG,CAACO,CAAD,CAAP;AACD,SAJI,MAKA;AACHQ,UAAAA,WAAW,GAAG,IAAd;AACD;;AACDC,QAAAA,SAAS,GAAGE,WAAW,EAAvB;;AACA,gBAAQP,CAAR;AACA,eAAK,GAAL;AAAU;AACRD,YAAAA,MAAM,IAAIW,QAAQ,CAACJ,OAAO,EAAR,EAAY,EAAZ,CAAR,CAAwBK,QAAxB,CAAiC,CAAjC,CAAV;AACA;;AACF,eAAK,GAAL;AAAU;AACRT,YAAAA,GAAG,GAAGI,OAAO,EAAb;AACA,gBAAI,OAAOJ,GAAP,KAAe,QAAf,IAA2BA,GAAG,YAAYU,MAA9C,EACEb,MAAM,IAAIG,GAAV,CADF,KAGEH,MAAM,IAAIa,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAACR,GAAD,EAAM,EAAN,CAA5B,CAAV;AACF;;AACF,eAAK,GAAL;AAAU;AACRH,YAAAA,MAAM,IAAIW,QAAQ,CAACJ,OAAO,EAAR,EAAY,EAAZ,CAAlB;AACA;;AACF,eAAK,GAAL;AAAU;AACRH,YAAAA,GAAG,GAAGS,MAAM,CAACE,UAAU,CAACR,OAAO,EAAR,CAAV,CAAsBS,OAAtB,CAA8BV,SAAS,IAAI,CAA3C,CAAD,CAAZ;AACAN,YAAAA,MAAM,IAAIK,WAAW,GAAGD,GAAH,GAASA,GAAG,CAACa,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAA9B;AACA;;AACF,eAAK,GAAL;AAAU;AACRjB,YAAAA,MAAM,IAAIkB,IAAI,CAACC,SAAL,CAAeZ,OAAO,EAAtB,CAAV;AACA;;AACF,eAAK,GAAL;AAAU;AACRP,YAAAA,MAAM,IAAI,MAAMW,QAAQ,CAACJ,OAAO,EAAR,EAAY,EAAZ,CAAR,CAAwBK,QAAxB,CAAiC,CAAjC,CAAhB;AACA;;AACF,eAAK,GAAL;AAAU;AACRZ,YAAAA,MAAM,IAAIO,OAAO,EAAjB;AACA;;AACF,eAAK,GAAL;AAAU;AACRP,YAAAA,MAAM,IAAI,OAAOW,QAAQ,CAACJ,OAAO,EAAR,EAAY,EAAZ,CAAR,CAAwBK,QAAxB,CAAiC,EAAjC,CAAjB;AACA;;AACF,eAAK,GAAL;AAAU;AACRZ,YAAAA,MAAM,IAAI,OAAOW,QAAQ,CAACJ,OAAO,EAAR,EAAY,EAAZ,CAAR,CAAwBK,QAAxB,CAAiC,EAAjC,EAAqCQ,WAArC,EAAjB;AACA;;AACF;AACEpB,YAAAA,MAAM,IAAIC,CAAV;AACA;AAnCF;AAqCD,OApDD,MAoDO,IAAIA,CAAC,KAAK,GAAV,EAAe;AACpBC,QAAAA,OAAO,GAAG,IAAV;AACD,OAFM,MAEA;AACLF,QAAAA,MAAM,IAAIC,CAAV;AACD;AACF;;AACD,WAAOD,MAAP;AACD;AAEF,CApHC,GAAD","sourcesContent":["//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n"]},"metadata":{},"sourceType":"script"}