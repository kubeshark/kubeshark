{"ast":null,"code":"'use strict';\n\nmodule.exports = javadoclike;\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/javadoclike.js"],"names":["module","exports","javadoclike","displayName","aliases","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}