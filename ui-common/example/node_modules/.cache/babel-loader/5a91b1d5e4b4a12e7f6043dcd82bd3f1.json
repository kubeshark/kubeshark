{"ast":null,"code":"'use strict';\n\nvar refractorJava = require('./java.js');\n\nvar refractorJavadoclike = require('./javadoclike.js');\n\nmodule.exports = javadoc;\njavadoc.displayName = 'javadoc';\njavadoc.aliases = [];\n\nfunction javadoc(Prism) {\n  Prism.register(refractorJava);\n  Prism.register(refractorJavadoclike);\n\n  (function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m;\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source;\n    var reference = /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(/<mem>/g, function () {\n      return memberReference;\n    });\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {});\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(/(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/.source + '(?:' + reference + ')'),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [{\n        pattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n        lookbehind: true,\n        inside: {\n          code: {\n            // there can't be any HTML inside of {@code} tags\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: Prism.languages.java,\n            alias: 'language-java'\n          }\n        }\n      }, {\n        pattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n        lookbehind: true,\n        inside: {\n          line: {\n            pattern: codeLinePattern,\n            lookbehind: true,\n            inside: {\n              // highlight HTML tags and entities\n              tag: Prism.languages.markup.tag,\n              entity: Prism.languages.markup.entity,\n              code: {\n                // everything else is Java code\n                pattern: /.+/,\n                inside: Prism.languages.java,\n                alias: 'language-java'\n              }\n            }\n          }\n        }\n      }],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    });\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc);\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/javadoc.js"],"names":["refractorJava","require","refractorJavadoclike","module","exports","javadoc","displayName","aliases","Prism","register","codeLinePattern","memberReference","source","reference","replace","languages","extend","insertBefore","pattern","RegExp","lookbehind","inside","function","field","namespace","punctuation","keyword","java","code","alias","line","tag","markup","entity","javadoclike","addSupport"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}