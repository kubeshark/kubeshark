{"ast":null,"code":"/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/stringify-entities/lib/util/to-hexadecimal.js"],"names":["toHexadecimal","code","next","omit","value","toString","toUpperCase","test","String","fromCharCode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AAC9C,QAAMC,KAAK,GAAG,QAAQH,IAAI,CAACI,QAAL,CAAc,EAAd,EAAkBC,WAAlB,EAAtB;AACA,SAAOH,IAAI,IAAID,IAAR,IAAgB,CAAC,aAAaK,IAAb,CAAkBC,MAAM,CAACC,YAAP,CAAoBP,IAApB,CAAlB,CAAjB,GACHE,KADG,GAEHA,KAAK,GAAG,GAFZ;AAGD","sourcesContent":["/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n"]},"metadata":{},"sourceType":"module"}