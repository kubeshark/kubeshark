{"ast":null,"code":"/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Comment} Comment\n */\nimport { stringifyEntities } from 'stringify-entities';\n/**\n * @type {Handle}\n * @param {Comment} node\n */\n\nexport function comment(ctx, node) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return ctx.bogusComments ? '<?' + stringifyEntities(node.value, Object.assign({}, ctx.entities, {\n    subset: ['>']\n  })) + '>' : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->';\n  /**\n   * @param {string} $0\n   */\n\n  function encode($0) {\n    return stringifyEntities($0, Object.assign({}, ctx.entities, {\n      subset: ['<', '>']\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/hast-util-to-html/lib/comment.js"],"names":["stringifyEntities","comment","ctx","node","bogusComments","value","Object","assign","entities","subset","replace","encode","$0"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,oBAAhC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AACjC;AACA,SAAOD,GAAG,CAACE,aAAJ,GACH,OACEJ,iBAAiB,CACfG,IAAI,CAACE,KADU,EAEfC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAG,CAACM,QAAtB,EAAgC;AAACC,IAAAA,MAAM,EAAE,CAAC,GAAD;AAAT,GAAhC,CAFe,CADnB,GAKE,GANC,GAOH,SAASN,IAAI,CAACE,KAAL,CAAWK,OAAX,CAAmB,4BAAnB,EAAiDC,MAAjD,CAAT,GAAoE,KAPxE;AASA;AACF;AACA;;AACE,WAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,WAAOZ,iBAAiB,CACtBY,EADsB,EAEtBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAG,CAACM,QAAtB,EAAgC;AAACC,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN;AAAT,KAAhC,CAFsB,CAAxB;AAID;AACF","sourcesContent":["/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Comment} Comment\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(ctx, node) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return ctx.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, ctx.entities, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, ctx.entities, {subset: ['<', '>']})\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}