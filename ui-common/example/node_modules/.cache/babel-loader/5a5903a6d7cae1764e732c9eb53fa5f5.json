{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/react-transition-group/esm/Transition.js"],"names":["_objectWithoutPropertiesLoose","_inheritsLoose","PropTypes","React","ReactDOM","config","timeoutsShape","TransitionGroupContext","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","props","context","_this","call","parentGroup","appear","isMounting","enter","initialStatus","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","getDerivedStateFromProps","_ref","prevState","nextIn","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","timeout","exit","undefined","mounting","performEnter","performExit","setState","_this2","appearing","_ref2","nodeRef","findDOMNode","maybeNode","maybeAppearing","timeouts","enterTimeout","disabled","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExited","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","node","current","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","_ref3","maybeNextCallback","render","_this$props","children","_in","_mountOnEnter","_unmountOnExit","_appear","_enter","_exit","_timeout","_addEndListener","_onEnter","_onEntering","_onEntered","_onExit","_onExiting","_onExited","_nodeRef","childProps","createElement","Provider","value","cloneElement","Children","only","Component","contextType","propTypes","process","env","NODE_ENV","shape","Element","any","propValue","key","componentName","location","propFullName","secret","instanceOf","ownerDocument","defaultView","oneOfType","func","isRequired","element","bool","pt","_len","arguments","length","args","Array","_key","apply","concat","noop","defaultProps"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAO,IAAIC,SAAS,GAAG,WAAhB;AACP,OAAO,IAAIC,MAAM,GAAG,QAAb;AACP,OAAO,IAAIC,QAAQ,GAAG,UAAf;AACP,OAAO,IAAIC,OAAO,GAAG,SAAd;AACP,OAAO,IAAIC,OAAO,GAAG,SAAd;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAG,aAAa,UAAUC,gBAAV,EAA4B;AACxDb,EAAAA,cAAc,CAACY,UAAD,EAAaC,gBAAb,CAAd;;AAEA,WAASD,UAAT,CAAoBE,KAApB,EAA2BC,OAA3B,EAAoC;AAClC,QAAIC,KAAJ;;AAEAA,IAAAA,KAAK,GAAGH,gBAAgB,CAACI,IAAjB,CAAsB,IAAtB,EAA4BH,KAA5B,EAAmCC,OAAnC,KAA+C,IAAvD;AACA,QAAIG,WAAW,GAAGH,OAAlB,CAJkC,CAIP;;AAE3B,QAAII,MAAM,GAAGD,WAAW,IAAI,CAACA,WAAW,CAACE,UAA5B,GAAyCN,KAAK,C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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;"]},"metadata":{},"sourceType":"module"}