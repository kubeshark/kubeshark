{"ast":null,"code":"/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\nfunction json(hljs) {\n  const ATTRIBUTE = {\n    className: 'attr',\n    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    relevance: 1.01\n  };\n  const PUNCTUATION = {\n    match: /[{}[\\],:]/,\n    className: \"punctuation\",\n    relevance: 0\n  }; // normally we would rely on `keywords` for this but using a mode here allows us\n  // to use the very tight `illegal: \\S` rule later to flag any other character\n  // as illegal indicating that despite looking like JSON we do not truly have\n  // JSON and thus improve false-positively greatly since JSON will try and claim\n  // all sorts of JSON looking stuff\n\n  const LITERALS = {\n    beginKeywords: [\"true\", \"false\", \"null\"].join(\" \")\n  };\n  return {\n    name: 'JSON',\n    contains: [ATTRIBUTE, PUNCTUATION, hljs.QUOTE_STRING_MODE, LITERALS, hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n    illegal: '\\\\S'\n  };\n}\n\nmodule.exports = json;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/highlight.js/lib/languages/json.js"],"names":["json","hljs","ATTRIBUTE","className","begin","relevance","PUNCTUATION","match","LITERALS","beginKeywords","join","name","contains","QUOTE_STRING_MODE","C_NUMBER_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","illegal","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,SAAS,GAAG;AAChBC,IAAAA,SAAS,EAAE,MADK;AAEhBC,IAAAA,KAAK,EAAE,6BAFS;AAGhBC,IAAAA,SAAS,EAAE;AAHK,GAAlB;AAKA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,KAAK,EAAE,WADW;AAElBJ,IAAAA,SAAS,EAAE,aAFO;AAGlBE,IAAAA,SAAS,EAAE;AAHO,GAApB,CANkB,CAWlB;AACA;AACA;AACA;AACA;;AACA,QAAMG,QAAQ,GAAG;AACfC,IAAAA,aAAa,EAAE,CACb,MADa,EAEb,OAFa,EAGb,MAHa,EAIbC,IAJa,CAIR,GAJQ;AADA,GAAjB;AAQA,SAAO;AACLC,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,QAAQ,EAAE,CACRV,SADQ,EAERI,WAFQ,EAGRL,IAAI,CAACY,iBAHG,EAIRL,QAJQ,EAKRP,IAAI,CAACa,aALG,EAMRb,IAAI,CAACc,mBANG,EAORd,IAAI,CAACe,oBAPG,CAFL;AAWLC,IAAAA,OAAO,EAAE;AAXJ,GAAP;AAaD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\n\nfunction json(hljs) {\n  const ATTRIBUTE = {\n    className: 'attr',\n    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    relevance: 1.01\n  };\n  const PUNCTUATION = {\n    match: /[{}[\\],:]/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n  // normally we would rely on `keywords` for this but using a mode here allows us\n  // to use the very tight `illegal: \\S` rule later to flag any other character\n  // as illegal indicating that despite looking like JSON we do not truly have\n  // JSON and thus improve false-positively greatly since JSON will try and claim\n  // all sorts of JSON looking stuff\n  const LITERALS = {\n    beginKeywords: [\n      \"true\",\n      \"false\",\n      \"null\"\n    ].join(\" \")\n  };\n\n  return {\n    name: 'JSON',\n    contains: [\n      ATTRIBUTE,\n      PUNCTUATION,\n      hljs.QUOTE_STRING_MODE,\n      LITERALS,\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ],\n    illegal: '\\\\S'\n  };\n}\n\nmodule.exports = json;\n"]},"metadata":{},"sourceType":"script"}