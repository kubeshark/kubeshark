{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar el;\nvar semicolon = 59; //  ';'\n\nmodule.exports = decodeEntity;\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';';\n  var char;\n  el = el || document.createElement('i');\n  el.innerHTML = entity;\n  char = el.textContent; // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\n  // assume that the matching was incomplete\n\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false;\n  } // If the decoded string is equal to the input, the entity was not valid\n\n\n  return char === entity ? false : char;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/parse-entities/decode-entity.browser.js"],"names":["el","semicolon","module","exports","decodeEntity","characters","entity","char","document","createElement","innerHTML","textContent","charCodeAt","length"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,EAAJ;AAEA,IAAIC,SAAS,GAAG,EAAhB,C,CAAmB;;AAEnBC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AAChC,MAAIC,MAAM,GAAG,MAAMD,UAAN,GAAmB,GAAhC;AACA,MAAIE,IAAJ;AAEAP,EAAAA,EAAE,GAAGA,EAAE,IAAIQ,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;AACAT,EAAAA,EAAE,CAACU,SAAH,GAAeJ,MAAf;AACAC,EAAAA,IAAI,GAAGP,EAAE,CAACW,WAAV,CANgC,CAQhC;AACA;AACA;AACA;AACA;;AACA,MAAIJ,IAAI,CAACK,UAAL,CAAgBL,IAAI,CAACM,MAAL,GAAc,CAA9B,MAAqCZ,SAArC,IAAkDI,UAAU,KAAK,MAArE,EAA6E;AAC3E,WAAO,KAAP;AACD,GAf+B,CAiBhC;;;AACA,SAAOE,IAAI,KAAKD,MAAT,GAAkB,KAAlB,GAA0BC,IAAjC;AACD","sourcesContent":["'use strict'\n\n/* eslint-env browser */\n\nvar el\n\nvar semicolon = 59 //  ';'\n\nmodule.exports = decodeEntity\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  var char\n\n  el = el || document.createElement('i')\n  el.innerHTML = entity\n  char = el.textContent\n\n  // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `¬it;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\n  // assume that the matching was incomplete\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n"]},"metadata":{},"sourceType":"script"}