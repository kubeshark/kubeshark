{"ast":null,"code":"/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   var h = require('hastscript')\n *   var toString = require('hast-util-to-string')\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n'use strict';\n\nmodule.exports = toString;\n\nfunction toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node);\n  } // “Context object’s data.”\n\n\n  return 'value' in node ? node.value : '';\n}\n\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value;\n  }\n\n  return node.children ? all(node) : '';\n}\n\nfunction all(node) {\n  var children = node.children;\n  var length = children.length;\n  var index = -1;\n  var result = [];\n\n  while (++index < length) {\n    result[index] = one(children[index]);\n  }\n\n  return result.join('');\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/hast-util-to-string/index.js"],"names":["module","exports","toString","node","all","value","one","type","children","length","index","result","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA;AACA,MAAI,cAAcA,IAAlB,EAAwB;AACtB,WAAOC,GAAG,CAACD,IAAD,CAAV;AACD,GALqB,CAOtB;;;AACA,SAAO,WAAWA,IAAX,GAAkBA,IAAI,CAACE,KAAvB,GAA+B,EAAtC;AACD;;AAED,SAASC,GAAT,CAAaH,IAAb,EAAmB;AACjB,MAAIA,IAAI,CAACI,IAAL,KAAc,MAAlB,EAA0B;AACxB,WAAOJ,IAAI,CAACE,KAAZ;AACD;;AAED,SAAOF,IAAI,CAACK,QAAL,GAAgBJ,GAAG,CAACD,IAAD,CAAnB,GAA4B,EAAnC;AACD;;AAED,SAASC,GAAT,CAAaD,IAAb,EAAmB;AACjB,MAAIK,QAAQ,GAAGL,IAAI,CAACK,QAApB;AACA,MAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAO,EAAED,KAAF,GAAUD,MAAjB,EAAyB;AACvBE,IAAAA,MAAM,CAACD,KAAD,CAAN,GAAgBJ,GAAG,CAACE,QAAQ,CAACE,KAAD,CAAT,CAAnB;AACD;;AAED,SAAOC,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAP;AACD","sourcesContent":["/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   var h = require('hastscript')\n *   var toString = require('hast-util-to-string')\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n'use strict'\n\nmodule.exports = toString\n\nfunction toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return node.children ? all(node) : ''\n}\n\nfunction all(node) {\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var result = []\n\n  while (++index < length) {\n    result[index] = one(children[index])\n  }\n\n  return result.join('')\n}\n"]},"metadata":{},"sourceType":"script"}