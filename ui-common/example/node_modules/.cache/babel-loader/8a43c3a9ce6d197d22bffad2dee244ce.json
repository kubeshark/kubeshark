{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport var light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport var dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  var tonalOffsetLight = tonalOffset.light || tonalOffset;\n  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  var _palette$primary = palette.primary,\n      primary = _palette$primary === void 0 ? {\n    light: indigo[300],\n    main: indigo[500],\n    dark: indigo[700]\n  } : _palette$primary,\n      _palette$secondary = palette.secondary,\n      secondary = _palette$secondary === void 0 ? {\n    light: pink.A200,\n    main: pink.A400,\n    dark: pink.A700\n  } : _palette$secondary,\n      _palette$error = palette.error,\n      error = _palette$error === void 0 ? {\n    light: red[300],\n    main: red[500],\n    dark: red[700]\n  } : _palette$error,\n      _palette$warning = palette.warning,\n      warning = _palette$warning === void 0 ? {\n    light: orange[300],\n    main: orange[500],\n    dark: orange[700]\n  } : _palette$warning,\n      _palette$info = palette.info,\n      info = _palette$info === void 0 ? {\n    light: blue[300],\n    main: blue[500],\n    dark: blue[700]\n  } : _palette$info,\n      _palette$success = palette.success,\n      success = _palette$success === void 0 ? {\n    light: green[300],\n    main: green[500],\n    dark: green[700]\n  } : _palette$success,\n      _palette$type = palette.type,\n      type = _palette$type === void 0 ? 'light' : _palette$type,\n      _palette$contrastThre = palette.contrastThreshold,\n      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,\n      _palette$tonalOffset = palette.tonalOffset,\n      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,\n      other = _objectWithoutProperties(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"type\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([\"Material-UI: The contrast ratio of \".concat(contrast, \":1 for \").concat(contrastText, \" on \").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  var augmentColor = function augmentColor(color) {\n    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;\n    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color provided to augmentColor(color) is invalid.\\nThe color object needs to have a `main` property or a `\".concat(mainShade, \"` property.\") : _formatMuiErrorMessage(4, mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color provided to augmentColor(color) is invalid.\\n`color.main` should be a string, but `\".concat(JSON.stringify(color.main), \"` was provided instead.\\n\\nDid you intend to use one of the following approaches?\\n\\nimport {\\xA0green } from \\\"@material-ui/core/colors\\\";\\n\\nconst theme1 = createTheme({ palette: {\\n  primary: green,\\n} });\\n\\nconst theme2 = createTheme({ palette: {\\n  primary: { main: green[500] },\\n} });\") : _formatMuiErrorMessage(5, JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  var types = {\n    dark: dark,\n    light: light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(\"Material-UI: The palette type `\".concat(type, \"` is not supported.\"));\n    }\n  }\n\n  var paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common: common,\n    // The palette type, can be light or dark.\n    type: type,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey: grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText: getContrastText,\n    // Generate a rich color object.\n    augmentColor: augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: tonalOffset\n  }, types[type]), other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/@material-ui/core/esm/styles/createPalette.js"],"names":["_extends","_objectWithoutProperties","formatMuiErrorMessage","_formatMuiErrorMessage","deepmerge","common","grey","indigo","pink","red","orange","blue","green","darken","getContrastRatio","lighten","light","text","primary","secondary","disabled","hint","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","activatedOpacity","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","tonalOffsetLight","tonalOffsetDark","hasOwnProperty","main","createPalette","palette","_palette$primary","_palette$secondary","A200","A400","A700","_palette$error","error","_palette$warning","warning","_palette$info","info","_palette$success","success","_palette$type","type","_palette$contrastThre","contrastThreshold","_palette$tonalOffset","other","getContrastText","contrastText","process","env","NODE_ENV","contrast","console","concat","join","augmentColor","color","mainShade","arguments","length","undefined","lightShade","darkShade","Error","JSON","stringify","types","paletteOutput"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport var light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport var dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  var tonalOffsetLight = tonalOffset.light || tonalOffset;\n  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  var _palette$primary = palette.primary,\n      primary = _palette$primary === void 0 ? {\n    light: indigo[300],\n    main: indigo[500],\n    dark: indigo[700]\n  } : _palette$primary,\n      _palette$secondary = palette.secondary,\n      secondary = _palette$secondary === void 0 ? {\n    light: pink.A200,\n    main: pink.A400,\n    dark: pink.A700\n  } : _palette$secondary,\n      _palette$error = palette.error,\n      error = _palette$error === void 0 ? {\n    light: red[300],\n    main: red[500],\n    dark: red[700]\n  } : _palette$error,\n      _palette$warning = palette.warning,\n      warning = _palette$warning === void 0 ? {\n    light: orange[300],\n    main: orange[500],\n    dark: orange[700]\n  } : _palette$warning,\n      _palette$info = palette.info,\n      info = _palette$info === void 0 ? {\n    light: blue[300],\n    main: blue[500],\n    dark: blue[700]\n  } : _palette$info,\n      _palette$success = palette.success,\n      success = _palette$success === void 0 ? {\n    light: green[300],\n    main: green[500],\n    dark: green[700]\n  } : _palette$success,\n      _palette$type = palette.type,\n      type = _palette$type === void 0 ? 'light' : _palette$type,\n      _palette$contrastThre = palette.contrastThreshold,\n      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,\n      _palette$tonalOffset = palette.tonalOffset,\n      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,\n      other = _objectWithoutProperties(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"type\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([\"Material-UI: The contrast ratio of \".concat(contrast, \":1 for \").concat(contrastText, \" on \").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  var augmentColor = function augmentColor(color) {\n    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;\n    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color provided to augmentColor(color) is invalid.\\nThe color object needs to have a `main` property or a `\".concat(mainShade, \"` property.\") : _formatMuiErrorMessage(4, mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The color provided to augmentColor(color) is invalid.\\n`color.main` should be a string, but `\".concat(JSON.stringify(color.main), \"` was provided instead.\\n\\nDid you intend to use one of the following approaches?\\n\\nimport {\\xA0green } from \\\"@material-ui/core/colors\\\";\\n\\nconst theme1 = createTheme({ palette: {\\n  primary: green,\\n} });\\n\\nconst theme2 = createTheme({ palette: {\\n  primary: { main: green[500] },\\n} });\") : _formatMuiErrorMessage(5, JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  var types = {\n    dark: dark,\n    light: light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(\"Material-UI: The palette type `\".concat(type, \"` is not supported.\"));\n    }\n  }\n\n  var paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common: common,\n    // The palette type, can be light or dark.\n    type: type,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey: grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText: getContrastText,\n    // Generate a rich color object.\n    augmentColor: augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: tonalOffset\n  }, types[type]), other);\n  return paletteOutput;\n}"]},"metadata":{},"sourceType":"module"}