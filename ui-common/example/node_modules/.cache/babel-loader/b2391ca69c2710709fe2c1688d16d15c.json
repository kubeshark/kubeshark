{"ast":null,"code":"'use strict';\n\nmodule.exports = regex;\nregex.displayName = 'regex';\nregex.aliases = [];\n\nfunction regex(Prism) {\n  ;\n\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [{\n        // a backreference which is not an octal escape\n        pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n        alias: 'keyword'\n      }, {\n        pattern: /\\\\k<[^<>']+>/,\n        alias: 'keyword',\n        inside: {\n          'group-name': groupName\n        }\n      }],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        alias: 'punctuation',\n        inside: {\n          'group-name': groupName\n        }\n      }, {\n        pattern: /\\)/,\n        alias: 'punctuation'\n      }],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/regex.js"],"names":["module","exports","regex","displayName","aliases","Prism","specialEscape","pattern","alias","escape","charSet","charSetWithoutDot","rangeChar","source","range","RegExp","groupName","lookbehind","languages","inside","backreference","anchor","group","quantifier","alternation"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}