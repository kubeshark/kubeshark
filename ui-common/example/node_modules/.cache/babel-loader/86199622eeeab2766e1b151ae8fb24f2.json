{"ast":null,"code":"'use strict';\n\nmodule.exports = pascal;\npascal.displayName = 'pascal';\npascal.aliases = ['objectpascal'];\n\nfunction pascal(Prism) {\n  // Based on Free Pascal\n\n  /* TODO\n  Support inline asm ?\n  */\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    keyword: [{\n      // Turbo Pascal\n      pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n      lookbehind: true\n    }, {\n      // Free Pascal\n      pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n      lookbehind: true\n    }, {\n      // Object Pascal\n      pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n      lookbehind: true\n    }, {\n      // Modifiers\n      pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n      lookbehind: true\n    }],\n    number: [// Hexadecimal, octal and binary\n    /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n    /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n    operator: [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/, {\n      pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n      lookbehind: true\n    }],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  };\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  });\n  Prism.languages.objectpascal = Prism.languages.pascal;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/pascal.js"],"names":["module","exports","pascal","displayName","aliases","Prism","languages","directive","pattern","greedy","alias","comment","string","asm","lookbehind","inside","keyword","number","operator","punctuation","extend","undefined","objectpascal"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,cAAD,CAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrB;;AACA;AACF;AACA;AACEA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,gBADA;AAETC,MAAAA,MAAM,EAAE,IAFC;AAGTC,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,UAAV;AAHE,KADY;AAMvBC,IAAAA,OAAO,EAAE;AACPH,MAAAA,OAAO,EAAE,sCADF;AAEPC,MAAAA,MAAM,EAAE;AAFD,KANc;AAUvBG,IAAAA,MAAM,EAAE;AACNJ,MAAAA,OAAO,EAAE,uDADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAVe;AAcvBI,IAAAA,GAAG,EAAE;AACHL,MAAAA,OAAO,EAAE,oCADN;AAEHM,MAAAA,UAAU,EAAE,IAFT;AAGHL,MAAAA,MAAM,EAAE,IAHL;AAIHM,MAAAA,MAAM,EAAE,IAJL,CAIU;;AAJV,KAdkB;AAoBvBC,IAAAA,OAAO,EAAE,CACP;AACE;AACAR,MAAAA,OAAO,EACL,gTAHJ;AAIEM,MAAAA,UAAU,EAAE;AAJd,KADO,EAOP;AACE;AACAN,MAAAA,OAAO,EAAE,8CAFX;AAGEM,MAAAA,UAAU,EAAE;AAHd,KAPO,EAYP;AACE;AACAN,MAAAA,OAAO,EACL,kKAHJ;AAIEM,MAAAA,UAAU,EAAE;AAJd,KAZO,EAkBP;AACE;AACAN,MAAAA,OAAO,EACL,khBAHJ;AAIEM,MAAAA,UAAU,EAAE;AAJd,KAlBO,CApBc;AA6CvBG,IAAAA,MAAM,EAAE,CACN;AACA,6BAFM,EAEqB;AAC3B,oCAHM,CA7Ce;AAkDvBC,IAAAA,QAAQ,EAAE,CACR,8CADQ,EAER;AACEV,MAAAA,OAAO,EACL,yEAFJ;AAGEM,MAAAA,UAAU,EAAE;AAHd,KAFQ,CAlDa;AA0DvBK,IAAAA,WAAW,EAAE;AA1DU,GAAzB;AA4DAd,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBW,GAAvB,CAA2BE,MAA3B,GAAoCV,KAAK,CAACC,SAAN,CAAgBc,MAAhB,CAAuB,QAAvB,EAAiC;AACnEP,IAAAA,GAAG,EAAEQ,SAD8D;AAEnEL,IAAAA,OAAO,EAAEK,SAF0D;AAGnEH,IAAAA,QAAQ,EAAEG;AAHyD,GAAjC,CAApC;AAKAhB,EAAAA,KAAK,CAACC,SAAN,CAAgBgB,YAAhB,GAA+BjB,KAAK,CAACC,SAAN,CAAgBJ,MAA/C;AACD","sourcesContent":["'use strict'\n\nmodule.exports = pascal\npascal.displayName = 'pascal'\npascal.aliases = ['objectpascal']\nfunction pascal(Prism) {\n  // Based on Free Pascal\n  /* TODO\nSupport inline asm ?\n*/\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n    keyword: [\n      {\n        // Turbo Pascal\n        pattern:\n          /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Free Pascal\n        pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Object Pascal\n        pattern:\n          /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Modifiers\n        pattern:\n          /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n        lookbehind: true\n      }\n    ],\n    number: [\n      // Hexadecimal, octal and binary\n      /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n    ],\n    operator: [\n      /\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/,\n      {\n        pattern:\n          /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  }\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  })\n  Prism.languages.objectpascal = Prism.languages.pascal\n}\n"]},"metadata":{},"sourceType":"script"}