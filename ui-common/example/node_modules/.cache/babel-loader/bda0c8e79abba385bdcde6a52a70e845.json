{"ast":null,"code":"'use strict';\n\nmodule.exports = graphql;\ngraphql.displayName = 'graphql';\ngraphql.aliases = [];\n\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  };\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return;\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n\n\n    var validTokens = env.tokens.filter(function (token) {\n      return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n    });\n    var currentIndex = 0;\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n\n    function getToken(offset) {\n      return validTokens[currentIndex + offset];\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n\n\n    function isTokenType(types, offset) {\n      offset = offset || 0;\n\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset);\n\n        if (!token || token.type !== types[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n\n\n    function findClosingBracket(open, close) {\n      var stackHeight = 1;\n\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i];\n        var content = token.content;\n\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++;\n          } else if (close.test(content)) {\n            stackHeight--;\n\n            if (stackHeight === 0) {\n              return i;\n            }\n          }\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n\n\n    function addAlias(token, alias) {\n      var aliases = token.alias;\n\n      if (!aliases) {\n        token.alias = aliases = [];\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases];\n      }\n\n      aliases.push(alias);\n    }\n\n    for (; currentIndex < validTokens.length;) {\n      var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = [];\n\n        if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n          // definition\n          currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n          if (definitionEnd === -1) {\n            continue;\n          } // find all input variables\n\n\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0);\n\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input');\n              inputVariables.push(t.content);\n            }\n          }\n\n          currentIndex = definitionEnd + 1;\n        }\n\n        if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n          currentIndex++; // skip opening bracket\n\n          addAlias(getToken(0), 'property-mutation');\n\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n            if (mutationEnd === -1) {\n              continue;\n            } // give references to input variables a special alias\n\n\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i];\n\n              if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n                addAlias(varToken, 'variable-input');\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/graphql.js"],"names":["module","exports","graphql","displayName","aliases","Prism","languages","comment","description","pattern","greedy","alias","inside","lookbehind","markdown","string","number","boolean","variable","directive","scalar","constant","fragment","keyword","operator","object","punctuation","property","hooks","add","afterTokenizeGraphql","env","language","validTokens","tokens","filter","token","type","currentIndex","getToken","offset","isTokenType","types","i","length","findClosingBracket","open","close","stackHeight","content","test","addAlias","Array","isArray","push","startToken","inputVariables","definitionEnd","t","mutationEnd","varToken","indexOf"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = graphql\ngraphql.displayName = 'graphql'\ngraphql.aliases = []\nfunction graphql(Prism) {\n  Prism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n      pattern:\n        /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'language-markdown': {\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: Prism.languages.markdown\n        }\n      }\n    },\n    string: {\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n      pattern: /@[a-z_]\\w*/i,\n      alias: 'function'\n    },\n    'attr-name': {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n      greedy: true\n    },\n    'atom-input': {\n      pattern: /\\b[A-Z]\\w*Input\\b/,\n      alias: 'class-name'\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n      lookbehind: true\n    },\n    fragment: {\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-mutation': {\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'definition-query': {\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    keyword:\n      /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    'property-query': /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n  }\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n    if (env.language !== 'graphql') {\n      return\n    }\n    /**\n     * get the graphql token stream that we want to customize\n     *\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n     * @type {Token[]}\n     */\n    var validTokens = env.tokens.filter(function (token) {\n      return (\n        typeof token !== 'string' &&\n        token.type !== 'comment' &&\n        token.type !== 'scalar'\n      )\n    })\n    var currentIndex = 0\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {number} offset\n     * @returns {Token | undefined}\n     */\n    function getToken(offset) {\n      return validTokens[currentIndex + offset]\n    }\n    /**\n     * Returns whether the token relative to the current index has the given type.\n     *\n     * @param {readonly string[]} types\n     * @param {number} [offset=0]\n     * @returns {boolean}\n     */\n    function isTokenType(types, offset) {\n      offset = offset || 0\n      for (var i = 0; i < types.length; i++) {\n        var token = getToken(i + offset)\n        if (!token || token.type !== types[i]) {\n          return false\n        }\n      }\n      return true\n    }\n    /**\n     * Returns the index of the closing bracket to an opening bracket.\n     *\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n     *\n     * If no closing bracket could be found, `-1` will be returned.\n     *\n     * @param {RegExp} open\n     * @param {RegExp} close\n     * @returns {number}\n     */\n    function findClosingBracket(open, close) {\n      var stackHeight = 1\n      for (var i = currentIndex; i < validTokens.length; i++) {\n        var token = validTokens[i]\n        var content = token.content\n        if (token.type === 'punctuation' && typeof content === 'string') {\n          if (open.test(content)) {\n            stackHeight++\n          } else if (close.test(content)) {\n            stackHeight--\n            if (stackHeight === 0) {\n              return i\n            }\n          }\n        }\n      }\n      return -1\n    }\n    /**\n     * Adds an alias to the given token.\n     *\n     * @param {Token} token\n     * @param {string} alias\n     * @returns {void}\n     */\n    function addAlias(token, alias) {\n      var aliases = token.alias\n      if (!aliases) {\n        token.alias = aliases = []\n      } else if (!Array.isArray(aliases)) {\n        token.alias = aliases = [aliases]\n      }\n      aliases.push(alias)\n    }\n    for (; currentIndex < validTokens.length; ) {\n      var startToken = validTokens[currentIndex++] // add special aliases for mutation tokens\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n        // any array of the names of all input variables (if any)\n        var inputVariables = []\n        if (\n          isTokenType(['definition-mutation', 'punctuation']) &&\n          getToken(1).content === '('\n        ) {\n          // definition\n          currentIndex += 2 // skip 'definition-mutation' and 'punctuation'\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/)\n          if (definitionEnd === -1) {\n            continue\n          } // find all input variables\n          for (; currentIndex < definitionEnd; currentIndex++) {\n            var t = getToken(0)\n            if (t.type === 'variable') {\n              addAlias(t, 'variable-input')\n              inputVariables.push(t.content)\n            }\n          }\n          currentIndex = definitionEnd + 1\n        }\n        if (\n          isTokenType(['punctuation', 'property-query']) &&\n          getToken(0).content === '{'\n        ) {\n          currentIndex++ // skip opening bracket\n          addAlias(getToken(0), 'property-mutation')\n          if (inputVariables.length > 0) {\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/)\n            if (mutationEnd === -1) {\n              continue\n            } // give references to input variables a special alias\n            for (var i = currentIndex; i < mutationEnd; i++) {\n              var varToken = validTokens[i]\n              if (\n                varToken.type === 'variable' &&\n                inputVariables.indexOf(varToken.content) >= 0\n              ) {\n                addAlias(varToken, 'variable-input')\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}