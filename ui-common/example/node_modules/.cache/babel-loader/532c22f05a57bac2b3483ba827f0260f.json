{"ast":null,"code":"'use strict';\n\nmodule.exports = visit;\n\nvar visitParents = require('unist-util-visit-parents');\n\nvar CONTINUE = visitParents.CONTINUE;\nvar SKIP = visitParents.SKIP;\nvar EXIT = visitParents.EXIT;\nvisit.CONTINUE = CONTINUE;\nvisit.SKIP = SKIP;\nvisit.EXIT = EXIT;\n\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  visitParents(tree, test, overload, reverse);\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1];\n    var index = parent ? parent.children.indexOf(node) : null;\n    return visitor(node, index, parent);\n  }\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/unist-util-visit/index.js"],"names":["module","exports","visit","visitParents","require","CONTINUE","SKIP","EXIT","tree","test","visitor","reverse","overload","node","parents","parent","length","index","children","indexOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,0BAAD,CAA1B;;AAEA,IAAIC,QAAQ,GAAGF,YAAY,CAACE,QAA5B;AACA,IAAIC,IAAI,GAAGH,YAAY,CAACG,IAAxB;AACA,IAAIC,IAAI,GAAGJ,YAAY,CAACI,IAAxB;AAEAL,KAAK,CAACG,QAAN,GAAiBA,QAAjB;AACAH,KAAK,CAACI,IAAN,GAAaA,IAAb;AACAJ,KAAK,CAACK,IAAN,GAAaA,IAAb;;AAEA,SAASL,KAAT,CAAeM,IAAf,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC3C,MAAI,OAAOF,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,OAAP,KAAmB,UAArD,EAAiE;AAC/DC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAEDN,EAAAA,YAAY,CAACK,IAAD,EAAOC,IAAP,EAAaG,QAAb,EAAuBD,OAAvB,CAAZ;;AAEA,WAASC,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AAC/B,QAAIC,MAAM,GAAGD,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAApB;AACA,QAAIC,KAAK,GAAGF,MAAM,GAAGA,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBN,IAAxB,CAAH,GAAmC,IAArD;AACA,WAAOH,OAAO,CAACG,IAAD,EAAOI,KAAP,EAAcF,MAAd,CAAd;AACD;AACF","sourcesContent":["'use strict'\n\nmodule.exports = visit\n\nvar visitParents = require('unist-util-visit-parents')\n\nvar CONTINUE = visitParents.CONTINUE\nvar SKIP = visitParents.SKIP\nvar EXIT = visitParents.EXIT\n\nvisit.CONTINUE = CONTINUE\nvisit.SKIP = SKIP\nvisit.EXIT = EXIT\n\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1]\n    var index = parent ? parent.children.indexOf(node) : null\n    return visitor(node, index, parent)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}