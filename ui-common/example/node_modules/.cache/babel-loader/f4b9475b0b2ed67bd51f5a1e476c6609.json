{"ast":null,"code":"'use strict';\n\nmodule.exports = lisp;\nlisp.displayName = 'lisp';\nlisp.aliases = [];\n\nfunction lisp(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function simple_form(name) {\n      return RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source);\n    }\n    /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n\n    function primitive(pattern) {\n      return RegExp(/([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source);\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n\n\n    var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source; // symbol starting with & used in function arguments\n\n    var marker = '&' + symbol; // Open parenthesis for look-behind\n\n    var par = '(\\\\()';\n    var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n\n    var space = '(?=\\\\s)';\n    var nestedPar = /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/.source;\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [{\n        pattern: RegExp(par + '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' + space),\n        lookbehind: true\n      }, {\n        pattern: RegExp(par + '(?:append|by|collect|concat|do|finally|for|in|return)' + space),\n        lookbehind: true\n      }],\n      declare: {\n        pattern: simple_form(/declare/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form(/interactive/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive(/nil|t/.source),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(par + /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source + symbol + /\\s+\\(/.source + nestedPar + /\\)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [// open paren, brackets, and close paren\n      /(?:['`,]?\\(|[)\\[\\]])/, // cons\n      {\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }]\n    };\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      varform: {\n        pattern: RegExp(/\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source),\n        inside: language\n      },\n      argument: {\n        pattern: RegExp(/(^|[\\s(])/.source + symbol),\n        lookbehind: true,\n        alias: 'variable'\n      },\n      rest: language\n    };\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n    var arglist = {\n      pattern: RegExp(par + nestedPar + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    };\n    language['lambda'].inside.arguments = arglist;\n    language['defun'].inside.arguments = Prism.util.clone(arglist);\n    language['defun'].inside.arguments.inside.sublist = arglist;\n    Prism.languages.lisp = language;\n    Prism.languages.elisp = language;\n    Prism.languages.emacs = language;\n    Prism.languages['emacs-lisp'] = language;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/lisp.js"],"names":["module","exports","lisp","displayName","aliases","Prism","simple_form","name","RegExp","source","primitive","pattern","symbol","marker","par","endpar","space","nestedPar","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","varform","rest","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function simple_form(name) {\n      return RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source)\n    }\n    /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function primitive(pattern) {\n      return RegExp(\n        /([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source\n      )\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var nestedPar =\n      /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/\n        .source\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:append|by|collect|concat|do|finally|for|in|return)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form(/declare/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form(/interactive/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive(/nil|t/.source),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source +\n            symbol +\n            /\\s+\\(/.source +\n            nestedPar +\n            /\\)/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(\n          par +\n            'lambda\\\\s+\\\\(\\\\s*(?:&?' +\n            symbol +\n            '(?:\\\\s+&?' +\n            symbol +\n            ')*\\\\s*)?\\\\)'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(?:['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      varform: {\n        pattern: RegExp(\n          /\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source\n        ),\n        inside: language\n      },\n      argument: {\n        pattern: RegExp(/(^|[\\s(])/.source + symbol),\n        lookbehind: true,\n        alias: 'variable'\n      },\n      rest: language\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + nestedPar + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}