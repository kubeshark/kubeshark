{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\nimport { toHtml } from 'hast-util-to-html';\n/** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */\n\nexport default function rehypeStringify(config) {\n  const processorSettings =\n  /** @type {Options} */\n  this.data('settings');\n  const settings = Object.assign({}, processorSettings, config);\n  Object.assign(this, {\n    Compiler: compiler\n  });\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n\n  function compiler(tree) {\n    return toHtml(tree, settings);\n  }\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/rehype-stringify/lib/index.js"],"names":["toHtml","rehypeStringify","config","processorSettings","data","settings","Object","assign","Compiler","compiler","tree"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,mBAArB;AAEA;;AACA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC9C,QAAMC,iBAAiB;AAAG;AAAwB,OAAKC,IAAL,CAAU,UAAV,CAAlD;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,iBAAlB,EAAqCD,MAArC,CAAjB;AAEAI,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;AAACC,IAAAA,QAAQ,EAAEC;AAAX,GAApB;AAEA;AACF;AACA;;AACE,WAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,WAAOV,MAAM,CAACU,IAAD,EAAOL,QAAP,CAAb;AACD;AACF","sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}