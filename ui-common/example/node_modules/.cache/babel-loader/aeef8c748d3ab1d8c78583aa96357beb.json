{"ast":null,"code":"'use strict';\n\nmodule.exports = coffeescript;\ncoffeescript.displayName = 'coffeescript';\ncoffeescript.aliases = ['coffee'];\n\nfunction coffeescript(Prism) {\n  ;\n\n  (function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/;\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    };\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [// Strings are multiline\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true\n      }, {\n        // Strings are multiline\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }],\n      keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [{\n        pattern: /'''[\\s\\S]*?'''/,\n        greedy: true,\n        alias: 'string'\n      }, {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: interpolation\n        }\n      }]\n    });\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    });\n    delete Prism.languages.coffeescript['template-string'];\n    Prism.languages.coffee = Prism.languages.coffeescript;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/coffeescript.js"],"names":["module","exports","coffeescript","displayName","aliases","Prism","comment","interpolation","pattern","alias","languages","extend","string","greedy","inside","keyword","insertBefore","delimiter","script","javascript","property","coffee"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = coffeescript\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\nfunction coffeescript(Prism) {\n  ;(function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword:\n        /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}