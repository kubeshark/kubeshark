{"ast":null,"code":"'use strict';\n\nmodule.exports = asciidoc;\nasciidoc.displayName = 'asciidoc';\nasciidoc.aliases = ['adoc'];\n\nfunction asciidoc(Prism) {\n  ;\n\n  (function (Prism) {\n    var attributes = {\n      pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    };\n    var asciidoc = Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern: /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [{\n        pattern: /(^[ \\t]*)<?\\d*>/m,\n        lookbehind: true,\n        alias: 'symbol'\n      }, {\n        pattern: /<\\d+>/,\n        alias: 'symbol'\n      }],\n      macro: {\n        pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\n        The initial look-behind prevents the highlighting of escaped quoted text.\n        Quoted text can be multi-line but cannot span an empty line.\n        All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n        First, we handle the constrained quotes.\n        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n        Then we handle the unconstrained quotes.\n        Those do not have the restrictions of the constrained quotes.\n        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n        */\n        pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ');\n      var o = {};\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]];\n      }\n\n      return o;\n    }\n\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.adoc = Prism.languages.asciidoc;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/asciidoc.js"],"names":["module","exports","asciidoc","displayName","aliases","Prism","attributes","pattern","lookbehind","inside","quoted","punctuation","interpreted","string","variable","operator","languages","alias","table","specifiers","comment","title","hr","admonition","callout","macro","function","inline","url","italic","bold","replacement","entity","copyFromAsciiDoc","keys","split","o","i","l","length","rest","hooks","add","env","type","content","value","replace","adoc"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,CAAC,MAAD,CAAnB;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;AACvB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,UAAU,GAAG;AACfC,MAAAA,OAAO,EACL,kGAFa;AAGfC,MAAAA,UAAU,EAAE,IAHG;AAIfC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE;AACNH,UAAAA,OAAO,EAAE,8BADH;AAENE,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE;AADP;AAFF,SADF;AAONC,QAAAA,WAAW,EAAE;AACXL,UAAAA,OAAO,EAAE,mBADE;AAEXE,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE,OADP,CACe;;AADf;AAFG,SAPP;AAaNE,QAAAA,MAAM,EAAE,mBAbF;AAcNC,QAAAA,QAAQ,EAAE,UAdJ;AAeNH,QAAAA,WAAW,EAAE,WAfP;AAgBNI,QAAAA,QAAQ,EAAE,GAhBJ;AAiBN;AACA,sBAAc;AAlBR;AAJO,KAAjB;AAyBA,QAAIb,QAAQ,GAAIG,KAAK,CAACW,SAAN,CAAgBd,QAAhB,GAA2B;AACzC,uBAAiB;AACfK,QAAAA,OAAO,EAAE,mDADM;AAEfU,QAAAA,KAAK,EAAE;AAFQ,OADwB;AAKzCC,MAAAA,KAAK,EAAE;AACLX,QAAAA,OAAO,EAAE,yDADJ;AAELE,QAAAA,MAAM,EAAE;AACNU,UAAAA,UAAU,EAAE;AACVZ,YAAAA,OAAO,EACL,gHAFQ;AAGVU,YAAAA,KAAK,EAAE;AAHG,WADN;AAMNN,UAAAA,WAAW,EAAE;AACXJ,YAAAA,OAAO,EAAE,iBADE;AAEXC,YAAAA,UAAU,EAAE;AAFD,WANP,CASJ;;AATI;AAFH,OALkC;AAmBzC,2BAAqB;AACnBD,QAAAA,OAAO,EAAE,oDADU;AAEnBE,QAAAA,MAAM,EAAE;AACNE,UAAAA,WAAW,EAAE,WADP,CACmB;;AADnB;AAFW,OAnBoB;AAyBzC;AACA,uBAAiB;AACfJ,QAAAA,OAAO,EAAE,0DADM;AAEfE,QAAAA,MAAM,EAAE;AACNE,UAAAA,WAAW,EAAE,yBADP,CACiC;;AADjC;AAFO,OA1BwB;AAgCzC;AACA,qBAAe;AACbJ,QAAAA,OAAO,EACL,mEAFW;AAGbE,QAAAA,MAAM,EAAE;AACNE,UAAAA,WAAW,EAAE,qCADP,CAC6C;;AAD7C;AAHK,OAjC0B;AAwCzC;AACA,0BAAoB;AAClBJ,QAAAA,OAAO,EACL,gEAFgB;AAGlBC,QAAAA,UAAU,EAAE,IAHM;AAIlBS,QAAAA,KAAK,EAAE;AAJW,OAzCqB;AA+CzC,oBAAc;AACZV,QAAAA,OAAO,EAAE,yCADG;AAEZC,QAAAA,UAAU,EAAE,IAFA;AAGZS,QAAAA,KAAK,EAAE;AAHK,OA/C2B;AAoDzC,wBAAkB;AAChBV,QAAAA,OAAO,EAAE,4DADO;AAEhBC,QAAAA,UAAU,EAAE;AAFI,OApDuB;AAwDzCY,MAAAA,OAAO,EAAE,UAxDgC;AAyDzCC,MAAAA,KAAK,EAAE;AACLd,QAAAA,OAAO,EACL,gFAFG;AAGLU,QAAAA,KAAK,EAAE,WAHF;AAILR,QAAAA,MAAM,EAAE;AACNE,UAAAA,WAAW,EAAE,kCADP,CAC0C;;AAD1C;AAJH,OAzDkC;AAiEzC,yBAAmB;AACjBJ,QAAAA,OAAO,EAAE,gDADQ;AAEjBU,QAAAA,KAAK,EAAE;AAFU,OAjEsB;AAqEzCX,MAAAA,UAAU,EAAEA,UArE6B;AAsEzCgB,MAAAA,EAAE,EAAE;AACFf,QAAAA,OAAO,EAAE,UADP;AAEFU,QAAAA,KAAK,EAAE;AAFL,OAtEqC;AA0EzC,oBAAc;AACZV,QAAAA,OAAO,EAAE,UADG;AAEZU,QAAAA,KAAK,EAAE;AAFK,OA1E2B;AA8EzCM,MAAAA,UAAU,EAAE;AACVhB,QAAAA,OAAO,EAAE,2CADC;AAEVU,QAAAA,KAAK,EAAE;AAFG,OA9E6B;AAkFzCO,MAAAA,OAAO,EAAE,CACP;AACEjB,QAAAA,OAAO,EAAE,kBADX;AAEEC,QAAAA,UAAU,EAAE,IAFd;AAGES,QAAAA,KAAK,EAAE;AAHT,OADO,EAMP;AACEV,QAAAA,OAAO,EAAE,OADX;AAEEU,QAAAA,KAAK,EAAE;AAFT,OANO,CAlFgC;AA6FzCQ,MAAAA,KAAK,EAAE;AACLlB,QAAAA,OAAO,EACL,wFAFG;AAGLE,QAAAA,MAAM,EAAE;AACNiB,UAAAA,QAAQ,EAAE,iBADJ;AAENf,UAAAA,WAAW,EAAE,MAFP;AAGNL,UAAAA,UAAU,EAAE;AACVC,YAAAA,OAAO,EAAE,yDADC;AAEVE,YAAAA,MAAM,EAAEH,UAAU,CAACG;AAFT;AAHN;AAHH,OA7FkC;AAyGzCkB,MAAAA,MAAM,EAAE;AACN;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQpB,QAAAA,OAAO,EACL,uiBAbI;AAcNC,QAAAA,UAAU,EAAE,IAdN;AAeNC,QAAAA,MAAM,EAAE;AACNH,UAAAA,UAAU,EAAEA,UADN;AAENsB,UAAAA,GAAG,EAAE;AACHrB,YAAAA,OAAO,EAAE,iCADN;AAEHE,YAAAA,MAAM,EAAE;AACNE,cAAAA,WAAW,EAAE;AADP;AAFL,WAFC;AAQN,2BAAiB;AACfJ,YAAAA,OAAO,EAAE,UADM;AAEfE,YAAAA,MAAM,EAAE;AACNK,cAAAA,QAAQ,EAAE;AACRP,gBAAAA,OAAO,EAAE,mBADD;AAERC,gBAAAA,UAAU,EAAE;AAFJ,eADJ;AAKNO,cAAAA,QAAQ,EAAE,sBALJ;AAMNJ,cAAAA,WAAW,EAAE;AANP;AAFO,WARX;AAmBNkB,UAAAA,MAAM,EAAE;AACNtB,YAAAA,OAAO,EAAE,mBADH;AAENE,YAAAA,MAAM,EAAE;AACNE,cAAAA,WAAW,EAAE;AADP;AAFF,WAnBF;AAyBNmB,UAAAA,IAAI,EAAE;AACJvB,YAAAA,OAAO,EAAE,eADL;AAEJE,YAAAA,MAAM,EAAE;AACNE,cAAAA,WAAW,EAAE;AADP;AAFJ,WAzBA;AA+BNA,UAAAA,WAAW,EACT;AAhCI;AAfF,OAzGiC;AA2JzCoB,MAAAA,WAAW,EAAE;AACXxB,QAAAA,OAAO,EAAE,gBADE;AAEXU,QAAAA,KAAK,EAAE;AAFI,OA3J4B;AA+JzCe,MAAAA,MAAM,EAAE,mBA/JiC;AAgKzC,2BAAqB;AACnBzB,QAAAA,OAAO,EAAE,WADU;AAEnBC,QAAAA,UAAU,EAAE,IAFO;AAGnBS,QAAAA,KAAK,EAAE;AAHY;AAhKoB,KAA3C,CA1BiB,CA+Ld;;AACH,aAASgB,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9BA,MAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,GAAX,CAAP;AACA,UAAIC,CAAC,GAAG,EAAR;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCF,CAAC,GAAGC,CAArC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CD,QAAAA,CAAC,CAACF,IAAI,CAACG,CAAD,CAAL,CAAD,GAAanC,QAAQ,CAACgC,IAAI,CAACG,CAAD,CAAL,CAArB;AACD;;AACD,aAAOD,CAAP;AACD;;AACD9B,IAAAA,UAAU,CAACG,MAAX,CAAkB,aAAlB,EAAiCA,MAAjC,CAAwC+B,IAAxC,GAA+CP,gBAAgB,CAC7D,iCAD6D,CAA/D;AAGA/B,IAAAA,QAAQ,CAAC,mBAAD,CAAR,CAA8BO,MAA9B,CAAqC+B,IAArC,GAA4CP,gBAAgB,CAAC,OAAD,CAA5D;AACA/B,IAAAA,QAAQ,CAAC,eAAD,CAAR,CAA0BO,MAA1B,CAAiC+B,IAAjC,GAAwCP,gBAAgB,CAAC,SAAD,CAAxD;AACA/B,IAAAA,QAAQ,CAAC,OAAD,CAAR,CAAkBO,MAAlB,CAAyB+B,IAAzB,GAAgCP,gBAAgB,CAC9C,kOAD8C,CAAhD;AAGA/B,IAAAA,QAAQ,CAAC,aAAD,CAAR,CAAwBO,MAAxB,CAA+B+B,IAA/B,GAAsCP,gBAAgB,CACpD,gKADoD,CAAtD;AAGA/B,IAAAA,QAAQ,CAAC,OAAD,CAAR,CAAkBO,MAAlB,CAAyB+B,IAAzB,GAAgCP,gBAAgB,CAC9C,iCAD8C,CAAhD,CAnNiB,CAqNf;;AACF5B,IAAAA,KAAK,CAACoC,KAAN,CAAYC,GAAZ,CAAgB,MAAhB,EAAwB,UAAUC,GAAV,EAAe;AACrC,UAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzBD,QAAAA,GAAG,CAACrC,UAAJ,CAAe,OAAf,IAA0BqC,GAAG,CAACE,OAAJ,CAAYC,KAAZ,CAAkBC,OAAlB,CAA0B,OAA1B,EAAmC,GAAnC,CAA1B;AACD;AACF,KAJD;AAKA1C,IAAAA,KAAK,CAACW,SAAN,CAAgBgC,IAAhB,GAAuB3C,KAAK,CAACW,SAAN,CAAgBd,QAAvC;AACD,GA5NA,EA4NEG,KA5NF;AA6NF","sourcesContent":["'use strict'\n\nmodule.exports = asciidoc\nasciidoc.displayName = 'asciidoc'\nasciidoc.aliases = ['adoc']\nfunction asciidoc(Prism) {\n  ;(function (Prism) {\n    var attributes = {\n      pattern:\n        /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    }\n    var asciidoc = (Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern:\n              /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern:\n          /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern:\n          /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern:\n          /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [\n        {\n          pattern: /(^[ \\t]*)<?\\d*>/m,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        {\n          pattern: /<\\d+>/,\n          alias: 'symbol'\n        }\n      ],\n      macro: {\n        pattern:\n          /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\nThe initial look-behind prevents the highlighting of escaped quoted text.\nQuoted text can be multi-line but cannot span an empty line.\nAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\nFirst, we handle the constrained quotes.\nThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\nThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\nThen we handle the unconstrained quotes.\nThose do not have the restrictions of the constrained quotes.\nThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n*/\n        pattern:\n          /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation:\n            /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }) // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ')\n      var o = {}\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]]\n      }\n      return o\n    }\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    )\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro')\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout')\n    asciidoc['table'].inside.rest = copyFromAsciiDoc(\n      'comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation'\n    )\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc(\n      'table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation'\n    )\n    asciidoc['title'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    ) // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n      }\n    })\n    Prism.languages.adoc = Prism.languages.asciidoc\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}