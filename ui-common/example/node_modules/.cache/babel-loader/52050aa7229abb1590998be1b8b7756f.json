{"ast":null,"code":"/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\nfunction python(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n  const RESERVED_WORDS = ['and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal|10', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'];\n  const BUILT_INS = ['__import__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'];\n  const LITERALS = ['__debug__', 'Ellipsis', 'False', 'None', 'NotImplemented', 'True']; // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n\n  const TYPES = [\"Any\", \"Callable\", \"Coroutine\", \"Dict\", \"List\", \"Literal\", \"Generic\", \"Optional\", \"Sequence\", \"Set\", \"Tuple\", \"Type\", \"Union\"];\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT],\n      relevance: 10\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n      end: /'''/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n      end: /\"\"\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, PROMPT, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([uU]|[rR])'/,\n      end: /'/,\n      relevance: 10\n    }, {\n      begin: /([uU]|[rR])\"/,\n      end: /\"/,\n      relevance: 10\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])'/,\n      end: /'/\n    }, {\n      begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n      end: /\"/\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])'/,\n      end: /'/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, {\n      begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n      end: /\"/,\n      contains: [hljs.BACKSLASH_ESCAPE, LITERAL_BRACKET, SUBST]\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]\n  }; // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`; // Whitespace after a number (or any lexical token) is needed only if its absence\n  // would change the tokenization\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n  // We deviate slightly, requiring a word boundary or a keyword\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// exponentfloat, pointfloat\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n    // optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    // Note: no leading \\b because floats can start with a decimal point\n    // and we don't want to mishandle e.g. `fn(.5)`,\n    // no trailing \\b for pointfloat because it can end with a decimal point\n    // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n    // because both MUST contain a decimal point and so cannot be confused with\n    // the interior part of an identifier\n    {\n      begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n    }, {\n      begin: `(${pointfloat})[jJ]?`\n    }, // decinteger, bininteger, octinteger, hexinteger\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n    // optionally \"long\" in Python 2\n    // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n    // decinteger is optionally imaginary\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n    }, {\n      begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n    }, {\n      begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n    }, {\n      begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n    }, // imagnumber (digitpart-based)\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n    {\n      begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n    }]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: regex.lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [{\n      // prevent keywords from coloring `type`\n      begin: /# type:/\n    }, // comment within a datatype comment includes no keywords\n    {\n      begin: /#/,\n      end: /\\b\\B/,\n      endsWithParent: true\n    }]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [// Exclude params in functions without params\n    {\n      className: \"\",\n      begin: /\\(\\s*\\)/,\n      skip: true\n    }, {\n      begin: /\\(/,\n      end: /\\)/,\n      excludeBegin: true,\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: ['self', PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE]\n    }]\n  };\n  SUBST.contains = [STRING, NUMBER, PROMPT];\n  return {\n    name: 'Python',\n    aliases: ['py', 'gyp', 'ipython'],\n    unicodeRegex: true,\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [PROMPT, NUMBER, {\n      // very common convention\n      begin: /\\bself\\b/\n    }, {\n      // eat \"if\" prior to string so that it won't accidentally be\n      // labeled as an f-string\n      beginKeywords: \"if\",\n      relevance: 0\n    }, STRING, COMMENT_TYPE, hljs.HASH_COMMENT_MODE, {\n      match: [/\\bdef/, /\\s+/, IDENT_RE],\n      scope: {\n        1: \"keyword\",\n        3: \"title.function\"\n      },\n      contains: [PARAMS]\n    }, {\n      variants: [{\n        match: [/\\bclass/, /\\s+/, IDENT_RE, /\\s*/, /\\(\\s*/, IDENT_RE, /\\s*\\)/]\n      }, {\n        match: [/\\bclass/, /\\s+/, IDENT_RE]\n      }],\n      scope: {\n        1: \"keyword\",\n        3: \"title.class\",\n        6: \"title.class.inherited\"\n      }\n    }, {\n      className: 'meta',\n      begin: /^[\\t ]*@/,\n      end: /(?=#)|$/,\n      contains: [NUMBER, PARAMS, STRING]\n    }]\n  };\n}\n\nmodule.exports = python;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/highlight.js/lib/languages/python.js"],"names":["python","hljs","regex","IDENT_RE","RESERVED_WORDS","BUILT_INS","LITERALS","TYPES","KEYWORDS","$pattern","keyword","built_in","literal","type","PROMPT","className","begin","SUBST","end","keywords","illegal","LITERAL_BRACKET","relevance","STRING","contains","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","digitpart","pointfloat","lookahead","join","NUMBER","COMMENT_TYPE","endsWithParent","PARAMS","skip","excludeBegin","excludeEnd","HASH_COMMENT_MODE","name","aliases","unicodeRegex","beginKeywords","match","scope","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n  const RESERVED_WORDS = [\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'is',\n    'lambda',\n    'nonlocal|10',\n    'not',\n    'or',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'with',\n    'yield'\n  ];\n\n  const BUILT_INS = [\n    '__import__',\n    'abs',\n    'all',\n    'any',\n    'ascii',\n    'bin',\n    'bool',\n    'breakpoint',\n    'bytearray',\n    'bytes',\n    'callable',\n    'chr',\n    'classmethod',\n    'compile',\n    'complex',\n    'delattr',\n    'dict',\n    'dir',\n    'divmod',\n    'enumerate',\n    'eval',\n    'exec',\n    'filter',\n    'float',\n    'format',\n    'frozenset',\n    'getattr',\n    'globals',\n    'hasattr',\n    'hash',\n    'help',\n    'hex',\n    'id',\n    'input',\n    'int',\n    'isinstance',\n    'issubclass',\n    'iter',\n    'len',\n    'list',\n    'locals',\n    'map',\n    'max',\n    'memoryview',\n    'min',\n    'next',\n    'object',\n    'oct',\n    'open',\n    'ord',\n    'pow',\n    'print',\n    'property',\n    'range',\n    'repr',\n    'reversed',\n    'round',\n    'set',\n    'setattr',\n    'slice',\n    'sorted',\n    'staticmethod',\n    'str',\n    'sum',\n    'super',\n    'tuple',\n    'type',\n    'vars',\n    'zip'\n  ];\n\n  const LITERALS = [\n    '__debug__',\n    'Ellipsis',\n    'False',\n    'None',\n    'NotImplemented',\n    'True'\n  ];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\n    \"Any\",\n    \"Callable\",\n    \"Coroutine\",\n    \"Dict\",\n    \"List\",\n    \"Literal\",\n    \"Generic\",\n    \"Optional\",\n    \"Sequence\",\n    \"Set\",\n    \"Tuple\",\n    \"Type\",\n    \"Union\"\n  ];\n\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([uU]|[rR])'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[rR])\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\n        end: /'/\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n        end: /\"/\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\n        end: /'/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  // Whitespace after a number (or any lexical token) is needed only if its absence\n  // would change the tokenization\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n  // We deviate slightly, requiring a word boundary or a keyword\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // exponentfloat, pointfloat\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n      // optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      // Note: no leading \\b because floats can start with a decimal point\n      // and we don't want to mishandle e.g. `fn(.5)`,\n      // no trailing \\b for pointfloat because it can end with a decimal point\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n      // because both MUST contain a decimal point and so cannot be confused with\n      // the interior part of an identifier\n      {\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n      },\n      {\n        begin: `(${pointfloat})[jJ]?`\n      },\n\n      // decinteger, bininteger, octinteger, hexinteger\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n      // optionally \"long\" in Python 2\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n      // decinteger is optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n      },\n\n      // imagnumber (digitpart-based)\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n      }\n    ]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: regex.lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [\n      { // prevent keywords from coloring `type`\n        begin: /# type:/\n      },\n      // comment within a datatype comment includes no keywords\n      {\n        begin: /#/,\n        end: /\\b\\B/,\n        endsWithParent: true\n      }\n    ]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n      // Exclude params in functions without params\n      {\n        className: \"\",\n        begin: /\\(\\s*\\)/,\n        skip: true\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          PROMPT,\n          NUMBER,\n          STRING,\n          hljs.HASH_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n  SUBST.contains = [\n    STRING,\n    NUMBER,\n    PROMPT\n  ];\n\n  return {\n    name: 'Python',\n    aliases: [\n      'py',\n      'gyp',\n      'ipython'\n    ],\n    unicodeRegex: true,\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      {\n        // very common convention\n        begin: /\\bself\\b/\n      },\n      {\n        // eat \"if\" prior to string so that it won't accidentally be\n        // labeled as an f-string\n        beginKeywords: \"if\",\n        relevance: 0\n      },\n      STRING,\n      COMMENT_TYPE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        match: [\n          /\\bdef/, /\\s+/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.function\"\n        },\n        contains: [ PARAMS ]\n      },\n      {\n        variants: [\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE, /\\s*/,\n              /\\(\\s*/, IDENT_RE,/\\s*\\)/\n            ],\n          },\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE\n            ],\n          }\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          6: \"title.class.inherited\",\n        }\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/,\n        end: /(?=#)|$/,\n        contains: [\n          NUMBER,\n          PARAMS,\n          STRING\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = python;\n"]},"metadata":{},"sourceType":"script"}