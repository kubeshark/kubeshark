{"ast":null,"code":"'use strict';\n\nvar Cancel = require('./Cancel');\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\n\n\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n  var token = this; // eslint-disable-next-line func-names\n\n  this.promise.then(function (cancel) {\n    if (!token._listeners) return;\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n\n    token._listeners = null;\n  }); // eslint-disable-next-line func-names\n\n  this.promise.then = function (onfulfilled) {\n    var _resolve; // eslint-disable-next-line func-names\n\n\n    var promise = new Promise(function (resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\n\n\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n/**\n * Subscribe to the cancel signal\n */\n\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n/**\n * Unsubscribe from the cancel signal\n */\n\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n\n  var index = this._listeners.indexOf(listener);\n\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\n\n\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/axios/lib/cancel/CancelToken.js"],"names":["Cancel","require","CancelToken","executor","TypeError","resolvePromise","promise","Promise","promiseExecutor","resolve","token","then","cancel","_listeners","i","l","length","onfulfilled","_resolve","subscribe","reject","unsubscribe","message","reason","prototype","throwIfRequested","listener","push","index","indexOf","splice","source","c","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n"]},"metadata":{},"sourceType":"script"}