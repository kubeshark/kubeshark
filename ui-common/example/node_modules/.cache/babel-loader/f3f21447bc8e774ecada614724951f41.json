{"ast":null,"code":"'use strict';\n\nmodule.exports = promql;\npromql.displayName = 'promql';\npromql.aliases = [];\n\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;\n\n  (function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n    var offsetModifier = ['offset'];\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [{\n        pattern: /\\[[\\w\\s:]+\\]/,\n        // [1m]\n        inside: {\n          punctuation: /\\[|\\]|:/,\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }, {\n        pattern: /(\\boffset\\s+)\\w+/,\n        // offset 1m\n        lookbehind: true,\n        inside: {\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/promql.js"],"names":["module","exports","promql","displayName","aliases","Prism","aggregations","vectorMatching","offsetModifier","keywords","concat","languages","comment","pattern","lookbehind","RegExp","join","inside","alias","punctuation","greedy","keyword","function","number","operator"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrB;AACA;AACA;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB;AACA;AACA,QAAIC,YAAY,GAAG,CACjB,KADiB,EAEjB,KAFiB,EAGjB,KAHiB,EAIjB,KAJiB,EAKjB,OALiB,EAMjB,QANiB,EAOjB,QAPiB,EAQjB,OARiB,EASjB,cATiB,EAUjB,SAViB,EAWjB,MAXiB,EAYjB,UAZiB,CAAnB,CAHiB,CAgBf;AACF;;AACA,QAAIC,cAAc,GAAG,CACnB,IADmB,EAEnB,UAFmB,EAGnB,aAHmB,EAInB,YAJmB,EAKnB,IALmB,EAMnB,SANmB,CAArB,CAlBiB,CAyBf;AACF;;AACA,QAAIC,cAAc,GAAG,CAAC,QAAD,CAArB;AACA,QAAIC,QAAQ,GAAGH,YAAY,CAACI,MAAb,CAAoBH,cAApB,EAAoCC,cAApC,CAAf;AACAH,IAAAA,KAAK,CAACM,SAAN,CAAgBT,MAAhB,GAAyB;AACvBU,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,eADF;AAEPC,QAAAA,UAAU,EAAE;AAFL,OADc;AAKvB,sBAAgB;AACd;AACAD,QAAAA,OAAO,EAAE,IAAIE,MAAJ,CACP,SAASR,cAAc,CAACS,IAAf,CAAoB,GAApB,CAAT,GAAoC,mBAD7B,CAFK;AAKdF,QAAAA,UAAU,EAAE,IALE;AAMdG,QAAAA,MAAM,EAAE;AACN,uBAAa;AACXJ,YAAAA,OAAO,EAAE,WADE;AAEXK,YAAAA,KAAK,EAAE;AAFI,WADP;AAKNC,UAAAA,WAAW,EAAE;AALP;AANM,OALO;AAmBvB,wBAAkB;AAChBN,QAAAA,OAAO,EAAE,YADO;AAEhBI,QAAAA,MAAM,EAAE;AACN,uBAAa;AACXJ,YAAAA,OAAO,EAAE,+BADE;AAEXK,YAAAA,KAAK,EAAE;AAFI,WADP;AAKN,yBAAe;AACbL,YAAAA,OAAO,EAAE,oCADI;AAEbO,YAAAA,MAAM,EAAE,IAFK;AAGbF,YAAAA,KAAK,EAAE;AAHM,WALT;AAUNC,UAAAA,WAAW,EAAE;AAVP;AAFQ,OAnBK;AAkCvB,uBAAiB,CACf;AACEN,QAAAA,OAAO,EAAE,cADX;AAEE;AACAI,QAAAA,MAAM,EAAE;AACNE,UAAAA,WAAW,EAAE,SADP;AAEN,4BAAkB;AAChBN,YAAAA,OAAO,EAAE,8BADO;AAEhBK,YAAAA,KAAK,EAAE;AAFS;AAFZ;AAHV,OADe,EAYf;AACEL,QAAAA,OAAO,EAAE,kBADX;AAEE;AACAC,QAAAA,UAAU,EAAE,IAHd;AAIEG,QAAAA,MAAM,EAAE;AACN,4BAAkB;AAChBJ,YAAAA,OAAO,EAAE,8BADO;AAEhBK,YAAAA,KAAK,EAAE;AAFS;AADZ;AAJV,OAZe,CAlCM;AA0DvBG,MAAAA,OAAO,EAAE,IAAIN,MAAJ,CAAW,WAAWN,QAAQ,CAACO,IAAT,CAAc,GAAd,CAAX,GAAgC,MAA3C,EAAmD,GAAnD,CA1Dc;AA2DvBM,MAAAA,QAAQ,EAAE,uBA3Da;AA4DvBC,MAAAA,MAAM,EACJ,mFA7DqB;AA8DvBC,MAAAA,QAAQ,EAAE,kDA9Da;AA+DvBL,MAAAA,WAAW,EAAE;AA/DU,KAAzB;AAiED,GA9FA,EA8FEd,KA9FF;AA+FF","sourcesContent":["'use strict'\n\nmodule.exports = promql\npromql.displayName = 'promql'\npromql.aliases = []\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;(function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = [\n      'sum',\n      'min',\n      'max',\n      'avg',\n      'group',\n      'stddev',\n      'stdvar',\n      'count',\n      'count_values',\n      'bottomk',\n      'topk',\n      'quantile'\n    ] // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n    var vectorMatching = [\n      'on',\n      'ignoring',\n      'group_right',\n      'group_left',\n      'by',\n      'without'\n    ] // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n    var offsetModifier = ['offset']\n    var keywords = aggregations.concat(vectorMatching, offsetModifier)\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp(\n          '((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [\n        {\n          pattern: /\\[[\\w\\s:]+\\]/,\n          // [1m]\n          inside: {\n            punctuation: /\\[|\\]|:/,\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        },\n        {\n          pattern: /(\\boffset\\s+)\\w+/,\n          // offset 1m\n          lookbehind: true,\n          inside: {\n            'range-duration': {\n              pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n              alias: 'number'\n            }\n          }\n        }\n      ],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number:\n        /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}