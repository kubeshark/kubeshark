{"ast":null,"code":"/// <reference lib=\"dom\" />\nimport { isUrl } from './minurl.shared.js'; // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\n\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file');\n    error.code = 'ERR_INVALID_URL_SCHEME';\n    throw error;\n  }\n\n  return getPathFromURLPosix(path);\n}\n/**\n * @param {URL} url\n */\n\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n\n  const pathname = url.pathname;\n  let index = -1;\n\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37\n    /* `%` */\n    && pathname.charCodeAt(index + 1) === 50\n    /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2);\n\n      if (third === 70\n      /* `F` */\n      || third === 102\n      /* `f` */\n      ) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError('File URL path must not include encoded / characters');\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw error;\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname);\n}\n\nexport { isUrl } from './minurl.shared.js';","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/vfile/lib/minurl.browser.js"],"names":["isUrl","urlToPath","path","URL","error","TypeError","code","protocol","getPathFromURLPosix","url","hostname","pathname","index","length","charCodeAt","third","decodeURIComponent"],"mappings":"AAAA;AAEA,SAAQA,KAAR,QAAoB,oBAApB,C,CAEA;;AAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG,IAAIC,GAAJ,CAAQD,IAAR,CAAP;AACD,GAFD,MAEO,IAAI,CAACF,KAAK,CAACE,IAAD,CAAV,EAAkB;AACvB;AACA,UAAME,KAAK,GAAG,IAAIC,SAAJ,CACZ,iFACEH,IADF,GAEE,GAHU,CAAd;AAKAE,IAAAA,KAAK,CAACE,IAAN,GAAa,sBAAb;AACA,UAAMF,KAAN;AACD;;AAED,MAAIF,IAAI,CAACK,QAAL,KAAkB,OAAtB,EAA+B;AAC7B;AACA,UAAMH,KAAK,GAAG,IAAIC,SAAJ,CAAc,gCAAd,CAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,GAAa,wBAAb;AACA,UAAMF,KAAN;AACD;;AAED,SAAOI,mBAAmB,CAACN,IAAD,CAA1B;AACD;AAED;AACA;AACA;;AACA,SAASM,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,MAAIA,GAAG,CAACC,QAAJ,KAAiB,EAArB,EAAyB;AACvB;AACA,UAAMN,KAAK,GAAG,IAAIC,SAAJ,CACZ,sDADY,CAAd;AAGAD,IAAAA,KAAK,CAACE,IAAN,GAAa,2BAAb;AACA,UAAMF,KAAN;AACD;;AAED,QAAMO,QAAQ,GAAGF,GAAG,CAACE,QAArB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUD,QAAQ,CAACE,MAA1B,EAAkC;AAChC,QACEF,QAAQ,CAACG,UAAT,CAAoBF,KAApB,MAA+B;AAAG;AAAlC,OACAD,QAAQ,CAACG,UAAT,CAAoBF,KAAK,GAAG,CAA5B,MAAmC;AAAG;AAFxC,MAGE;AACA,YAAMG,KAAK,GAAGJ,QAAQ,CAACG,UAAT,CAAoBF,KAAK,GAAG,CAA5B,CAAd;;AACA,UAAIG,KAAK,KAAK;AAAG;AAAb,SAA0BA,KAAK,KAAK;AAAI;AAA5C,QAAuD;AACrD;AACA,cAAMX,KAAK,GAAG,IAAIC,SAAJ,CACZ,qDADY,CAAd;AAGAD,QAAAA,KAAK,CAACE,IAAN,GAAa,2BAAb;AACA,cAAMF,KAAN;AACD;AACF;AACF;;AAED,SAAOY,kBAAkB,CAACL,QAAD,CAAzB;AACD;;AAED,SAAQX,KAAR,QAAoB,oBAApB","sourcesContent":["/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n"]},"metadata":{},"sourceType":"module"}