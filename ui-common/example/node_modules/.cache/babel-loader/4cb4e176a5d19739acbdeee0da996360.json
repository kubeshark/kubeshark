{"ast":null,"code":"'use strict';\n\nconst Preprocessor = require('./preprocessor');\n\nconst unicode = require('../common/unicode');\n\nconst neTree = require('./named-entity-data');\n\nconst ERR = require('../common/error-codes'); //Aliases\n\n\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES; //C1 Unicode control character reference replacements\n\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n  0x80: 0x20ac,\n  0x82: 0x201a,\n  0x83: 0x0192,\n  0x84: 0x201e,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02c6,\n  0x89: 0x2030,\n  0x8a: 0x0160,\n  0x8b: 0x2039,\n  0x8c: 0x0152,\n  0x8e: 0x017d,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201c,\n  0x94: 0x201d,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02dc,\n  0x99: 0x2122,\n  0x9a: 0x0161,\n  0x9b: 0x203a,\n  0x9c: 0x0153,\n  0x9e: 0x017e,\n  0x9f: 0x0178\n}; // Named entity tree flags\n\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG; //States\n\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE'; //Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\n\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n  return cp + 0x0020;\n} //NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\n\n\nfunction toChar(cp) {\n  if (cp <= 0xffff) {\n    return String.fromCharCode(cp);\n  }\n\n  cp -= 0x10000;\n  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);\n}\n\nfunction toAsciiLowerChar(cp) {\n  return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n  const branchCount = neTree[++nodeIx];\n  let lo = ++nodeIx;\n  let hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    const mid = lo + hi >>> 1;\n    const midCp = neTree[mid];\n\n    if (midCp < cp) {\n      lo = mid + 1;\n    } else if (midCp > cp) {\n      hi = mid - 1;\n    } else {\n      return neTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n} //Tokenizer\n\n\nclass Tokenizer {\n  constructor() {\n    this.preprocessor = new Preprocessor();\n    this.tokenQueue = [];\n    this.allowCDATA = false;\n    this.state = DATA_STATE;\n    this.returnState = '';\n    this.charRefCode = -1;\n    this.tempBuff = [];\n    this.lastStartTagName = '';\n    this.consumedAfterSnapshot = -1;\n    this.active = false;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = null;\n  } //Errors\n\n\n  _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n\n  _errOnNextCodePoint(err) {\n    this._consume();\n\n    this._err(err);\n\n    this._unconsume();\n  } //API\n\n\n  getNextToken() {\n    while (!this.tokenQueue.length && this.active) {\n      this.consumedAfterSnapshot = 0;\n\n      const cp = this._consume();\n\n      if (!this._ensureHibernation()) {\n        this[this.state](cp);\n      }\n    }\n\n    return this.tokenQueue.shift();\n  }\n\n  write(chunk, isLastChunk) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n  } //Hibernation\n\n\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n        this.preprocessor.retreat();\n      }\n\n      this.active = false;\n      this.tokenQueue.push({\n        type: Tokenizer.HIBERNATION_TOKEN\n      });\n      return true;\n    }\n\n    return false;\n  } //Consumption\n\n\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n\n  _unconsume() {\n    this.consumedAfterSnapshot--;\n    this.preprocessor.retreat();\n  }\n\n  _reconsumeInState(state) {\n    this.state = state;\n\n    this._unconsume();\n  }\n\n  _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n    let consumedCount = 0;\n    let isMatch = true;\n    const patternLength = pattern.length;\n    let patternPos = 0;\n    let cp = startCp;\n    let patternCp = void 0;\n\n    for (; patternPos < patternLength; patternPos++) {\n      if (patternPos > 0) {\n        cp = this._consume();\n        consumedCount++;\n      }\n\n      if (cp === $.EOF) {\n        isMatch = false;\n        break;\n      }\n\n      patternCp = pattern[patternPos];\n\n      if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n        isMatch = false;\n        break;\n      }\n    }\n\n    if (!isMatch) {\n      while (consumedCount--) {\n        this._unconsume();\n      }\n    }\n\n    return isMatch;\n  } //Temp buffer\n\n\n  _isTempBufferEqualToScriptString() {\n    if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.tempBuff.length; i++) {\n      if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  } //Token creation\n\n\n  _createStartTagToken() {\n    this.currentToken = {\n      type: Tokenizer.START_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: []\n    };\n  }\n\n  _createEndTagToken() {\n    this.currentToken = {\n      type: Tokenizer.END_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      attrs: []\n    };\n  }\n\n  _createCommentToken() {\n    this.currentToken = {\n      type: Tokenizer.COMMENT_TOKEN,\n      data: ''\n    };\n  }\n\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: Tokenizer.DOCTYPE_TOKEN,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null\n    };\n  }\n\n  _createCharacterToken(type, ch) {\n    this.currentCharacterToken = {\n      type: type,\n      chars: ch\n    };\n  }\n\n  _createEOFToken() {\n    this.currentToken = {\n      type: Tokenizer.EOF_TOKEN\n    };\n  } //Tag attributes\n\n\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n  }\n\n  _leaveAttrName(toState) {\n    if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n      this.currentToken.attrs.push(this.currentAttr);\n    } else {\n      this._err(ERR.duplicateAttribute);\n    }\n\n    this.state = toState;\n  }\n\n  _leaveAttrValue(toState) {\n    this.state = toState;\n  } //Token emission\n\n\n  _emitCurrentToken() {\n    this._emitCurrentCharacterToken();\n\n    const ct = this.currentToken;\n    this.currentToken = null; //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n\n    if (ct.type === Tokenizer.START_TAG_TOKEN) {\n      this.lastStartTagName = ct.tagName;\n    } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n      if (ct.attrs.length > 0) {\n        this._err(ERR.endTagWithAttributes);\n      }\n\n      if (ct.selfClosing) {\n        this._err(ERR.endTagWithTrailingSolidus);\n      }\n    }\n\n    this.tokenQueue.push(ct);\n  }\n\n  _emitCurrentCharacterToken() {\n    if (this.currentCharacterToken) {\n      this.tokenQueue.push(this.currentCharacterToken);\n      this.currentCharacterToken = null;\n    }\n  }\n\n  _emitEOFToken() {\n    this._createEOFToken();\n\n    this._emitCurrentToken();\n  } //Characters emission\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n\n\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n      this._emitCurrentCharacterToken();\n    }\n\n    if (this.currentCharacterToken) {\n      this.currentCharacterToken.chars += ch;\n    } else {\n      this._createCharacterToken(type, ch);\n    }\n  }\n\n  _emitCodePoint(cp) {\n    let type = Tokenizer.CHARACTER_TOKEN;\n\n    if (isWhitespace(cp)) {\n      type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n    } else if (cp === $.NULL) {\n      type = Tokenizer.NULL_CHARACTER_TOKEN;\n    }\n\n    this._appendCharToCurrentCharacterToken(type, toChar(cp));\n  }\n\n  _emitSeveralCodePoints(codePoints) {\n    for (let i = 0; i < codePoints.length; i++) {\n      this._emitCodePoint(codePoints[i]);\n    }\n  } //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n  //So we can avoid additional checks here.\n\n\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n  } // Character reference helpers\n\n\n  _matchNamedCharacterReference(startCp) {\n    let result = null;\n    let excess = 1;\n    let i = findNamedEntityTreeBranch(0, startCp);\n    this.tempBuff.push(startCp);\n\n    while (i > -1) {\n      const current = neTree[i];\n      const inNode = current < MAX_BRANCH_MARKER_VALUE;\n      const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n      if (nodeWithData) {\n        //NOTE: we use greedy search, so we continue lookup at this point\n        result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n        excess = 0;\n      }\n\n      const cp = this._consume();\n\n      this.tempBuff.push(cp);\n      excess++;\n\n      if (cp === $.EOF) {\n        break;\n      }\n\n      if (inNode) {\n        i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n      } else {\n        i = cp === current ? ++i : -1;\n      }\n    }\n\n    while (excess--) {\n      this.tempBuff.pop();\n\n      this._unconsume();\n    }\n\n    return result;\n  }\n\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;\n  }\n\n  _isCharacterReferenceAttributeQuirk(withSemicolon) {\n    if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n      const nextCp = this._consume();\n\n      this._unconsume();\n\n      return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n    }\n\n    return false;\n  }\n\n  _flushCodePointsConsumedAsCharacterReference() {\n    if (this._isCharacterReferenceInAttribute()) {\n      for (let i = 0; i < this.tempBuff.length; i++) {\n        this.currentAttr.value += toChar(this.tempBuff[i]);\n      }\n    } else {\n      this._emitSeveralCodePoints(this.tempBuff);\n    }\n\n    this.tempBuff = [];\n  } // State machine\n  // Data state\n  //------------------------------------------------------------------\n\n\n  [DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = TAG_OPEN_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = DATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitCodePoint(cp);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } //  RCDATA state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.AMPERSAND) {\n      this.returnState = RCDATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = RCDATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // RAWTEXT state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // PLAINTEXT state\n  //------------------------------------------------------------------\n\n\n  [PLAINTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Tag open state\n  //------------------------------------------------------------------\n\n\n  [TAG_OPEN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.state = MARKUP_DECLARATION_OPEN_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.QUESTION_MARK) {\n      this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n\n      this._emitChars('<');\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n\n      this._emitChars('<');\n\n      this._reconsumeInState(DATA_STATE);\n    }\n  } // End tag open state\n  //------------------------------------------------------------------\n\n\n  [END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingEndTagName);\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n\n      this._emitChars('</');\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  } // Tag name state\n  //------------------------------------------------------------------\n\n\n  [TAG_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.tagName += toChar(cp);\n    }\n  } // RCDATA less-than sign state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RCDATA_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RCDATA end tag open state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RCDATA end tag name state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this.state = DATA_STATE;\n\n          this._emitCurrentToken();\n\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RAWTEXT_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // Script data less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n\n      this._emitChars('<!');\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data end tag open state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data end tag name state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        } else if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escape start state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escape start dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escaped state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this.tempBuff = [];\n\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data escaped end tag open state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data escaped end tag name state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data double escape start state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data double escaped state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n\n      this._emitChars('/');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  } // Script data double escape end state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  } // Before attribute name state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.EQUALS_SIGN) {\n      this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n\n      this._createAttr('=');\n\n      this.state = ATTRIBUTE_NAME_STATE;\n    } else {\n      this._createAttr('');\n\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  } // Attribute name state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n\n      this._unconsume();\n    } else if (cp === $.EQUALS_SIGN) {\n      this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n    } else if (isAsciiUpper(cp)) {\n      this.currentAttr.name += toAsciiLowerChar(cp);\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n      this._err(ERR.unexpectedCharacterInAttributeName);\n\n      this.currentAttr.name += toChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentAttr.name += toChar(cp);\n    }\n  } // After attribute name state\n  //------------------------------------------------------------------\n\n\n  [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.EQUALS_SIGN) {\n      this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._createAttr('');\n\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  } // Before attribute value state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingAttributeValue);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n    }\n  } // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n\n      this._emitCurrentToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {\n      this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n\n      this.currentAttr.value += toChar(cp);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // After attribute value (quoted) state\n  //------------------------------------------------------------------\n\n\n  [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.SOLIDUS) {\n      this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBetweenAttributes);\n\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  } // Self-closing start tag state\n  //------------------------------------------------------------------\n\n\n  [SELF_CLOSING_START_TAG_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.currentToken.selfClosing = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedSolidusInTag);\n\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  } // Bogus comment state\n  //------------------------------------------------------------------\n\n\n  [BOGUS_COMMENT_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  } // Markup declaration open state\n  //------------------------------------------------------------------\n\n\n  [MARKUP_DECLARATION_OPEN_STATE](cp) {\n    if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n      this._createCommentToken();\n\n      this.state = COMMENT_START_STATE;\n    } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n      this.state = DOCTYPE_STATE;\n    } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n      if (this.allowCDATA) {\n        this.state = CDATA_SECTION_STATE;\n      } else {\n        this._err(ERR.cdataInHtmlContent);\n\n        this._createCommentToken();\n\n        this.currentToken.data = '[CDATA[';\n        this.state = BOGUS_COMMENT_STATE;\n      }\n    } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.incorrectlyOpenedComment);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  } // Comment start state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_START_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment start dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '<';\n      this.state = COMMENT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  } // Comment less-than sign state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.currentToken.data += '!';\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '!';\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment less-than sign bang state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_END_DASH_STATE);\n    }\n  } // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n    if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n      this._err(ERR.nestedComment);\n    }\n\n    this._reconsumeInState(COMMENT_END_STATE);\n  } // Comment end dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment end state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = COMMENT_END_BANG_STATE;\n    } else if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '-';\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment end bang state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '--!';\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.incorrectlyClosedComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--!';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBeforeDoctypeName);\n\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    }\n  } // Before DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(toAsciiLowerChar(cp));\n\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeName);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._createDoctypeToken(toChar(cp));\n\n      this.state = DOCTYPE_NAME_STATE;\n    }\n  } // DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = AFTER_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.name += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.name += toChar(cp);\n    }\n  } // After DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n    } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n    } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  } // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  } // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n\n\n  [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  } // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  } // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  [BOGUS_DOCTYPE_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    }\n  } // CDATA section state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_BRACKET_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInCdata);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // CDATA section bracket state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_BRACKET_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_END_STATE;\n    } else {\n      this._emitChars(']');\n\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  } // CDATA section end state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n    } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this._emitChars(']');\n    } else {\n      this._emitChars(']]');\n\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  } // Character reference state\n  //------------------------------------------------------------------\n\n\n  [CHARACTER_REFERENCE_STATE](cp) {\n    this.tempBuff = [$.AMPERSAND];\n\n    if (cp === $.NUMBER_SIGN) {\n      this.tempBuff.push(cp);\n      this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Named character reference state\n  //------------------------------------------------------------------\n\n\n  [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n    const matchResult = this._matchNamedCharacterReference(cp); //NOTE: matching can be abrupted by hibernation. In that case match\n    //results are no longer valid and we will need to start over.\n\n\n    if (this._ensureHibernation()) {\n      this.tempBuff = [$.AMPERSAND];\n    } else if (matchResult) {\n      const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n      if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n        if (!withSemicolon) {\n          this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n        }\n\n        this.tempBuff = matchResult;\n      }\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this.state = AMBIGUOUS_AMPERSAND_STATE;\n    }\n  } // Ambiguos ampersand state\n  //------------------------------------------------------------------\n\n\n  [AMBIGUOUS_AMPERSAND_STATE](cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      if (this._isCharacterReferenceInAttribute()) {\n        this.currentAttr.value += toChar(cp);\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } else {\n      if (cp === $.SEMICOLON) {\n        this._err(ERR.unknownNamedCharacterReference);\n      }\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Numeric character reference state\n  //------------------------------------------------------------------\n\n\n  [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n    this.charRefCode = 0;\n\n    if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n      this.tempBuff.push(cp);\n      this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n    } else {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n    }\n  } // Hexademical character reference start state\n  //------------------------------------------------------------------\n\n\n  [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiHexDigit(cp)) {\n      this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Decimal character reference start state\n  //------------------------------------------------------------------\n\n\n  [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Hexademical character reference state\n  //------------------------------------------------------------------\n\n\n  [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  } // Decimal character reference state\n  //------------------------------------------------------------------\n\n\n  [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  } // Numeric character reference end state\n  //------------------------------------------------------------------\n\n\n  [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n    if (this.charRefCode === $.NULL) {\n      this._err(ERR.nullCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 0x10ffff) {\n      this._err(ERR.characterReferenceOutsideUnicodeRange);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isSurrogate(this.charRefCode)) {\n      this._err(ERR.surrogateCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n      this._err(ERR.noncharacterCharacterReference);\n    } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n      this._err(ERR.controlCharacterReference);\n\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n      if (replacement) {\n        this.charRefCode = replacement;\n      }\n    }\n\n    this.tempBuff = [this.charRefCode];\n\n    this._flushCodePointsConsumedAsCharacterReference();\n\n    this._reconsumeInState(this.returnState);\n  }\n\n} //Token types\n\n\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN'; //Tokenizer initial states for different modes\n\nTokenizer.MODE = {\n  DATA: DATA_STATE,\n  RCDATA: RCDATA_STATE,\n  RAWTEXT: RAWTEXT_STATE,\n  SCRIPT_DATA: SCRIPT_DATA_STATE,\n  PLAINTEXT: PLAINTEXT_STATE\n}; //Static\n\nTokenizer.getTokenAttr = function (token, attrName) {\n  for (let i = token.attrs.length - 1; i >= 0; i--) {\n    if (token.attrs[i].name === attrName) {\n      return token.attrs[i].value;\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = Tokenizer;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/parse5/lib/tokenizer/index.js"],"names":["Preprocessor","require","unicode","neTree","ERR","$","CODE_POINTS","$$","CODE_POINT_SEQUENCES","C1_CONTROLS_REFERENCE_REPLACEMENTS","HAS_DATA_FLAG","DATA_DUPLET_FLAG","HAS_BRANCHES_FLAG","MAX_BRANCH_MARKER_VALUE","DATA_STATE","RCDATA_STATE","RAWTEXT_STATE","SCRIPT_DATA_STATE","PLAINTEXT_STATE","TAG_OPEN_STATE","END_TAG_OPEN_STATE","TAG_NAME_STATE","RCDATA_LESS_THAN_SIGN_STATE","RCDATA_END_TAG_OPEN_STATE","RCDATA_END_TAG_NAME_STATE","RAWTEXT_LESS_THAN_SIGN_STATE","RAWTEXT_END_TAG_OPEN_STATE","RAWTEXT_END_TAG_NAME_STATE","SCRIPT_DATA_LESS_THAN_SIGN_STATE","SCRIPT_DATA_END_TAG_OPEN_STATE","SCRIPT_DATA_END_TAG_NAME_STATE","SCRIPT_DATA_ESCAPE_START_STATE","SCRIPT_DATA_ESCAPE_START_DASH_STATE","SCRIPT_DATA_ESCAPED_STATE","SCRIPT_DATA_ESCAPED_DASH_STATE","SCRIPT_DATA_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE","BEFORE_ATTRIBUTE_NAME_STATE","ATTRIBUTE_NAME_STATE","AFTER_ATTRIBUTE_NAME_STATE","BEFORE_ATTRIBUTE_VALUE_STATE","ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE","ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE","ATTRIBUTE_VALUE_UNQUOTED_STATE","AFTER_ATTRIBUTE_VALUE_QUOTED_STATE","SELF_CLOSING_START_TAG_STATE","BOGUS_COMMENT_STATE","MARKUP_DECLARATION_OPEN_STATE","COMMENT_START_STATE","COMMENT_START_DASH_STATE","COMMENT_STATE","COMMENT_LESS_THAN_SIGN_STATE","COMMENT_LESS_THAN_SIGN_BANG_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE","COMMENT_END_DASH_STATE","COMMENT_END_STATE","COMMENT_END_BANG_STATE","DOCTYPE_STATE","BEFORE_DOCTYPE_NAME_STATE","DOCTYPE_NAME_STATE","AFTER_DOCTYPE_NAME_STATE","AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE","AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE","BOGUS_DOCTYPE_STATE","CDATA_SECTION_STATE","CDATA_SECTION_BRACKET_STATE","CDATA_SECTION_END_STATE","CHARACTER_REFERENCE_STATE","NAMED_CHARACTER_REFERENCE_STATE","AMBIGUOUS_AMPERSAND_STATE","NUMERIC_CHARACTER_REFERENCE_STATE","HEXADEMICAL_CHARACTER_REFERENCE_START_STATE","DECIMAL_CHARACTER_REFERENCE_START_STATE","HEXADEMICAL_CHARACTER_REFERENCE_STATE","DECIMAL_CHARACTER_REFERENCE_STATE","NUMERIC_CHARACTER_REFERENCE_END_STATE","isWhitespace","cp","SPACE","LINE_FEED","TABULATION","FORM_FEED","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLowerCodePoint","toChar","String","fromCharCode","toAsciiLowerChar","findNamedEntityTreeBranch","nodeIx","branchCount","lo","hi","mid","midCp","Tokenizer","constructor","preprocessor","tokenQueue","allowCDATA","state","returnState","charRefCode","tempBuff","lastStartTagName","consumedAfterSnapshot","active","currentCharacterToken","currentToken","currentAttr","_err","_errOnNextCodePoint","err","_consume","_unconsume","getNextToken","length","_ensureHibernation","shift","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","push","type","HIBERNATION_TOKEN","advance","_reconsumeInState","_consumeSequenceIfMatch","pattern","startCp","caseSensitive","consumedCount","isMatch","patternLength","patternPos","patternCp","EOF","_isTempBufferEqualToScriptString","SCRIPT_STRING","i","_createStartTagToken","START_TAG_TOKEN","tagName","selfClosing","ackSelfClosing","attrs","_createEndTagToken","END_TAG_TOKEN","_createCommentToken","COMMENT_TOKEN","data","_createDoctypeToken","initialName","DOCTYPE_TOKEN","name","forceQuirks","publicId","systemId","_createCharacterToken","ch","chars","_createEOFToken","EOF_TOKEN","_createAttr","attrNameFirstCh","value","_leaveAttrName","toState","getTokenAttr","duplicateAttribute","_leaveAttrValue","_emitCurrentToken","_emitCurrentCharacterToken","ct","endTagWithAttributes","endTagWithTrailingSolidus","_emitEOFToken","_appendCharToCurrentCharacterToken","_emitCodePoint","CHARACTER_TOKEN","WHITESPACE_CHARACTER_TOKEN","NULL","NULL_CHARACTER_TOKEN","_emitSeveralCodePoints","codePoints","_emitChars","_matchNamedCharacterReference","result","excess","current","inNode","nodeWithData","pop","_isCharacterReferenceInAttribute","_isCharacterReferenceAttributeQuirk","withSemicolon","nextCp","EQUALS_SIGN","_flushCodePointsConsumedAsCharacterReference","dropParsedChunk","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","SOLIDUS","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","GREATER_THAN_SIGN","missingEndTagName","eofInTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","PUBLIC_STRING","SYSTEM_STRING","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","SEMICOLON","missingSemicolonAfterCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","MODE","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","token","attrName","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n"]},"metadata":{},"sourceType":"script"}