{"ast":null,"code":"'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/c.js"],"names":["module","exports","c","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","string","lookbehind","keyword","function","number","operator","insertBefore","char","macro","alias","inside","directive","punctuation","expression","constant"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACAA,CAAC,CAACC,WAAF,GAAgB,GAAhB;AACAD,CAAC,CAACE,OAAF,GAAY,EAAZ;;AACA,SAASF,CAAT,CAAWG,KAAX,EAAkB;AAChBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,GAAoBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAClDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EACL,qEAFK;AAGPC,MAAAA,MAAM,EAAE;AAHD,KADyC;AAMlDC,IAAAA,MAAM,EAAE;AACN;AACAF,MAAAA,OAAO,EAAE,qCAFH;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAN0C;AAWlD,kBAAc;AACZD,MAAAA,OAAO,EACL,kFAFU;AAGZG,MAAAA,UAAU,EAAE;AAHA,KAXoC;AAgBlDC,IAAAA,OAAO,EACL,mVAjBgD;AAkBlDC,IAAAA,QAAQ,EAAE,uBAlBwC;AAmBlDC,IAAAA,MAAM,EACJ,mHApBgD;AAqBlDC,IAAAA,QAAQ,EAAE;AArBwC,GAAhC,CAApB;AAuBAX,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,GAA7B,EAAkC,QAAlC,EAA4C;AAC1CC,IAAAA,IAAI,EAAE;AACJ;AACAT,MAAAA,OAAO,EAAE,0CAFL;AAGJC,MAAAA,MAAM,EAAE;AAHJ;AADoC,GAA5C;AAOAL,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,GAA7B,EAAkC,QAAlC,EAA4C;AAC1CE,IAAAA,KAAK,EAAE;AACL;AACA;AACAV,MAAAA,OAAO,EACL,2FAJG;AAKLG,MAAAA,UAAU,EAAE,IALP;AAMLF,MAAAA,MAAM,EAAE,IANH;AAOLU,MAAAA,KAAK,EAAE,UAPF;AAQLC,MAAAA,MAAM,EAAE;AACNV,QAAAA,MAAM,EAAE,CACN;AACE;AACAF,UAAAA,OAAO,EAAE,0BAFX;AAGEG,UAAAA,UAAU,EAAE;AAHd,SADM,EAMNP,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,QAAlB,CANM,CADF;AASNgB,QAAAA,IAAI,EAAEb,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,MAAlB,CATA;AAUNM,QAAAA,OAAO,EAAEH,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,SAAlB,CAVH;AAWN,sBAAc,CACZ;AACEO,UAAAA,OAAO,EAAE,8BADX;AAEEG,UAAAA,UAAU,EAAE;AAFd,SADY,EAKZ;AACEH,UAAAA,OAAO,EAAE,8BADX;AAEEG,UAAAA,UAAU,EAAE,IAFd;AAGEQ,UAAAA,KAAK,EAAE;AAHT,SALY,CAXR;AAsBN;AACAE,QAAAA,SAAS,EAAE;AACTb,UAAAA,OAAO,EAAE,eADA;AAETG,UAAAA,UAAU,EAAE,IAFH;AAGTQ,UAAAA,KAAK,EAAE;AAHE,SAvBL;AA4BN,0BAAkB,IA5BZ;AA6BNG,QAAAA,WAAW,EAAE,iBA7BP;AA8BNC,QAAAA,UAAU,EAAE;AACVf,UAAAA,OAAO,EAAE,WADC;AAEVY,UAAAA,MAAM,EAAEhB,KAAK,CAACC,SAAN,CAAgBJ;AAFd;AA9BN;AARH;AADmC,GAA5C;AA8CAG,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,GAA7B,EAAkC,UAAlC,EAA8C;AAC5C;AACAQ,IAAAA,QAAQ,EACN;AAH0C,GAA9C;AAKA,SAAOpB,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,SAAlB,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern:\n        /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number:\n      /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern:\n        /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [\n          {\n            // highlight the path of the include statement as a string\n            pattern: /^(#\\s*include\\s*)<[^>]+>/,\n            lookbehind: true\n          },\n          Prism.languages.c['string']\n        ],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n            lookbehind: true\n          },\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n            lookbehind: true,\n            alias: 'function'\n          }\n        ],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant:\n      /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n"]},"metadata":{},"sourceType":"script"}