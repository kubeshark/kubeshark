{"ast":null,"code":"import { characterEntitiesLegacy } from 'character-entities-legacy';\nimport { characterEntitiesHtml4 } from 'character-entities-html4';\nimport { dangerous } from '../constant/dangerous.js';\nconst own = {}.hasOwnProperty;\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Object.<string, string>}\n */\n\nconst characters = {};\n/** @type {string} */\n\nlet key;\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key;\n  }\n}\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\n\n\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code);\n\n  if (own.call(characters, character)) {\n    const name = characters[character];\n    const value = '&' + name;\n\n    if (omit && characterEntitiesLegacy.includes(name) && !dangerous.includes(name) && (!attribute || next && next !== 61\n    /* `=` */\n    && /[^\\da-z]/i.test(String.fromCharCode(next)))) {\n      return value;\n    }\n\n    return value + ';';\n  }\n\n  return '';\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/stringify-entities/lib/util/to-named.js"],"names":["characterEntitiesLegacy","characterEntitiesHtml4","dangerous","own","hasOwnProperty","characters","key","call","toNamed","code","next","omit","attribute","character","String","fromCharCode","name","value","includes","test"],"mappings":"AAAA,SAAQA,uBAAR,QAAsC,2BAAtC;AACA,SAAQC,sBAAR,QAAqC,0BAArC;AACA,SAAQC,SAAR,QAAwB,0BAAxB;AAEA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEA;;AACA,IAAIC,GAAJ;;AAEA,KAAKA,GAAL,IAAYL,sBAAZ,EAAoC;AAClC,MAAIE,GAAG,CAACI,IAAJ,CAASN,sBAAT,EAAiCK,GAAjC,CAAJ,EAA2C;AACzCD,IAAAA,UAAU,CAACJ,sBAAsB,CAACK,GAAD,CAAvB,CAAV,GAA0CA,GAA1C;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,SAAnC,EAA8C;AACnD,QAAMC,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoBN,IAApB,CAAlB;;AAEA,MAAIN,GAAG,CAACI,IAAJ,CAASF,UAAT,EAAqBQ,SAArB,CAAJ,EAAqC;AACnC,UAAMG,IAAI,GAAGX,UAAU,CAACQ,SAAD,CAAvB;AACA,UAAMI,KAAK,GAAG,MAAMD,IAApB;;AAEA,QACEL,IAAI,IACJX,uBAAuB,CAACkB,QAAxB,CAAiCF,IAAjC,CADA,IAEA,CAACd,SAAS,CAACgB,QAAV,CAAmBF,IAAnB,CAFD,KAGC,CAACJ,SAAD,IACEF,IAAI,IACHA,IAAI,KAAK;AAAG;AADb,OAEC,YAAYS,IAAZ,CAAiBL,MAAM,CAACC,YAAP,CAAoBL,IAApB,CAAjB,CANJ,CADF,EAQE;AACA,aAAOO,KAAP;AACD;;AAED,WAAOA,KAAK,GAAG,GAAf;AACD;;AAED,SAAO,EAAP;AACD","sourcesContent":["import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Object.<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n"]},"metadata":{},"sourceType":"module"}