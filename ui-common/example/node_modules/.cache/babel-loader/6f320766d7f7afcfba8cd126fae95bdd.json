{"ast":null,"code":"'use strict';\n\nmodule.exports = kotlin;\nkotlin.displayName = 'kotlin';\nkotlin.aliases = ['kt', 'kts'];\n\nfunction kotlin(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [{\n        pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n        greedy: true\n      }, {\n        pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n        lookbehind: true,\n        greedy: true\n      }],\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin['class-name'];\n    var interpolationInside = {\n      'interpolation-punctuation': {\n        pattern: /^\\$\\{?|\\}$/,\n        alias: 'punctuation'\n      },\n      expression: {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.kotlin\n      }\n    };\n    Prism.languages.insertBefore('kotlin', 'string', {\n      // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions\n      'string-literal': [{\n        pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n        alias: 'multiline',\n        inside: {\n          interpolation: {\n            pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n            inside: interpolationInside\n          },\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n        alias: 'singleline',\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n            lookbehind: true,\n            inside: interpolationInside\n          },\n          string: /[\\s\\S]+/\n        }\n      }],\n      char: {\n        // https://kotlinlang.org/spec/expressions.html#character-literals\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n        greedy: true\n      }\n    });\n    delete Prism.languages.kotlin['string'];\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\b\\w+@|@\\w+\\b/,\n        alias: 'symbol'\n      }\n    });\n    Prism.languages.kt = Prism.languages.kotlin;\n    Prism.languages.kts = Prism.languages.kotlin;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/kotlin.js"],"names":["module","exports","kotlin","displayName","aliases","Prism","languages","extend","keyword","pattern","lookbehind","function","greedy","number","operator","interpolationInside","alias","expression","inside","insertBefore","interpolation","string","char","annotation","label","kt","kts"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = kotlin\nkotlin.displayName = 'kotlin'\nkotlin.aliases = ['kt', 'kts']\nfunction kotlin(Prism) {\n  ;(function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern:\n          /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [\n        {\n          pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n          greedy: true\n        },\n        {\n          pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      number:\n        /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator:\n        /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    })\n    delete Prism.languages.kotlin['class-name']\n    var interpolationInside = {\n      'interpolation-punctuation': {\n        pattern: /^\\$\\{?|\\}$/,\n        alias: 'punctuation'\n      },\n      expression: {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.kotlin\n      }\n    }\n    Prism.languages.insertBefore('kotlin', 'string', {\n      // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions\n      'string-literal': [\n        {\n          pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n          alias: 'multiline',\n          inside: {\n            interpolation: {\n              pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n              inside: interpolationInside\n            },\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n          alias: 'singleline',\n          inside: {\n            interpolation: {\n              pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n              lookbehind: true,\n              inside: interpolationInside\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      char: {\n        // https://kotlinlang.org/spec/expressions.html#character-literals\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n        greedy: true\n      }\n    })\n    delete Prism.languages.kotlin['string']\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    })\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\b\\w+@|@\\w+\\b/,\n        alias: 'symbol'\n      }\n    })\n    Prism.languages.kt = Prism.languages.kotlin\n    Prism.languages.kts = Prism.languages.kotlin\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}