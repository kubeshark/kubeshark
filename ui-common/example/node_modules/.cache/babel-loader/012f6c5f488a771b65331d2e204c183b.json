{"ast":null,"code":"var _jsxFileName = \"/Users/leon/lib-test/liraz-test/example/src/App.tsx\",\n    _s = $RefreshSig$();\n\n/*eslint no-eq-null: \"error\"*/\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport TrafficViewer from 'liraz-test';\nimport \"liraz-test/dist/index.css\";\nimport { useRef, useState } from 'react';\nimport Api, { MizuWebsocketURL, getToken } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api = Api.getInstance();\nvar WebSocketReadyState;\n\n(function (WebSocketReadyState) {\n  WebSocketReadyState[WebSocketReadyState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n  WebSocketReadyState[WebSocketReadyState[\"OPEN\"] = 1] = \"OPEN\";\n  WebSocketReadyState[WebSocketReadyState[\"CLOSING\"] = 2] = \"CLOSING\";\n  WebSocketReadyState[WebSocketReadyState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(WebSocketReadyState || (WebSocketReadyState = {}));\n\nconst App = () => {\n  _s();\n\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [isOpen, setisOpen] = useState(false);\n  const ws = useRef(null);\n\n  const onMessage = e => {\n    setMessage(e);\n  };\n\n  const onError = e => setError(e);\n\n  const onOpen = () => {\n    setisOpen(true);\n  };\n\n  const onClose = () => setisOpen(false);\n\n  const openScoket = function () {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let websocketUrl = MizuWebsocketURL;\n\n    if (getToken()) {\n      websocketUrl += `/${getToken()}`;\n    }\n\n    ws.current = new WebSocket(websocketUrl);\n    ws.current.addEventListener(\"message\", onMessage);\n    ws.current.addEventListener(\"error\", onError);\n    ws.current.addEventListener(\"open\", onOpen);\n    ws.current.addEventListener(\"close\", onClose);\n  };\n\n  const closeWs = () => {\n    ws.current.readyState === WebSocketReadyState.OPEN && ws.current.close();\n    ws.current.removeEventListener(\"message\", onMessage);\n    ws.current.removeEventListener(\"error\", onError);\n    ws.current.removeEventListener(\"open\", onOpen);\n    ws.current.removeEventListener(\"close\", onClose);\n  };\n\n  const sendQuery = query => {\n    if (ws.current && ws.current.readyState === WebSocketReadyState.OPEN) {\n      ws.current.send(query);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TrafficViewer, {\n      message: {},\n      isOpen: false,\n      closeWs: closeWs,\n      sendQuery: sendQuery,\n      openSocket: openScoket,\n      trafficViewerApiProp: api\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"ntyXkez9/bAT47ejjuEWobAF1fo=\");\n\n_c = App;\nexport default App; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/example/src/App.tsx"],"names":["TrafficViewer","useRef","useState","Api","MizuWebsocketURL","getToken","api","getInstance","WebSocketReadyState","App","message","setMessage","error","setError","isOpen","setisOpen","ws","onMessage","e","onError","onOpen","onClose","openScoket","query","websocketUrl","current","WebSocket","addEventListener","closeWs","readyState","OPEN","close","removeEventListener","sendQuery","send"],"mappings":"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","sourcesContent":["/*eslint no-eq-null: \"error\"*/\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport TrafficViewer from 'liraz-test';\nimport \"liraz-test/dist/index.css\"\nimport {  useRef, useState } from 'react';\n\nimport Api, {MizuWebsocketURL,getToken} from \"./api\";\n\nconst api = Api.getInstance()\nenum WebSocketReadyState{\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED\n}\n\n\nconst App = () => {\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [isOpen, setisOpen] = useState(false);\n  const ws = useRef(null);\n\n  const onMessage = (e:any) => {setMessage(e)}\n  const onError = (e:any) => setError(e)\n  const onOpen = () => {setisOpen(true)}\n  const onClose = () => setisOpen(false)\n\n  const openScoket = (query = \"\") => {\n    let websocketUrl = MizuWebsocketURL;\n    if (getToken()) {\n      websocketUrl += `/${getToken()}`;\n    }\n    ws.current = new WebSocket(websocketUrl)\n    ws.current.addEventListener(\"message\",onMessage)\n    ws.current.addEventListener(\"error\",onError)\n    ws.current.addEventListener(\"open\",onOpen)\n    ws.current.addEventListener(\"close\",onClose)\n  }\n\n  const closeWs = () => {\n      ws.current.readyState === WebSocketReadyState.OPEN && ws.current.close();\n      ws.current.removeEventListener(\"message\",onMessage)\n      ws.current.removeEventListener(\"error\",onError)\n      ws.current.removeEventListener(\"open\",onOpen)\n      ws.current.removeEventListener(\"close\",onClose)\n  }\n  \n  \n  const sendQuery = (query : any) =>{\n      if(ws.current && (ws.current.readyState === WebSocketReadyState.OPEN)){\n          ws.current.send(query)\n      }\n  }\n\n  return <>\n\n    <TrafficViewer message={{}} isOpen={false} closeWs={closeWs} sendQuery={sendQuery} openSocket={openScoket} trafficViewerApiProp={api} ></TrafficViewer>\n  </>\n}\n\nexport default App\n// eslint-disable-line @typescript-eslint/no-unused-vars"]},"metadata":{},"sourceType":"module"}