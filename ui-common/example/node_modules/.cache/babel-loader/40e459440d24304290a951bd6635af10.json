{"ast":null,"code":"'use strict';\n\nmodule.exports = elixir;\nelixir.displayName = 'elixir';\nelixir.aliases = [];\n\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [{\n      // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n      pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      // Multi-line strings are allowed\n      pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n      // We don't want to match <<\n      pattern: /([^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /([^>])>(?!>)/,\n      lookbehind: true\n    }],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  };\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/elixir.js"],"names":["module","exports","elixir","displayName","aliases","Prism","languages","doc","pattern","inside","attribute","string","comment","greedy","regex","atom","lookbehind","alias","argument","function","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,EACL,4FAFC;AAGHC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE,OADL;AAENC,QAAAA,MAAM,EAAE;AAFF;AAHL,KADkB;AASvBC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,OAAO,EAAE,KADF;AAEPK,MAAAA,MAAM,EAAE;AAFD,KATc;AAavB;AACAC,IAAAA,KAAK,EAAE;AACLN,MAAAA,OAAO,EACL,4LAFG;AAGLK,MAAAA,MAAM,EAAE;AAHH,KAdgB;AAmBvBF,IAAAA,MAAM,EAAE,CACN;AACE;AACAH,MAAAA,OAAO,EACL,gNAHJ;AAIEK,MAAAA,MAAM,EAAE,IAJV;AAKEJ,MAAAA,MAAM,EAAE,CACN;AADM;AALV,KADM,EAUN;AACED,MAAAA,OAAO,EAAE,qBADX;AAEEK,MAAAA,MAAM,EAAE,IAFV;AAGEJ,MAAAA,MAAM,EAAE,CACN;AADM;AAHV,KAVM,EAiBN;AACE;AACAD,MAAAA,OAAO,EAAE,+CAFX;AAGEK,MAAAA,MAAM,EAAE,IAHV;AAIEJ,MAAAA,MAAM,EAAE,CACN;AADM;AAJV,KAjBM,CAnBe;AA6CvBM,IAAAA,IAAI,EAAE;AACJ;AACAP,MAAAA,OAAO,EAAE,cAFL;AAGJQ,MAAAA,UAAU,EAAE,IAHR;AAIJC,MAAAA,KAAK,EAAE;AAJH,KA7CiB;AAmDvBjB,IAAAA,MAAM,EAAE;AACNQ,MAAAA,OAAO,EAAE,cADH;AAENS,MAAAA,KAAK,EAAE;AAFD,KAnDe;AAuDvB;AACA,iBAAa,gBAxDU;AAyDvBC,IAAAA,QAAQ,EAAE;AACR;AACAV,MAAAA,OAAO,EAAE,cAFD;AAGRQ,MAAAA,UAAU,EAAE,IAHJ;AAIRC,MAAAA,KAAK,EAAE;AAJC,KAzDa;AA+DvBP,IAAAA,SAAS,EAAE;AACTF,MAAAA,OAAO,EAAE,MADA;AAETS,MAAAA,KAAK,EAAE;AAFE,KA/DY;AAmEvBE,IAAAA,QAAQ,EAAE,qDAnEa;AAoEvBC,IAAAA,MAAM,EAAE,iEApEe;AAqEvBC,IAAAA,OAAO,EACL,iNAtEqB;AAuEvBC,IAAAA,OAAO,EAAE,wBAvEc;AAwEvBC,IAAAA,QAAQ,EAAE,CACR,0FADQ,EAER;AACE;AACAf,MAAAA,OAAO,EAAE,cAFX;AAGEQ,MAAAA,UAAU,EAAE;AAHd,KAFQ,EAOR;AACE;AACAR,MAAAA,OAAO,EAAE,cAFX;AAGEQ,MAAAA,UAAU,EAAE;AAHd,KAPQ,CAxEa;AAqFvBQ,IAAAA,WAAW,EAAE;AArFU,GAAzB;AAuFAnB,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBS,MAAvB,CAA8Bc,OAA9B,CAAsC,UAAUC,CAAV,EAAa;AACjDA,IAAAA,CAAC,CAACjB,MAAF,GAAW;AACTkB,MAAAA,aAAa,EAAE;AACbnB,QAAAA,OAAO,EAAE,YADI;AAEbC,QAAAA,MAAM,EAAE;AACNmB,UAAAA,SAAS,EAAE;AACTpB,YAAAA,OAAO,EAAE,UADA;AAETS,YAAAA,KAAK,EAAE;AAFE,WADL;AAKNY,UAAAA,IAAI,EAAExB,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFK;AADN,KAAX;AAYD,GAbD;AAcD","sourcesContent":["'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}