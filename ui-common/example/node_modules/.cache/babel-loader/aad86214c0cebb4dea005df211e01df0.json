{"ast":null,"code":"'use strict';\n\nmodule.exports = batch;\nbatch.displayName = 'batch';\nbatch.aliases = [];\n\nfunction batch(Prism) {\n  ;\n\n  (function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/;\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    };\n    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/;\n    var number = /(?:\\b|-)\\d+\\b/;\n    Prism.languages.batch = {\n      comment: [/^::.*/m, {\n        pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true\n      }],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [{\n        // FOR command\n        pattern: /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:do|in)\\b|^for\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          punctuation: /[()',]/\n        }\n      }, {\n        // IF command\n        pattern: /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n        lookbehind: true,\n        inside: {\n          keyword: /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n        }\n      }, {\n        // ELSE command\n        pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^else\\b/i\n        }\n      }, {\n        // SET command\n        pattern: /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^set\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n          number: number,\n          operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n          punctuation: /[()',]/\n        }\n      }, {\n        // Other commands\n        pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\w+\\b/,\n          string: string,\n          parameter: parameter,\n          label: {\n            pattern: /(^\\s*):\\S+/m,\n            lookbehind: true,\n            alias: 'property'\n          },\n          variable: variable,\n          number: number,\n          operator: /\\^/\n        }\n      }],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/batch.js"],"names":["module","exports","batch","displayName","aliases","Prism","variable","parameter","pattern","alias","inside","punctuation","string","number","languages","comment","lookbehind","label","command","keyword","operator"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern:\n            /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:do|in)\\b|^for\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern:\n            /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n          lookbehind: true,\n          inside: {\n            keyword:\n              /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern:\n            /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern:\n            /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}