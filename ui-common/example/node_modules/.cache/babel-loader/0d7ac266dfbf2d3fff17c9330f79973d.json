{"ast":null,"code":"'use strict';\n\nmodule.exports = mermaid;\nmermaid.displayName = 'mermaid';\nmermaid.aliases = [];\n\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern: /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [// This might look complex but it really isn't.\n    // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n    // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n    // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n    // arrows into different patterns.\n    {\n      // ER diagram\n      pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // flow chart\n      // (?:==+|--+|-\\.*-)\n      pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // sequence diagram\n      pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n      lookbehind: true,\n      alias: 'operator'\n    }, {\n      // class diagram\n      pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n      lookbehind: true,\n      alias: 'operator'\n    }],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [// This language has both case-sensitive and case-insensitive keywords\n    {\n      pattern: /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n      lookbehind: true,\n      greedy: true\n    }],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/mermaid.js"],"names":["module","exports","mermaid","displayName","aliases","Prism","languages","comment","pattern","greedy","style","lookbehind","inside","property","operator","punctuation","arrow","alias","label","text","string","annotation","keyword","entity"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = mermaid\nmermaid.displayName = 'mermaid'\nmermaid.aliases = []\nfunction mermaid(Prism) {\n  Prism.languages.mermaid = {\n    comment: {\n      pattern: /%%.*/,\n      greedy: true\n    },\n    style: {\n      pattern:\n        /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n      lookbehind: true,\n      inside: {\n        property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n        operator: /:/,\n        punctuation: /,/\n      }\n    },\n    'inter-arrow-label': {\n      pattern:\n        /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        arrow: {\n          pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n          alias: 'operator'\n        },\n        label: {\n          pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n          lookbehind: true,\n          alias: 'property'\n        },\n        'arrow-head': {\n          pattern: /^\\S+/,\n          alias: ['arrow', 'operator']\n        }\n      }\n    },\n    arrow: [\n      // This might look complex but it really isn't.\n      // There are many possible arrows (see tests) and it's impossible to fit all of them into one pattern. The\n      // problem is that we only have one lookbehind per pattern. However, we cannot disallow too many arrow\n      // characters in the one lookbehind because that would create too many false negatives. So we have to split the\n      // arrows into different patterns.\n      {\n        // ER diagram\n        pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // flow chart\n        // (?:==+|--+|-\\.*-)\n        pattern:\n          /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // sequence diagram\n        pattern:\n          /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      {\n        // class diagram\n        pattern:\n          /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    ],\n    label: {\n      pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    text: {\n      pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"/,\n      greedy: true\n    },\n    annotation: {\n      pattern:\n        /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n      alias: 'important'\n    },\n    keyword: [\n      // This language has both case-sensitive and case-insensitive keywords\n      {\n        pattern:\n          /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern:\n          /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n      pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n      lookbehind: true\n    },\n    punctuation: /[(){};]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}