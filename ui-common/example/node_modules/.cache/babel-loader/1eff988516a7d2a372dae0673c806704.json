{"ast":null,"code":"'use strict';\n\nmodule.exports = jsx;\njsx.displayName = 'jsx';\njsx.aliases = [];\n\nfunction jsx(Prism) {\n  ;\n\n  (function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript);\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n\n    function re(source, flags) {\n      source = source.replace(/<S>/g, function () {\n        return space;\n      }).replace(/<BRACES>/g, function () {\n        return braces;\n      }).replace(/<SPREAD>/g, function () {\n        return spread;\n      });\n      return RegExp(source, flags);\n    }\n\n    spread = re(spread).source;\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n    Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n    Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n    Prism.languages.insertBefore('inside', 'attr-name', {\n      spread: {\n        pattern: re(/<SPREAD>/.source),\n        inside: Prism.languages.jsx\n      }\n    }, Prism.languages.jsx.tag);\n    Prism.languages.insertBefore('inside', 'special-attr', {\n      script: {\n        // Allow for two levels of nesting\n        pattern: re(/=<BRACES>/.source),\n        alias: 'language-javascript',\n        inside: {\n          'script-punctuation': {\n            pattern: /^=(?=\\{)/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.jsx\n        }\n      }\n    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n    var stringifyToken = function (token) {\n      if (!token) {\n        return '';\n      }\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      if (typeof token.content === 'string') {\n        return token.content;\n      }\n\n      return token.content.map(stringifyToken).join('');\n    };\n\n    var walkTokens = function (tokens) {\n      var openedTags = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var notTagNorBrace = false;\n\n        if (typeof token !== 'string') {\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                // Pop matching opening tag\n                openedTags.pop();\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                });\n              }\n            }\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++;\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--;\n          } else {\n            notTagNorBrace = true;\n          }\n        }\n\n        if (notTagNorBrace || typeof token === 'string') {\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token); // And merge text with adjacent text\n\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n              plainText += stringifyToken(tokens[i + 1]);\n              tokens.splice(i + 1, 1);\n            }\n\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText;\n              tokens.splice(i - 1, 1);\n              i--;\n            }\n\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content);\n        }\n      }\n    };\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return;\n      }\n\n      walkTokens(env.tokens);\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/jsx.js"],"names":["module","exports","jsx","displayName","aliases","Prism","javascript","util","clone","languages","space","source","braces","spread","re","flags","replace","RegExp","extend","tag","pattern","inside","insertBefore","script","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<S>/g, function () {\n          return space\n        })\n        .replace(/<BRACES>/g, function () {\n          return braces\n        })\n        .replace(/<SPREAD>/g, function () {\n          return spread\n        })\n      return RegExp(source, flags)\n    }\n    spread = re(spread).source\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = re(\n      /<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/\n        .source\n    )\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/\n    Prism.languages.jsx.tag.inside['attr-value'].pattern =\n      /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] =\n      /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment']\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: re(/<SPREAD>/.source),\n          inside: Prism.languages.jsx\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'special-attr',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: re(/=<BRACES>/.source),\n          alias: 'language-javascript',\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?=\\{)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function (token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function (tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}