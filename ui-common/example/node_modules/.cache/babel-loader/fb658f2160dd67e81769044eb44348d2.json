{"ast":null,"code":"'use strict';\n\nmodule.exports = dot;\ndot.displayName = 'dot';\ndot.aliases = ['gv'];\n\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;\n\n  (function (Prism) {\n    var ID = '(?:' + [// an identifier\n    /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n    /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n    /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n    /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function withID(source, flags) {\n      return RegExp(source.replace(/<ID>/g, function () {\n        return ID;\n      }), flags);\n    }\n\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    };\n    Prism.languages.gv = Prism.languages.dot;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/dot.js"],"names":["module","exports","dot","displayName","aliases","Prism","ID","source","join","IDInside","markup","pattern","lookbehind","alias","inside","languages","withID","flags","RegExp","replace","comment","greedy","keyword","node","operator","punctuation","gv"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,CAAC,IAAD,CAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClB;AACA;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,EAAE,GACJ,QACA,CACE;AACA,2CAAuCC,MAFzC,EAEiD;AAC/C,gCAA4BA,MAH9B,EAGsC;AACpC,oCAAgCA,MAJlC,EAI0C;AACxC,mFACGA,MANL,EAOEC,IAPF,CAOO,GAPP,CADA,GASA,GAVF;AAWA,QAAIC,QAAQ,GAAG;AACbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,mBADH;AAENC,QAAAA,UAAU,EAAE,IAFN;AAGNC,QAAAA,KAAK,EAAE,CAAC,iBAAD,EAAoB,eAApB,EAAqC,cAArC,CAHD;AAINC,QAAAA,MAAM,EAAET,KAAK,CAACU,SAAN,CAAgBL;AAJlB;AADK,KAAf;AAQA;AACJ;AACA;AACA;AACA;;AACI,aAASM,MAAT,CAAgBT,MAAhB,EAAwBU,KAAxB,EAA+B;AAC7B,aAAOC,MAAM,CACXX,MAAM,CAACY,OAAP,CAAe,OAAf,EAAwB,YAAY;AAClC,eAAOb,EAAP;AACD,OAFD,CADW,EAIXW,KAJW,CAAb;AAMD;;AACDZ,IAAAA,KAAK,CAACU,SAAN,CAAgBb,GAAhB,GAAsB;AACpBkB,MAAAA,OAAO,EAAE;AACPT,QAAAA,OAAO,EAAE,+BADF;AAEPU,QAAAA,MAAM,EAAE;AAFD,OADW;AAKpB,oBAAc;AACZV,QAAAA,OAAO,EAAEK,MAAM,CACb,+CAA+CT,MADlC,EAEb,GAFa,CADH;AAKZK,QAAAA,UAAU,EAAE,IALA;AAMZS,QAAAA,MAAM,EAAE,IANI;AAOZR,QAAAA,KAAK,EAAE,YAPK;AAQZC,QAAAA,MAAM,EAAEL;AARI,OALM;AAepB,oBAAc;AACZE,QAAAA,OAAO,EAAEK,MAAM,CAAC,oBAAoBT,MAArB,CADH;AAEZK,QAAAA,UAAU,EAAE,IAFA;AAGZS,QAAAA,MAAM,EAAE,IAHI;AAIZP,QAAAA,MAAM,EAAEL;AAJI,OAfM;AAqBpB,mBAAa;AACXE,QAAAA,OAAO,EAAEK,MAAM,CAAC,qCAAqCT,MAAtC,CADJ;AAEXK,QAAAA,UAAU,EAAE,IAFD;AAGXS,QAAAA,MAAM,EAAE,IAHG;AAIXP,QAAAA,MAAM,EAAEL;AAJG,OArBO;AA2BpBa,MAAAA,OAAO,EAAE,kDA3BW;AA4BpB,uBAAiB;AACfX,QAAAA,OAAO,EAAE,sDADM;AAEfC,QAAAA,UAAU,EAAE,IAFG;AAGfC,QAAAA,KAAK,EAAE;AAHQ,OA5BG;AAiCpBU,MAAAA,IAAI,EAAE;AACJZ,QAAAA,OAAO,EAAEK,MAAM,CAAC,+BAA+BT,MAAhC,CADX;AAEJK,QAAAA,UAAU,EAAE,IAFR;AAGJS,QAAAA,MAAM,EAAE,IAHJ;AAIJP,QAAAA,MAAM,EAAEL;AAJJ,OAjCc;AAuCpBe,MAAAA,QAAQ,EAAE,YAvCU;AAwCpBC,MAAAA,WAAW,EAAE;AAxCO,KAAtB;AA0CApB,IAAAA,KAAK,CAACU,SAAN,CAAgBW,EAAhB,GAAqBrB,KAAK,CAACU,SAAN,CAAgBb,GAArC;AACD,GA5EA,EA4EEG,KA5EF;AA6EF","sourcesContent":["'use strict'\n\nmodule.exports = dot\ndot.displayName = 'dot'\ndot.aliases = ['gv']\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;(function (Prism) {\n    var ID =\n      '(?:' +\n      [\n        // an identifier\n        /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n        /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n        /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n        /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/\n          .source\n      ].join('|') +\n      ')'\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function withID(source, flags) {\n      return RegExp(\n        source.replace(/<ID>/g, function () {\n          return ID\n        }),\n        flags\n      )\n    }\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(\n          /(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source,\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    }\n    Prism.languages.gv = Prism.languages.dot\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}