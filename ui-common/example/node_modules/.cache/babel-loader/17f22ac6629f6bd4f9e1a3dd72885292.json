{"ast":null,"code":"'use strict';\n\nmodule.exports = wren;\nwren.displayName = 'wren';\nwren.aliases = [];\n\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [{\n      // support 3 levels of nesting\n      // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n      pattern: /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [{\n      // class definition\n      // class Meta {}\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, // A class must always start with an uppercase.\n    // File.read\n    /\\b[A-Z][a-z\\d_]*\\b/],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword: /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  };\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern: /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/wren.js"],"names":["module","exports","wren","displayName","aliases","Prism","languages","comment","pattern","greedy","lookbehind","alias","hashbang","attribute","constant","null","keyword","boolean","number","function","operator","punctuation","inside","interpolation","expression","string"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;AACrB;AACA;AACAK,IAAAA,OAAO,EAAE,CACP;AACE;AACA;AACAC,MAAAA,OAAO,EACL,gHAJJ;AAKEC,MAAAA,MAAM,EAAE;AALV,KADO,EAQP;AACED,MAAAA,OAAO,EAAE,kBADX;AAEEE,MAAAA,UAAU,EAAE,IAFd;AAGED,MAAAA,MAAM,EAAE;AAHV,KARO,CAHY;AAiBrB;AACA;AACA,4BAAwB;AACtBD,MAAAA,OAAO,EAAE,gBADa;AAEtBC,MAAAA,MAAM,EAAE,IAFc;AAGtBE,MAAAA,KAAK,EAAE;AAHe,KAnBH;AAwBrB;AACA,sBAAkB,IAzBG;AA0BrB;AACAC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,OAAO,EAAE,SADD;AAERC,MAAAA,MAAM,EAAE,IAFA;AAGRE,MAAAA,KAAK,EAAE;AAHC,KA3BW;AAgCrB;AACAE,IAAAA,SAAS,EAAE;AACT;AACA;AACA;AACAL,MAAAA,OAAO,EAAE,oBAJA;AAKTG,MAAAA,KAAK,EAAE;AALE,KAjCU;AAwCrB,kBAAc,CACZ;AACE;AACA;AACAH,MAAAA,OAAO,EAAE,iBAHX;AAIEE,MAAAA,UAAU,EAAE;AAJd,KADY,EAMT;AACH;AACA,wBARY,CAxCO;AAkDrB;AACAI,IAAAA,QAAQ,EAAE,oBAnDW;AAoDrBC,IAAAA,IAAI,EAAE;AACJP,MAAAA,OAAO,EAAE,UADL;AAEJG,MAAAA,KAAK,EAAE;AAFH,KApDe;AAwDrBK,IAAAA,OAAO,EACL,+GAzDmB;AA0DrBC,IAAAA,OAAO,EAAE,oBA1DY;AA2DrBC,IAAAA,MAAM,EAAE,iDA3Da;AA4DrB;AACAC,IAAAA,QAAQ,EAAE,yBA7DW;AA8DrBC,IAAAA,QAAQ,EAAE,8CA9DW;AA+DrBC,IAAAA,WAAW,EAAE;AA/DQ,GAAvB;AAiEAhB,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB,gBAArB,IAAyC;AACvC;AACAM,IAAAA,OAAO,EACL,oFAHqC;AAIvCE,IAAAA,UAAU,EAAE,IAJ2B;AAKvCD,IAAAA,MAAM,EAAE,IAL+B;AAMvCa,IAAAA,MAAM,EAAE;AACNC,MAAAA,aAAa,EAAE;AACb;AACAf,QAAAA,OAAO,EACL,iEAHW;AAIbE,QAAAA,UAAU,EAAE,IAJC;AAKbY,QAAAA,MAAM,EAAE;AACNE,UAAAA,UAAU,EAAE;AACVhB,YAAAA,OAAO,EAAE,sBADC;AAEVE,YAAAA,UAAU,EAAE,IAFF;AAGVY,YAAAA,MAAM,EAAEjB,KAAK,CAACC,SAAN,CAAgBJ;AAHd,WADN;AAMN,uCAA6B;AAC3BM,YAAAA,OAAO,EAAE,UADkB;AAE3BG,YAAAA,KAAK,EAAE;AAFoB;AANvB;AALK,OADT;AAkBNc,MAAAA,MAAM,EAAE;AAlBF;AAN+B,GAAzC;AA2BD","sourcesContent":["'use strict'\n\nmodule.exports = wren\nwren.displayName = 'wren'\nwren.aliases = []\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [\n      {\n        // support 3 levels of nesting\n        // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n        pattern:\n          /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [\n      {\n        // class definition\n        // class Meta {}\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      }, // A class must always start with an uppercase.\n      // File.read\n      /\\b[A-Z][a-z\\d_]*\\b/\n    ],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword:\n      /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  }\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern:\n      /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern:\n          /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}