{"ast":null,"code":"'use strict';\n\nmodule.exports = maxscript;\nmaxscript.displayName = 'maxscript';\nmaxscript.aliases = [];\n\nfunction maxscript(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i;\n    Prism.languages.maxscript = {\n      comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n        lookbehind: true,\n        greedy: true\n      },\n      path: {\n        pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n        greedy: true,\n        alias: 'string'\n      },\n      'function-call': {\n        pattern: RegExp('((?:' + ( // start of line\n        /^/.source + '|' + // operators and other language constructs\n        /[;=<>+\\-*/^({\\[]/.source + '|' + // keywords as part of statements\n        /\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\b/.source) + ')[ \\t]*)' + '(?!' + keywords.source + ')' + /[a-z_]\\w*\\b/.source + '(?=[ \\t]*(?:' + ( // variable\n        '(?!' + keywords.source + ')' + /[a-z_]/.source + '|' + // number\n        /\\d|-\\.?\\d/.source + '|' + // other expressions or literals\n        /[({'\"$@#?]/.source) + '))', 'im'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'function-definition': {\n        pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      argument: {\n        pattern: /\\b[a-z_]\\w*(?=:)/i,\n        alias: 'attr-name'\n      },\n      keyword: keywords,\n      boolean: /\\b(?:false|true)\\b/,\n      time: {\n        pattern: /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      number: [{\n        pattern: /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n        lookbehind: true\n      }, /\\b(?:e|pi)\\b/],\n      constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n      color: {\n        pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n        alias: 'constant'\n      },\n      operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n      punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/maxscript.js"],"names":["module","exports","maxscript","displayName","aliases","Prism","keywords","languages","comment","pattern","greedy","string","lookbehind","path","alias","RegExp","source","argument","keyword","boolean","time","number","constant","color","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AACAA,SAAS,CAACC,WAAV,GAAwB,WAAxB;AACAD,SAAS,CAACE,OAAV,GAAoB,EAApB;;AACA,SAASF,SAAT,CAAmBG,KAAnB,EAA0B;AACxB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,QAAQ,GACV,0SADF;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBL,SAAhB,GAA4B;AAC1BM,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,6BADF;AAEPC,QAAAA,MAAM,EAAE;AAFD,OADiB;AAK1BC,MAAAA,MAAM,EAAE;AACNF,QAAAA,OAAO,EAAE,gDADH;AAENG,QAAAA,UAAU,EAAE,IAFN;AAGNF,QAAAA,MAAM,EAAE;AAHF,OALkB;AAU1BG,MAAAA,IAAI,EAAE;AACJJ,QAAAA,OAAO,EAAE,2BADL;AAEJC,QAAAA,MAAM,EAAE,IAFJ;AAGJI,QAAAA,KAAK,EAAE;AAHH,OAVoB;AAe1B,uBAAiB;AACfL,QAAAA,OAAO,EAAEM,MAAM,CACb,WAAS;AACN,YAAIC,MAAJ,GACC,GADD,GACO;AACN,2BAAmBA,MAFpB,GAGC,GAHD,GAGO;AACN,qGACGA,MANP,IAOE,UAPF,GAQE,KARF,GASEV,QAAQ,CAACU,MATX,GAUE,GAVF,GAWE,cAAcA,MAXhB,GAYE,cAZF,KAYmB;AAChB,gBACCV,QAAQ,CAACU,MADV,GAEC,GAFD,GAGC,SAASA,MAHV,GAIC,GAJD,GAIO;AACN,oBAAYA,MALb,GAMC,GAND,GAMO;AACN,qBAAaA,MApBjB,IAqBE,IAtBW,EAuBb,IAvBa,CADA;AA0BfJ,QAAAA,UAAU,EAAE,IA1BG;AA2BfF,QAAAA,MAAM,EAAE,IA3BO;AA4BfI,QAAAA,KAAK,EAAE;AA5BQ,OAfS;AA6C1B,6BAAuB;AACrBL,QAAAA,OAAO,EAAE,8BADY;AAErBG,QAAAA,UAAU,EAAE,IAFS;AAGrBE,QAAAA,KAAK,EAAE;AAHc,OA7CG;AAkD1BG,MAAAA,QAAQ,EAAE;AACRR,QAAAA,OAAO,EAAE,mBADD;AAERK,QAAAA,KAAK,EAAE;AAFC,OAlDgB;AAsD1BI,MAAAA,OAAO,EAAEZ,QAtDiB;AAuD1Ba,MAAAA,OAAO,EAAE,oBAvDiB;AAwD1BC,MAAAA,IAAI,EAAE;AACJX,QAAAA,OAAO,EACL,qGAFE;AAGJG,QAAAA,UAAU,EAAE,IAHR;AAIJE,QAAAA,KAAK,EAAE;AAJH,OAxDoB;AA8D1BO,MAAAA,MAAM,EAAE,CACN;AACEZ,QAAAA,OAAO,EACL,uFAFJ;AAGEG,QAAAA,UAAU,EAAE;AAHd,OADM,EAMN,cANM,CA9DkB;AAsE1BU,MAAAA,QAAQ,EAAE,yDAtEgB;AAuE1BC,MAAAA,KAAK,EAAE;AACLd,QAAAA,OAAO,EAAE,8DADJ;AAELK,QAAAA,KAAK,EAAE;AAFF,OAvEmB;AA2E1BU,MAAAA,QAAQ,EAAE,4BA3EgB;AA4E1BC,MAAAA,WAAW,EAAE;AA5Ea,KAA5B;AA8ED,GAjFA,EAiFEpB,KAjFF;AAkFF","sourcesContent":["'use strict'\n\nmodule.exports = maxscript\nmaxscript.displayName = 'maxscript'\nmaxscript.aliases = []\nfunction maxscript(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i\n    Prism.languages.maxscript = {\n      comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n        lookbehind: true,\n        greedy: true\n      },\n      path: {\n        pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n        greedy: true,\n        alias: 'string'\n      },\n      'function-call': {\n        pattern: RegExp(\n          '((?:' + // start of line\n            (/^/.source +\n              '|' + // operators and other language constructs\n              /[;=<>+\\-*/^({\\[]/.source +\n              '|' + // keywords as part of statements\n              /\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\b/\n                .source) +\n            ')[ \\t]*)' +\n            '(?!' +\n            keywords.source +\n            ')' +\n            /[a-z_]\\w*\\b/.source +\n            '(?=[ \\t]*(?:' + // variable\n            ('(?!' +\n              keywords.source +\n              ')' +\n              /[a-z_]/.source +\n              '|' + // number\n              /\\d|-\\.?\\d/.source +\n              '|' + // other expressions or literals\n              /[({'\"$@#?]/.source) +\n            '))',\n          'im'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'function-definition': {\n        pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      argument: {\n        pattern: /\\b[a-z_]\\w*(?=:)/i,\n        alias: 'attr-name'\n      },\n      keyword: keywords,\n      boolean: /\\b(?:false|true)\\b/,\n      time: {\n        pattern:\n          /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      number: [\n        {\n          pattern:\n            /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n          lookbehind: true\n        },\n        /\\b(?:e|pi)\\b/\n      ],\n      constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n      color: {\n        pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n        alias: 'constant'\n      },\n      operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n      punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}