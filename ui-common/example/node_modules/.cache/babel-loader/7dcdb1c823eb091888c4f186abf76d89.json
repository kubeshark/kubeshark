{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"value\", \"padding\", \"minHeight\", \"placeholder\", \"language\", \"className\", \"style\", \"onChange\"];\nimport React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport \"./style/index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport * from './SelectionText';\nexport default /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    prefixCls = 'w-tc-editor',\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    onChange: _onChange\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var [value, setValue] = useState(props.value || '');\n  useEffect(() => setValue(props.value || ''), [props.value]);\n  var textRef = useRef(null);\n  useImperativeHandle(ref, () => textRef.current);\n  var contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding\n  };\n  var htmlStr = useMemo(() => processHtml(\"<pre aria-hidden=true><code \" + (language ? \"class=\\\"language-\" + language + \"\\\"\" : '') + \" >\" + htmlEncode(String(value || '')) + \"</code><br /></pre>\"), [value, language]);\n  var preView = useMemo(() => /*#__PURE__*/_jsx(\"div\", {\n    style: _extends({}, styles.editor, contentStyle, {\n      minHeight\n    }),\n    className: prefixCls + \"-preview \" + (language ? \"language-\" + language : ''),\n    dangerouslySetInnerHTML: {\n      __html: htmlStr\n    }\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [prefixCls, language, htmlStr]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: _extends({}, styles.container, style),\n    className: prefixCls + \" \" + (className || ''),\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      autoCapitalize: \"off\"\n    }, other, {\n      placeholder: placeholder,\n      onKeyDown: evn => {\n        if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n          shortcuts(evn);\n        }\n      },\n      style: _extends({}, styles.editor, styles.textarea, contentStyle, {\n        minHeight\n      }, placeholder && !value ? {\n        WebkitTextFillColor: 'inherit'\n      } : {}),\n      ref: textRef,\n      onChange: evn => {\n        setValue(evn.target.value);\n        _onChange && _onChange(evn);\n      },\n      className: prefixCls + \"-text\",\n      value: value\n    })), preView]\n  });\n});","map":{"version":3,"mappings":"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","names":["React","useEffect","useImperativeHandle","useMemo","useRef","useState","processHtml","htmlEncode","shortcuts","styles","forwardRef","props","ref","prefixCls","padding","minHeight","placeholder","language","className","style","onChange","other","value","setValue","textRef","current","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","htmlStr","String","preView","_jsx","editor","dangerouslySetInnerHTML","__html","_jsxs","container","children","autoComplete","autoCorrect","spellCheck","autoCapitalize","onKeyDown","evn","textarea","WebkitTextFillColor","target"],"sources":["../src/index.tsx"],"sourcesContent":["import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport './style/index.less';\n\nexport * from './SelectionText';\n\nexport interface TextareaCodeEditorProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  prefixCls?: string;\n  /**\n   * Set what programming language the code belongs to.\n   */\n  language?: string;\n  /**\n   * Optional padding for code. Default: `10`.\n   */\n  padding?: number;\n  /**\n   * The minimum height of the editor. Default: `16`.\n   */\n  minHeight?: number;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void | boolean;\n}\n\nexport default React.forwardRef<HTMLTextAreaElement, TextareaCodeEditorProps>((props, ref) => {\n  const {\n    prefixCls = 'w-tc-editor',\n    value: _,\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    onChange,\n    ...other\n  } = props;\n\n  const [value, setValue] = useState(props.value || '');\n  useEffect(() => setValue(props.value || ''), [props.value]);\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  useImperativeHandle<HTMLTextAreaElement, HTMLTextAreaElement>(ref, () => textRef.current!);\n\n  const contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding,\n  };\n\n  const htmlStr = useMemo(\n    () =>\n      processHtml(\n        `<pre aria-hidden=true><code ${language ? `class=\"language-${language}\"` : ''} >${htmlEncode(\n          String(value || ''),\n        )}</code><br /></pre>`,\n      ),\n    [value, language],\n  );\n  const preView = useMemo(\n    () => (\n      <div\n        style={{ ...styles.editor, ...contentStyle, minHeight }}\n        className={`${prefixCls}-preview ${language ? `language-${language}` : ''}`}\n        dangerouslySetInnerHTML={{\n          __html: htmlStr,\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [prefixCls, language, htmlStr],\n  );\n\n  return (\n    <div style={{ ...styles.container, ...style }} className={`${prefixCls} ${className || ''}`}>\n      <textarea\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        autoCapitalize=\"off\"\n        {...other}\n        placeholder={placeholder}\n        onKeyDown={(evn) => {\n          if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n            shortcuts(evn);\n          }\n        }}\n        style={{\n          ...styles.editor,\n          ...styles.textarea,\n          ...contentStyle,\n          minHeight,\n          ...(placeholder && !value ? { WebkitTextFillColor: 'inherit' } : {}),\n        }}\n        ref={textRef}\n        onChange={(evn) => {\n          setValue(evn.target.value);\n          onChange && onChange(evn);\n        }}\n        className={`${prefixCls}-text`}\n        value={value}\n      />\n      {preView}\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}