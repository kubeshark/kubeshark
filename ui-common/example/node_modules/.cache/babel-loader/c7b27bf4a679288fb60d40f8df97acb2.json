{"ast":null,"code":"'use strict';\n\nvar refractorRuby = require('./ruby.js');\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\n\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n            lookbehind: true,\n            inside: Prism.languages.ruby\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: Prism.languages.ruby\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {\n            return filter.filter;\n          })),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/haml.js"],"names":["refractorRuby","require","module","exports","haml","displayName","aliases","Prism","register","languages","pattern","lookbehind","alias","inside","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","text","insertBefore"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern:\n          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}