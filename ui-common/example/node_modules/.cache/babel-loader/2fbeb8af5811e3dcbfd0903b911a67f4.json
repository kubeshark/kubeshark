{"ast":null,"code":"'use strict';\n\nmodule.exports = yaml;\nyaml.displayName = 'yaml';\nyaml.aliases = ['yml'];\n\nfunction yaml(Prism) {\n  ;\n\n  (function (Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n    var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n    var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n\n    var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n      return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n    /**\n     *\n     * @param {string} value\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n\n    function createValuePattern(value, flags) {\n      flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n      var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<value>>/g, function () {\n        return value;\n      });\n      return RegExp(pattern, flags);\n    }\n\n    Prism.languages.yaml = {\n      scalar: {\n        pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n          return properties;\n        })),\n        lookbehind: true,\n        alias: 'string'\n      },\n      comment: /#.*/,\n      key: {\n        pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n          return properties;\n        }).replace(/<<key>>/g, function () {\n          return '(?:' + plainKey + '|' + string + ')';\n        })),\n        lookbehind: true,\n        greedy: true,\n        alias: 'atrule'\n      },\n      directive: {\n        pattern: /(^[ \\t]*)%.+/m,\n        lookbehind: true,\n        alias: 'important'\n      },\n      datetime: {\n        pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      boolean: {\n        pattern: createValuePattern(/false|true/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      null: {\n        pattern: createValuePattern(/null|~/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      string: {\n        pattern: createValuePattern(string),\n        lookbehind: true,\n        greedy: true\n      },\n      number: {\n        pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n        lookbehind: true\n      },\n      tag: tag,\n      important: anchorOrAlias,\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    };\n    Prism.languages.yml = Prism.languages.yaml;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/yaml.js"],"names":["module","exports","yaml","displayName","aliases","Prism","anchorOrAlias","tag","properties","source","plainKey","replace","string","createValuePattern","value","flags","pattern","RegExp","languages","scalar","lookbehind","alias","comment","key","greedy","directive","datetime","boolean","null","number","important","punctuation","yml"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = yaml\nyaml.displayName = 'yaml'\nyaml.aliases = ['yml']\nfunction yaml(Prism) {\n  ;(function (Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/ // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n    var tag =\n      /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/ // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n    var properties =\n      '(?:' +\n      tag.source +\n      '(?:[ \\t]+' +\n      anchorOrAlias.source +\n      ')?|' +\n      anchorOrAlias.source +\n      '(?:[ \\t]+' +\n      tag.source +\n      ')?)' // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n    var plainKey =\n      /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(\n        /<PLAIN>/g,\n        function () {\n          return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/\n            .source\n        }\n      )\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source\n    /**\n     *\n     * @param {string} value\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function createValuePattern(value, flags) {\n      flags = (flags || '').replace(/m/g, '') + 'm' // add m flag\n      var pattern =\n        /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source\n          .replace(/<<prop>>/g, function () {\n            return properties\n          })\n          .replace(/<<value>>/g, function () {\n            return value\n          })\n      return RegExp(pattern, flags)\n    }\n    Prism.languages.yaml = {\n      scalar: {\n        pattern: RegExp(\n          /([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(\n            /<<prop>>/g,\n            function () {\n              return properties\n            }\n          )\n        ),\n        lookbehind: true,\n        alias: 'string'\n      },\n      comment: /#.*/,\n      key: {\n        pattern: RegExp(\n          /((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source\n            .replace(/<<prop>>/g, function () {\n              return properties\n            })\n            .replace(/<<key>>/g, function () {\n              return '(?:' + plainKey + '|' + string + ')'\n            })\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'atrule'\n      },\n      directive: {\n        pattern: /(^[ \\t]*)%.+/m,\n        lookbehind: true,\n        alias: 'important'\n      },\n      datetime: {\n        pattern: createValuePattern(\n          /\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/\n            .source\n        ),\n        lookbehind: true,\n        alias: 'number'\n      },\n      boolean: {\n        pattern: createValuePattern(/false|true/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      null: {\n        pattern: createValuePattern(/null|~/.source, 'i'),\n        lookbehind: true,\n        alias: 'important'\n      },\n      string: {\n        pattern: createValuePattern(string),\n        lookbehind: true,\n        greedy: true\n      },\n      number: {\n        pattern: createValuePattern(\n          /[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      tag: tag,\n      important: anchorOrAlias,\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    }\n    Prism.languages.yml = Prism.languages.yaml\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}