{"ast":null,"code":"/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null'; // YAML spec allows non-reserved URI characters in tags.\n\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+'; // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n\n  const KEY = {\n    className: 'attr',\n    variants: [{\n      begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n    }, {\n      // double quoted keys\n      begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n    }, {\n      // single quoted keys\n      begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n    }]\n  };\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [{\n      // jinja templates Ansible\n      begin: /\\{\\{/,\n      end: /\\}\\}/\n    }, {\n      // Ruby i18n\n      begin: /%\\{/,\n      end: /\\}/\n    }]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /\\S+/\n    }],\n    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]\n  }; // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n\n  const CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /[^\\s,{}[\\]]+/\n    }]\n  });\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const MODES = [KEY, {\n    className: 'meta',\n    begin: '^---\\\\s*$',\n    relevance: 10\n  }, {\n    // multi line string\n    // Blocks start with a | or > followed by a newline\n    //\n    // Indentation of subsequent lines must be the same to\n    // be considered part of the block\n    className: 'string',\n    begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n  }, {\n    // Ruby/Rails erb\n    begin: '<%[%=-]?',\n    end: '[%-]?%>',\n    subLanguage: 'ruby',\n    excludeBegin: true,\n    excludeEnd: true,\n    relevance: 0\n  }, {\n    // named tags\n    className: 'type',\n    begin: '!\\\\w+!' + URI_CHARACTERS\n  }, // https://yaml.org/spec/1.2/spec.html#id2784064\n  {\n    // verbatim tags\n    className: 'type',\n    begin: '!<' + URI_CHARACTERS + \">\"\n  }, {\n    // primary tags\n    className: 'type',\n    begin: '!' + URI_CHARACTERS\n  }, {\n    // secondary tags\n    className: 'type',\n    begin: '!!' + URI_CHARACTERS\n  }, {\n    // fragment id &ref\n    className: 'meta',\n    begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // fragment reference *ref\n    className: 'meta',\n    begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // array listing\n    className: 'bullet',\n    // TODO: remove |$ hack when we have proper look-ahead support\n    begin: '-(?=[ ]|$)',\n    relevance: 0\n  }, hljs.HASH_COMMENT_MODE, {\n    beginKeywords: LITERALS,\n    keywords: {\n      literal: LITERALS\n    }\n  }, TIMESTAMP, // numbers are any valid C-style number that\n  // sit isolated from other words\n  {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE + '\\\\b',\n    relevance: 0\n  }, OBJECT, ARRAY, STRING];\n  const VALUE_MODES = [...MODES];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: ['yml'],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/highlight.js/lib/languages/yaml.js"],"names":["yaml","hljs","LITERALS","URI_CHARACTERS","KEY","className","variants","begin","TEMPLATE_VARIABLES","end","STRING","relevance","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","DATE_RE","TIME_RE","FRACTION_RE","ZONE_RE","TIMESTAMP","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null';\n\n  // YAML spec allows non-reserved URI characters in tags.\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  const KEY = {\n    className: 'attr',\n    variants: [\n      {\n        begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n      },\n      { // double quoted keys\n        begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n      },\n      { // single quoted keys\n        begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n      }\n    ]\n  };\n\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { // jinja templates Ansible\n        begin: /\\{\\{/,\n        end: /\\}\\}/\n      },\n      { // Ruby i18n\n        begin: /%\\{/,\n        end: /\\}/\n      }\n    ]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /\\S+/\n      }\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n  const CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /[^\\s,{}[\\]]+/\n      }\n    ]\n  });\n\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n\n  const MODES = [\n    KEY,\n    {\n      className: 'meta',\n      begin: '^---\\\\s*$',\n      relevance: 10\n    },\n    { // multi line string\n      // Blocks start with a | or > followed by a newline\n      //\n      // Indentation of subsequent lines must be the same to\n      // be considered part of the block\n      className: 'string',\n      begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n    },\n    { // Ruby/Rails erb\n      begin: '<%[%=-]?',\n      end: '[%-]?%>',\n      subLanguage: 'ruby',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    },\n    { // named tags\n      className: 'type',\n      begin: '!\\\\w+!' + URI_CHARACTERS\n    },\n    // https://yaml.org/spec/1.2/spec.html#id2784064\n    { // verbatim tags\n      className: 'type',\n      begin: '!<' + URI_CHARACTERS + \">\"\n    },\n    { // primary tags\n      className: 'type',\n      begin: '!' + URI_CHARACTERS\n    },\n    { // secondary tags\n      className: 'type',\n      begin: '!!' + URI_CHARACTERS\n    },\n    { // fragment id &ref\n      className: 'meta',\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // fragment reference *ref\n      className: 'meta',\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // array listing\n      className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '-(?=[ ]|$)',\n      relevance: 0\n    },\n    hljs.HASH_COMMENT_MODE,\n    {\n      beginKeywords: LITERALS,\n      keywords: {\n        literal: LITERALS\n      }\n    },\n    TIMESTAMP,\n    // numbers are any valid C-style number that\n    // sit isolated from other words\n    {\n      className: 'number',\n      begin: hljs.C_NUMBER_RE + '\\\\b',\n      relevance: 0\n    },\n    OBJECT,\n    ARRAY,\n    STRING\n  ];\n\n  const VALUE_MODES = [ ...MODES ];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: [ 'yml' ],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;\n"]},"metadata":{},"sourceType":"script"}