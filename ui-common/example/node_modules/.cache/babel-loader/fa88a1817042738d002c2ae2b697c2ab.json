{"ast":null,"code":"'use strict';\n\nmodule.exports = lolcode;\nlolcode.displayName = 'lolcode';\nlolcode.aliases = [];\n\nfunction lolcode(Prism) {\n  Prism.languages.lolcode = {\n    comment: [/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/, /\\bBTW.+/],\n    string: {\n      pattern: /\"(?::.|[^\":])*\"/,\n      inside: {\n        variable: /:\\{[^}]+\\}/,\n        symbol: [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n      },\n      greedy: true\n    },\n    number: /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,\n    symbol: {\n      pattern: /(^|\\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\\s|,|$)/,\n      lookbehind: true,\n      inside: {\n        keyword: /A(?=\\s)/\n      }\n    },\n    label: {\n      pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    function: {\n      pattern: /((?:^|\\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\\w*/,\n      lookbehind: true\n    },\n    keyword: [{\n      pattern: /(^|\\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\\?|YA RLY|YR)(?=\\s|,|$)/,\n      lookbehind: true\n    }, /'Z(?=\\s|,|$)/],\n    boolean: {\n      pattern: /(^|\\s)(?:FAIL|WIN)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    variable: {\n      pattern: /(^|\\s)IT(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    punctuation: /\\.{3}|…|,|!/\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/lolcode.js"],"names":["module","exports","lolcode","displayName","aliases","Prism","languages","comment","string","pattern","inside","variable","symbol","greedy","number","lookbehind","keyword","label","alias","function","boolean","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AACAA,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;AACtBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,OAAhB,GAA0B;AACxBK,IAAAA,OAAO,EAAE,CAAC,0BAAD,EAA6B,SAA7B,CADe;AAExBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,iBADH;AAENC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,YADJ;AAENC,QAAAA,MAAM,EAAE,CAAC,gBAAD,EAAmB,aAAnB,EAAkC,UAAlC;AAFF,OAFF;AAMNC,MAAAA,MAAM,EAAE;AANF,KAFgB;AAUxBC,IAAAA,MAAM,EAAE,qCAVgB;AAWxBF,IAAAA,MAAM,EAAE;AACNH,MAAAA,OAAO,EAAE,gEADH;AAENM,MAAAA,UAAU,EAAE,IAFN;AAGNL,MAAAA,MAAM,EAAE;AACNM,QAAAA,OAAO,EAAE;AADH;AAHF,KAXgB;AAkBxBC,IAAAA,KAAK,EAAE;AACLR,MAAAA,OAAO,EAAE,gDADJ;AAELM,MAAAA,UAAU,EAAE,IAFP;AAGLG,MAAAA,KAAK,EAAE;AAHF,KAlBiB;AAuBxBC,IAAAA,QAAQ,EAAE;AACRV,MAAAA,OAAO,EAAE,4CADD;AAERM,MAAAA,UAAU,EAAE;AAFJ,KAvBc;AA2BxBC,IAAAA,OAAO,EAAE,CACP;AACEP,MAAAA,OAAO,EACL,qRAFJ;AAGEM,MAAAA,UAAU,EAAE;AAHd,KADO,EAMP,cANO,CA3Be;AAmCxBK,IAAAA,OAAO,EAAE;AACPX,MAAAA,OAAO,EAAE,8BADF;AAEPM,MAAAA,UAAU,EAAE;AAFL,KAnCe;AAuCxBJ,IAAAA,QAAQ,EAAE;AACRF,MAAAA,OAAO,EAAE,oBADD;AAERM,MAAAA,UAAU,EAAE;AAFJ,KAvCc;AA2CxBM,IAAAA,QAAQ,EAAE;AACRZ,MAAAA,OAAO,EACL,sHAFM;AAGRM,MAAAA,UAAU,EAAE;AAHJ,KA3Cc;AAgDxBO,IAAAA,WAAW,EAAE;AAhDW,GAA1B;AAkDD","sourcesContent":["'use strict'\n\nmodule.exports = lolcode\nlolcode.displayName = 'lolcode'\nlolcode.aliases = []\nfunction lolcode(Prism) {\n  Prism.languages.lolcode = {\n    comment: [/\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/, /\\bBTW.+/],\n    string: {\n      pattern: /\"(?::.|[^\":])*\"/,\n      inside: {\n        variable: /:\\{[^}]+\\}/,\n        symbol: [/:\\([a-f\\d]+\\)/i, /:\\[[^\\]]+\\]/, /:[)>o\":]/]\n      },\n      greedy: true\n    },\n    number: /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,\n    symbol: {\n      pattern: /(^|\\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\\s|,|$)/,\n      lookbehind: true,\n      inside: {\n        keyword: /A(?=\\s)/\n      }\n    },\n    label: {\n      pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'string'\n    },\n    function: {\n      pattern: /((?:^|\\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\\w*/,\n      lookbehind: true\n    },\n    keyword: [\n      {\n        pattern:\n          /(^|\\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\\?|YA RLY|YR)(?=\\s|,|$)/,\n        lookbehind: true\n      },\n      /'Z(?=\\s|,|$)/\n    ],\n    boolean: {\n      pattern: /(^|\\s)(?:FAIL|WIN)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    variable: {\n      pattern: /(^|\\s)IT(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern:\n        /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\\s|,|$)/,\n      lookbehind: true\n    },\n    punctuation: /\\.{3}|…|,|!/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}