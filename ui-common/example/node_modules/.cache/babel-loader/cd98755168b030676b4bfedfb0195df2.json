{"ast":null,"code":"'use strict';\n\nmodule.exports = nevod;\nnevod.displayName = 'nevod';\nnevod.aliases = [];\n\nfunction nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern: /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern: /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [{\n      pattern: /=/,\n      alias: 'pattern-def'\n    }, {\n      pattern: /&/,\n      alias: 'conjunction'\n    }, {\n      pattern: /~/,\n      alias: 'exception'\n    }, {\n      pattern: /\\?/,\n      alias: 'optionality'\n    }, {\n      pattern: /[[\\]]/,\n      alias: 'repetition'\n    }, {\n      pattern: /[{}]/,\n      alias: 'variation'\n    }, {\n      pattern: /[+_]/,\n      alias: 'sequence'\n    }, {\n      pattern: /\\.{2,3}/,\n      alias: 'span'\n    }],\n    'field-capture': [{\n      pattern: /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }, {\n      pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/nevod.js"],"names":["module","exports","nevod","displayName","aliases","Prism","languages","comment","string","pattern","greedy","inside","namespace","lookbehind","alias","fields","punctuation","operator","search","keyword","quantifier","colon","name"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = nevod\nnevod.displayName = 'nevod'\nnevod.aliases = []\nfunction nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern:\n        /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword:\n      /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern:\n        /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [\n      {\n        pattern: /=/,\n        alias: 'pattern-def'\n      },\n      {\n        pattern: /&/,\n        alias: 'conjunction'\n      },\n      {\n        pattern: /~/,\n        alias: 'exception'\n      },\n      {\n        pattern: /\\?/,\n        alias: 'optionality'\n      },\n      {\n        pattern: /[[\\]]/,\n        alias: 'repetition'\n      },\n      {\n        pattern: /[{}]/,\n        alias: 'variation'\n      },\n      {\n        pattern: /[+_]/,\n        alias: 'sequence'\n      },\n      {\n        pattern: /\\.{2,3}/,\n        alias: 'span'\n      }\n    ],\n    'field-capture': [\n      {\n        pattern:\n          /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      },\n      {\n        pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      }\n    ],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}