{"ast":null,"code":"'use strict';\n\nvar refractorScheme = require('./scheme.js');\n\nmodule.exports = lilypond;\nlilypond.displayName = 'lilypond';\nlilypond.aliases = [];\n\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme);\n\n  (function (Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n\n    var recursivenessLog2 = 5;\n\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression;\n      });\n    }\n\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var lilypond = Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, function () {\n          return schemeExpression;\n        }), 'm'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    };\n    lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n    Prism.languages.ly = lilypond;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/lilypond.js"],"names":["refractorScheme","require","module","exports","lilypond","displayName","aliases","Prism","register","schemeExpression","source","recursivenessLog2","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme)\n  ;(function (Prism) {\n    var schemeExpression =\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern:\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}