{"ast":null,"code":"'use strict';\n\nvar refractorJsx = require('./jsx.js');\n\nvar refractorTypescript = require('./typescript.js');\n\nmodule.exports = tsx;\ntsx.displayName = 'tsx';\ntsx.aliases = [];\n\nfunction tsx(Prism) {\n  Prism.register(refractorJsx);\n  Prism.register(refractorTypescript);\n\n  (function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript);\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.tsx['parameter'];\n    delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n    var tag = Prism.languages.tsx.tag;\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n    tag.lookbehind = true;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/tsx.js"],"names":["refractorJsx","require","refractorTypescript","module","exports","tsx","displayName","aliases","Prism","register","typescript","util","clone","languages","extend","tag","pattern","RegExp","source","flags","lookbehind"],"mappings":"AAAA;;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,UAAD,CAA1B;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,iBAAD,CAAjC;;AACAE,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClBA,EAAAA,KAAK,CAACC,QAAN,CAAeT,YAAf;AACAQ,EAAAA,KAAK,CAACC,QAAN,CAAeP,mBAAf;;AACC,GAAC,UAAUM,KAAV,EAAiB;AACjB,QAAIE,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWC,KAAX,CAAiBJ,KAAK,CAACK,SAAN,CAAgBH,UAAjC,CAAjB;AACAF,IAAAA,KAAK,CAACK,SAAN,CAAgBR,GAAhB,GAAsBG,KAAK,CAACK,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8BJ,UAA9B,CAAtB,CAFiB,CAE+C;;AAChE,WAAOF,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoB,WAApB,CAAP;AACA,WAAOG,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoB,kBAApB,CAAP,CAJiB,CAI8B;AAC/C;AACA;;AACA,QAAIU,GAAG,GAAGP,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoBU,GAA9B;AACAA,IAAAA,GAAG,CAACC,OAAJ,GAAcC,MAAM,CAClB,qBAAqBC,MAArB,GAA8B,KAA9B,GAAsCH,GAAG,CAACC,OAAJ,CAAYE,MAAlD,GAA2D,GADzC,EAElBH,GAAG,CAACC,OAAJ,CAAYG,KAFM,CAApB;AAIAJ,IAAAA,GAAG,CAACK,UAAJ,GAAiB,IAAjB;AACD,GAbA,EAaEZ,KAbF;AAcF","sourcesContent":["'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}