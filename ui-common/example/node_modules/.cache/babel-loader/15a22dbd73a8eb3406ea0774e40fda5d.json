{"ast":null,"code":"'use strict';\n\nmodule.exports = dart;\ndart.displayName = 'dart';\ndart.aliases = [];\n\nfunction dart(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = [/\\b(?:async|sync|yield)\\*/, /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/]; // Handles named imports, such as http.Client\n\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source; // based on the dart naming conventions\n\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    };\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [className, {\n        // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        pattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n        lookbehind: true,\n        inside: className.inside\n      }],\n      keyword: keywords,\n      operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    });\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern: /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    });\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/dart.js"],"names":["module","exports","dart","displayName","aliases","Prism","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","keyword","operator","insertBefore","greedy","interpolation","expression","string","undefined","metadata","alias","generics"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,QAAQ,GAAG,CACb,0BADa,EAEb,4WAFa,CAAf,CADiB,CAIf;;AACF,QAAIC,aAAa,GAAG,uDACjBC,MADH,CALiB,CAMP;;AACV,QAAIC,SAAS,GAAG;AACdC,MAAAA,OAAO,EAAEC,MAAM,CAACJ,aAAa,GAAG,gCAAgCC,MAAjD,CADD;AAEdI,MAAAA,UAAU,EAAE,IAFE;AAGdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE;AACTJ,UAAAA,OAAO,EAAE,0CADA;AAETG,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE;AADP;AAFC;AADL;AAHM,KAAhB;AAYAV,IAAAA,KAAK,CAACW,SAAN,CAAgBd,IAAhB,GAAuBG,KAAK,CAACW,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrD,oBAAc,CACZR,SADY,EAEZ;AACE;AACA;AACAC,QAAAA,OAAO,EAAEC,MAAM,CACbJ,aAAa,GAAG,+BAA+BC,MADlC,CAHjB;AAMEI,QAAAA,UAAU,EAAE,IANd;AAOEC,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAPpB,OAFY,CADuC;AAarDK,MAAAA,OAAO,EAAEZ,QAb4C;AAcrDa,MAAAA,QAAQ,EACN;AAfmD,KAAhC,CAAvB;AAiBAd,IAAAA,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7C,wBAAkB;AAChBV,QAAAA,OAAO,EACL,kEAFc;AAGhBW,QAAAA,MAAM,EAAE,IAHQ;AAIhBR,QAAAA,MAAM,EAAE;AACNS,UAAAA,aAAa,EAAE;AACbZ,YAAAA,OAAO,EACL,4DAFW;AAGbE,YAAAA,UAAU,EAAE,IAHC;AAIbC,YAAAA,MAAM,EAAE;AACNE,cAAAA,WAAW,EAAE,YADP;AAENQ,cAAAA,UAAU,EAAE;AACVb,gBAAAA,OAAO,EAAE,SADC;AAEVG,gBAAAA,MAAM,EAAER,KAAK,CAACW,SAAN,CAAgBd;AAFd;AAFN;AAJK,WADT;AAaNsB,UAAAA,MAAM,EAAE;AAbF;AAJQ,OAD2B;AAqB7CA,MAAAA,MAAM,EAAEC;AArBqC,KAA/C;AAuBApB,IAAAA,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AACjDM,MAAAA,QAAQ,EAAE;AACRhB,QAAAA,OAAO,EAAE,MADD;AAERiB,QAAAA,KAAK,EAAE;AAFC;AADuC,KAAnD;AAMAtB,IAAAA,KAAK,CAACW,SAAN,CAAgBI,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AACjDQ,MAAAA,QAAQ,EAAE;AACRlB,QAAAA,OAAO,EACL,qEAFM;AAGRG,QAAAA,MAAM,EAAE;AACN,wBAAcJ,SADR;AAENS,UAAAA,OAAO,EAAEZ,QAFH;AAGNS,UAAAA,WAAW,EAAE,WAHP;AAINI,UAAAA,QAAQ,EAAE;AAJJ;AAHA;AADuC,KAAnD;AAYD,GA7EA,EA6EEd,KA7EF;AA8EF","sourcesContent":["'use strict'\n\nmodule.exports = dart\ndart.displayName = 'dart'\ndart.aliases = []\nfunction dart(Prism) {\n  ;(function (Prism) {\n    var keywords = [\n      /\\b(?:async|sync|yield)\\*/,\n      /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n    ] // Handles named imports, such as http.Client\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the dart naming conventions\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    }\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      operator:\n        /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    })\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern:\n          /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}