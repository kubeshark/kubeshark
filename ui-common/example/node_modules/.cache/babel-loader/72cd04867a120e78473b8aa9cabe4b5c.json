{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js"],"names":["_extends","formatMuiErrorMessage","_formatMuiErrorMessage","isUnitless","convertLength","responsiveProperty","alignProperty","fontGrid","responsiveFontSizes","themeInput","options","arguments","length","undefined","_options$breakpoints","breakpoints","_options$disableAlign","disableAlign","_options$factor","factor","_options$variants","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","Error","process","env","NODE_ENV","transform","value","size","grid","pixels","cssProperty","min","max","unit"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}"]},"metadata":{},"sourceType":"module"}