{"ast":null,"code":"'use strict';\n\nvar find = require('property-information/find');\n\nvar normalize = require('property-information/normalize');\n\nvar parseSelector = require('hast-util-parse-selector');\n\nvar spaces = require('space-separated-tokens').parse;\n\nvar commas = require('comma-separated-tokens').parse;\n\nmodule.exports = factory;\nvar own = {}.hasOwnProperty;\n\nfunction factory(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;\n  return h; // Hyperscript compatible DSL for creating virtual hast trees.\n\n  function h(selector, properties) {\n    var node = parseSelector(selector, defaultTagName);\n    var children = Array.prototype.slice.call(arguments, 2);\n    var name = node.tagName.toLowerCase();\n    var property;\n    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name;\n\n    if (properties && isChildren(properties, node)) {\n      children.unshift(properties);\n      properties = null;\n    }\n\n    if (properties) {\n      for (property in properties) {\n        addProperty(node.properties, property, properties[property]);\n      }\n    }\n\n    addChild(node.children, children);\n\n    if (node.tagName === 'template') {\n      node.content = {\n        type: 'root',\n        children: node.children\n      };\n      node.children = [];\n    }\n\n    return node;\n  }\n\n  function addProperty(properties, key, value) {\n    var info;\n    var property;\n    var result; // Ignore nullish and NaN values.\n\n    if (value === null || value === undefined || value !== value) {\n      return;\n    }\n\n    info = find(schema, key);\n    property = info.property;\n    result = value; // Handle list values.\n\n    if (typeof result === 'string') {\n      if (info.spaceSeparated) {\n        result = spaces(result);\n      } else if (info.commaSeparated) {\n        result = commas(result);\n      } else if (info.commaOrSpaceSeparated) {\n        result = spaces(commas(result).join(' '));\n      }\n    } // Accept `object` on style.\n\n\n    if (property === 'style' && typeof value !== 'string') {\n      result = style(result);\n    } // Class-names (which can be added both on the `selector` and here).\n\n\n    if (property === 'className' && properties.className) {\n      result = properties.className.concat(result);\n    }\n\n    properties[property] = parsePrimitives(info, property, result);\n  }\n}\n\nfunction isChildren(value, node) {\n  return typeof value === 'string' || 'length' in value || isNode(node.tagName, value);\n}\n\nfunction isNode(tagName, value) {\n  var type = value.type;\n\n  if (tagName === 'input' || !type || typeof type !== 'string') {\n    return false;\n  }\n\n  if (typeof value.children === 'object' && 'length' in value.children) {\n    return true;\n  }\n\n  type = type.toLowerCase();\n\n  if (tagName === 'button') {\n    return type !== 'menu' && type !== 'submit' && type !== 'reset' && type !== 'button';\n  }\n\n  return 'value' in value;\n}\n\nfunction addChild(nodes, value) {\n  var index;\n  var length;\n\n  if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({\n      type: 'text',\n      value: String(value)\n    });\n    return;\n  }\n\n  if (typeof value === 'object' && 'length' in value) {\n    index = -1;\n    length = value.length;\n\n    while (++index < length) {\n      addChild(nodes, value[index]);\n    }\n\n    return;\n  }\n\n  if (typeof value !== 'object' || !('type' in value)) {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\n  }\n\n  nodes.push(value);\n} // Parse a (list of) primitives.\n\n\nfunction parsePrimitives(info, name, value) {\n  var index;\n  var length;\n  var result;\n\n  if (typeof value !== 'object' || !('length' in value)) {\n    return parsePrimitive(info, name, value);\n  }\n\n  length = value.length;\n  index = -1;\n  result = [];\n\n  while (++index < length) {\n    result[index] = parsePrimitive(info, name, value[index]);\n  }\n\n  return result;\n} // Parse a single primitives.\n\n\nfunction parsePrimitive(info, name, value) {\n  var result = value;\n\n  if (info.number || info.positiveNumber) {\n    if (!isNaN(result) && result !== '') {\n      result = Number(result);\n    }\n  } else if (info.boolean || info.overloadedBoolean) {\n    // Accept `boolean` and `string`.\n    if (typeof result === 'string' && (result === '' || normalize(value) === normalize(name))) {\n      result = true;\n    }\n  }\n\n  return result;\n}\n\nfunction style(value) {\n  var result = [];\n  var key;\n\n  for (key in value) {\n    result.push([key, value[key]].join(': '));\n  }\n\n  return result.join('; ');\n}\n\nfunction createAdjustMap(values) {\n  var length = values.length;\n  var index = -1;\n  var result = {};\n  var value;\n\n  while (++index < length) {\n    value = values[index];\n    result[value.toLowerCase()] = value;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/hastscript/factory.js"],"names":["find","require","normalize","parseSelector","spaces","parse","commas","module","exports","factory","own","hasOwnProperty","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","node","children","Array","prototype","slice","call","arguments","name","tagName","toLowerCase","property","isChildren","unshift","addProperty","addChild","content","type","key","value","info","result","undefined","spaceSeparated","commaSeparated","commaOrSpaceSeparated","join","style","className","concat","parsePrimitives","isNode","nodes","index","length","push","String","Error","parsePrimitive","number","positiveNumber","isNaN","Number","boolean","overloadedBoolean","values"],"mappings":"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","sourcesContent":["'use strict'\n\nvar find = require('property-information/find')\nvar normalize = require('property-information/normalize')\nvar parseSelector = require('hast-util-parse-selector')\nvar spaces = require('space-separated-tokens').parse\nvar commas = require('comma-separated-tokens').parse\n\nmodule.exports = factory\n\nvar own = {}.hasOwnProperty\n\nfunction factory(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null\n\n  return h\n\n  // Hyperscript compatible DSL for creating virtual hast trees.\n  function h(selector, properties) {\n    var node = parseSelector(selector, defaultTagName)\n    var children = Array.prototype.slice.call(arguments, 2)\n    var name = node.tagName.toLowerCase()\n    var property\n\n    node.tagName = adjust && own.call(adjust, name) ? adjust[name] : name\n\n    if (properties && isChildren(properties, node)) {\n      children.unshift(properties)\n      properties = null\n    }\n\n    if (properties) {\n      for (property in properties) {\n        addProperty(node.properties, property, properties[property])\n      }\n    }\n\n    addChild(node.children, children)\n\n    if (node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  function addProperty(properties, key, value) {\n    var info\n    var property\n    var result\n\n    // Ignore nullish and NaN values.\n    if (value === null || value === undefined || value !== value) {\n      return\n    }\n\n    info = find(schema, key)\n    property = info.property\n    result = value\n\n    // Handle list values.\n    if (typeof result === 'string') {\n      if (info.spaceSeparated) {\n        result = spaces(result)\n      } else if (info.commaSeparated) {\n        result = commas(result)\n      } else if (info.commaOrSpaceSeparated) {\n        result = spaces(commas(result).join(' '))\n      }\n    }\n\n    // Accept `object` on style.\n    if (property === 'style' && typeof value !== 'string') {\n      result = style(result)\n    }\n\n    // Class-names (which can be added both on the `selector` and here).\n    if (property === 'className' && properties.className) {\n      result = properties.className.concat(result)\n    }\n\n    properties[property] = parsePrimitives(info, property, result)\n  }\n}\n\nfunction isChildren(value, node) {\n  return (\n    typeof value === 'string' ||\n    'length' in value ||\n    isNode(node.tagName, value)\n  )\n}\n\nfunction isNode(tagName, value) {\n  var type = value.type\n\n  if (tagName === 'input' || !type || typeof type !== 'string') {\n    return false\n  }\n\n  if (typeof value.children === 'object' && 'length' in value.children) {\n    return true\n  }\n\n  type = type.toLowerCase()\n\n  if (tagName === 'button') {\n    return (\n      type !== 'menu' &&\n      type !== 'submit' &&\n      type !== 'reset' &&\n      type !== 'button'\n    )\n  }\n\n  return 'value' in value\n}\n\nfunction addChild(nodes, value) {\n  var index\n  var length\n\n  if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n    return\n  }\n\n  if (typeof value === 'object' && 'length' in value) {\n    index = -1\n    length = value.length\n\n    while (++index < length) {\n      addChild(nodes, value[index])\n    }\n\n    return\n  }\n\n  if (typeof value !== 'object' || !('type' in value)) {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n\n  nodes.push(value)\n}\n\n// Parse a (list of) primitives.\nfunction parsePrimitives(info, name, value) {\n  var index\n  var length\n  var result\n\n  if (typeof value !== 'object' || !('length' in value)) {\n    return parsePrimitive(info, name, value)\n  }\n\n  length = value.length\n  index = -1\n  result = []\n\n  while (++index < length) {\n    result[index] = parsePrimitive(info, name, value[index])\n  }\n\n  return result\n}\n\n// Parse a single primitives.\nfunction parsePrimitive(info, name, value) {\n  var result = value\n\n  if (info.number || info.positiveNumber) {\n    if (!isNaN(result) && result !== '') {\n      result = Number(result)\n    }\n  } else if (info.boolean || info.overloadedBoolean) {\n    // Accept `boolean` and `string`.\n    if (\n      typeof result === 'string' &&\n      (result === '' || normalize(value) === normalize(name))\n    ) {\n      result = true\n    }\n  }\n\n  return result\n}\n\nfunction style(value) {\n  var result = []\n  var key\n\n  for (key in value) {\n    result.push([key, value[key]].join(': '))\n  }\n\n  return result.join('; ')\n}\n\nfunction createAdjustMap(values) {\n  var length = values.length\n  var index = -1\n  var result = {}\n  var value\n\n  while (++index < length) {\n    value = values[index]\n    result[value.toLowerCase()] = value\n  }\n\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}