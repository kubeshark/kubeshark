{"ast":null,"code":"'use strict';\n\nmodule.exports = stylus;\nstylus.displayName = 'stylus';\nstylus.aliases = [];\n\nfunction stylus(Prism) {\n  ;\n\n  (function (Prism) {\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n      lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    };\n    var inside = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n        greedy: true\n      },\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      color: [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n        pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n        inside: {\n          unit: unit,\n          number: number,\n          function: /[\\w-]+(?=\\()/,\n          punctuation: /[(),]/\n        }\n      }],\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: [// We want non-word chars around \"-\" because it is\n      // accepted in property names.\n      /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n      number: number,\n      punctuation: /[{}()\\[\\];:,]/\n    };\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    };\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    };\n    Prism.languages.stylus = {\n      'atrule-declaration': {\n        pattern: /(^[ \\t]*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          comment: inside.comment,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true,\n        greedy: true\n      },\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/stylus.js"],"names":["module","exports","stylus","displayName","aliases","Prism","unit","pattern","lookbehind","number","inside","comment","url","greedy","string","interpolation","func","important","keyword","hexcode","color","function","punctuation","entity","boolean","operator","alias","delimiter","rest","languages","atrule","variable","statement","property","selector"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = stylus\nstylus.displayName = 'stylus'\nstylus.aliases = []\nfunction stylus(Prism) {\n  ;(function (Prism) {\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    var inside = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n        greedy: true\n      },\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      color: [\n        /\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: [\n        // We want non-word chars around \"-\" because it is\n        // accepted in property names.\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n      ],\n      number: number,\n      punctuation: /[{}()\\[\\];:,]/\n    }\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    }\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    }\n    Prism.languages.stylus = {\n      'atrule-declaration': {\n        pattern: /(^[ \\t]*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern:\n          /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern:\n          /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          comment: inside.comment,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true,\n        greedy: true\n      },\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}