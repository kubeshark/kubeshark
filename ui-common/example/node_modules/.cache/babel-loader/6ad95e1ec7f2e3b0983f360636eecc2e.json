{"ast":null,"code":"'use strict';\n\nconst UNDEFINED_CODE_POINTS = [0xfffe, 0xffff, 0x1fffe, 0x1ffff, 0x2fffe, 0x2ffff, 0x3fffe, 0x3ffff, 0x4fffe, 0x4ffff, 0x5fffe, 0x5ffff, 0x6fffe, 0x6ffff, 0x7fffe, 0x7ffff, 0x8fffe, 0x8ffff, 0x9fffe, 0x9ffff, 0xafffe, 0xaffff, 0xbfffe, 0xbffff, 0xcfffe, 0xcffff, 0xdfffe, 0xdffff, 0xefffe, 0xeffff, 0xffffe, 0xfffff, 0x10fffe, 0x10ffff];\nexports.REPLACEMENT_CHARACTER = '\\uFFFD';\nexports.CODE_POINTS = {\n  EOF: -1,\n  NULL: 0x00,\n  TABULATION: 0x09,\n  CARRIAGE_RETURN: 0x0d,\n  LINE_FEED: 0x0a,\n  FORM_FEED: 0x0c,\n  SPACE: 0x20,\n  EXCLAMATION_MARK: 0x21,\n  QUOTATION_MARK: 0x22,\n  NUMBER_SIGN: 0x23,\n  AMPERSAND: 0x26,\n  APOSTROPHE: 0x27,\n  HYPHEN_MINUS: 0x2d,\n  SOLIDUS: 0x2f,\n  DIGIT_0: 0x30,\n  DIGIT_9: 0x39,\n  SEMICOLON: 0x3b,\n  LESS_THAN_SIGN: 0x3c,\n  EQUALS_SIGN: 0x3d,\n  GREATER_THAN_SIGN: 0x3e,\n  QUESTION_MARK: 0x3f,\n  LATIN_CAPITAL_A: 0x41,\n  LATIN_CAPITAL_F: 0x46,\n  LATIN_CAPITAL_X: 0x58,\n  LATIN_CAPITAL_Z: 0x5a,\n  RIGHT_SQUARE_BRACKET: 0x5d,\n  GRAVE_ACCENT: 0x60,\n  LATIN_SMALL_A: 0x61,\n  LATIN_SMALL_F: 0x66,\n  LATIN_SMALL_X: 0x78,\n  LATIN_SMALL_Z: 0x7a,\n  REPLACEMENT_CHARACTER: 0xfffd\n};\nexports.CODE_POINT_SEQUENCES = {\n  DASH_DASH_STRING: [0x2d, 0x2d],\n  //--\n  DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45],\n  //DOCTYPE\n  CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b],\n  //[CDATA[\n  SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74],\n  //script\n  PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43],\n  //PUBLIC\n  SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM\n\n}; //Surrogates\n\nexports.isSurrogate = function (cp) {\n  return cp >= 0xd800 && cp <= 0xdfff;\n};\n\nexports.isSurrogatePair = function (cp) {\n  return cp >= 0xdc00 && cp <= 0xdfff;\n};\n\nexports.getSurrogatePairCodePoint = function (cp1, cp2) {\n  return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;\n}; //NOTE: excluding NULL and ASCII whitespace\n\n\nexports.isControlCodePoint = function (cp) {\n  return cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f || cp >= 0x7f && cp <= 0x9f;\n};\n\nexports.isUndefinedCodePoint = function (cp) {\n  return cp >= 0xfdd0 && cp <= 0xfdef || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;\n};","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/parse5/lib/common/unicode.js"],"names":["UNDEFINED_CODE_POINTS","exports","REPLACEMENT_CHARACTER","CODE_POINTS","EOF","NULL","TABULATION","CARRIAGE_RETURN","LINE_FEED","FORM_FEED","SPACE","EXCLAMATION_MARK","QUOTATION_MARK","NUMBER_SIGN","AMPERSAND","APOSTROPHE","HYPHEN_MINUS","SOLIDUS","DIGIT_0","DIGIT_9","SEMICOLON","LESS_THAN_SIGN","EQUALS_SIGN","GREATER_THAN_SIGN","QUESTION_MARK","LATIN_CAPITAL_A","LATIN_CAPITAL_F","LATIN_CAPITAL_X","LATIN_CAPITAL_Z","RIGHT_SQUARE_BRACKET","GRAVE_ACCENT","LATIN_SMALL_A","LATIN_SMALL_F","LATIN_SMALL_X","LATIN_SMALL_Z","CODE_POINT_SEQUENCES","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","SCRIPT_STRING","PUBLIC_STRING","SYSTEM_STRING","isSurrogate","cp","isSurrogatePair","getSurrogatePairCodePoint","cp1","cp2","isControlCodePoint","isUndefinedCodePoint","indexOf"],"mappings":"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","sourcesContent":["'use strict';\n\nconst UNDEFINED_CODE_POINTS = [\n    0xfffe,\n    0xffff,\n    0x1fffe,\n    0x1ffff,\n    0x2fffe,\n    0x2ffff,\n    0x3fffe,\n    0x3ffff,\n    0x4fffe,\n    0x4ffff,\n    0x5fffe,\n    0x5ffff,\n    0x6fffe,\n    0x6ffff,\n    0x7fffe,\n    0x7ffff,\n    0x8fffe,\n    0x8ffff,\n    0x9fffe,\n    0x9ffff,\n    0xafffe,\n    0xaffff,\n    0xbfffe,\n    0xbffff,\n    0xcfffe,\n    0xcffff,\n    0xdfffe,\n    0xdffff,\n    0xefffe,\n    0xeffff,\n    0xffffe,\n    0xfffff,\n    0x10fffe,\n    0x10ffff\n];\n\nexports.REPLACEMENT_CHARACTER = '\\uFFFD';\n\nexports.CODE_POINTS = {\n    EOF: -1,\n    NULL: 0x00,\n    TABULATION: 0x09,\n    CARRIAGE_RETURN: 0x0d,\n    LINE_FEED: 0x0a,\n    FORM_FEED: 0x0c,\n    SPACE: 0x20,\n    EXCLAMATION_MARK: 0x21,\n    QUOTATION_MARK: 0x22,\n    NUMBER_SIGN: 0x23,\n    AMPERSAND: 0x26,\n    APOSTROPHE: 0x27,\n    HYPHEN_MINUS: 0x2d,\n    SOLIDUS: 0x2f,\n    DIGIT_0: 0x30,\n    DIGIT_9: 0x39,\n    SEMICOLON: 0x3b,\n    LESS_THAN_SIGN: 0x3c,\n    EQUALS_SIGN: 0x3d,\n    GREATER_THAN_SIGN: 0x3e,\n    QUESTION_MARK: 0x3f,\n    LATIN_CAPITAL_A: 0x41,\n    LATIN_CAPITAL_F: 0x46,\n    LATIN_CAPITAL_X: 0x58,\n    LATIN_CAPITAL_Z: 0x5a,\n    RIGHT_SQUARE_BRACKET: 0x5d,\n    GRAVE_ACCENT: 0x60,\n    LATIN_SMALL_A: 0x61,\n    LATIN_SMALL_F: 0x66,\n    LATIN_SMALL_X: 0x78,\n    LATIN_SMALL_Z: 0x7a,\n    REPLACEMENT_CHARACTER: 0xfffd\n};\n\nexports.CODE_POINT_SEQUENCES = {\n    DASH_DASH_STRING: [0x2d, 0x2d], //--\n    DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE\n    CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[\n    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script\n    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC\n    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM\n};\n\n//Surrogates\nexports.isSurrogate = function(cp) {\n    return cp >= 0xd800 && cp <= 0xdfff;\n};\n\nexports.isSurrogatePair = function(cp) {\n    return cp >= 0xdc00 && cp <= 0xdfff;\n};\n\nexports.getSurrogatePairCodePoint = function(cp1, cp2) {\n    return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;\n};\n\n//NOTE: excluding NULL and ASCII whitespace\nexports.isControlCodePoint = function(cp) {\n    return (\n        (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f)\n    );\n};\n\nexports.isUndefinedCodePoint = function(cp) {\n    return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;\n};\n"]},"metadata":{},"sourceType":"script"}