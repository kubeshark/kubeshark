{"ast":null,"code":"'use strict';\n\nmodule.exports = parigp;\nparigp.displayName = 'parigp';\nparigp.aliases = [];\n\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: function () {\n      var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\n      keywords = keywords.map(function (keyword) {\n        return keyword.split('').join(' *');\n      }).join('|');\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b');\n    }(),\n    function: /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/parigp.js"],"names":["module","exports","parigp","displayName","aliases","Prism","languages","comment","string","pattern","greedy","keyword","keywords","map","split","join","RegExp","function","number","lookbehind","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE,yBADc;AAEvBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,uBADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFe;AAMvB;AACA;AACA;AACAC,IAAAA,OAAO,EAAG,YAAY;AACpB,UAAIC,QAAQ,GAAG,CACb,YADa,EAEb,OAFa,EAGb,UAHa,EAIb,SAJa,EAKb,QALa,EAMb,OANa,EAOb,cAPa,EAQb,QARa,EASb,QATa,EAUb,SAVa,EAWb,UAXa,EAYb,SAZa,EAab,aAba,EAcb,QAda,EAeb,KAfa,EAgBb,OAhBa,EAiBb,IAjBa,EAkBb,OAlBa,EAmBb,IAnBa,EAoBb,MApBa,EAqBb,QArBa,EAsBb,OAtBa,EAuBb,OAvBa,CAAf;AAyBAA,MAAAA,QAAQ,GAAGA,QAAQ,CAChBC,GADQ,CACJ,UAAUF,OAAV,EAAmB;AACtB,eAAOA,OAAO,CAACG,KAAR,CAAc,EAAd,EAAkBC,IAAlB,CAAuB,IAAvB,CAAP;AACD,OAHQ,EAIRA,IAJQ,CAIH,GAJG,CAAX;AAKA,aAAOC,MAAM,CAAC,WAAWJ,QAAX,GAAsB,MAAvB,CAAb;AACD,KAhCQ,EATc;AA0CvBK,IAAAA,QAAQ,EAAE,2BA1Ca;AA2CvBC,IAAAA,MAAM,EAAE;AACN;AACAT,MAAAA,OAAO,EACL,+GAHI;AAINU,MAAAA,UAAU,EAAE;AAJN,KA3Ce;AAiDvBC,IAAAA,QAAQ,EACN,qLAlDqB;AAmDvBC,IAAAA,WAAW,EAAE;AAnDU,GAAzB;AAqDD","sourcesContent":["'use strict'\n\nmodule.exports = parigp\nparigp.displayName = 'parigp'\nparigp.aliases = []\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: (function () {\n      var keywords = [\n        'breakpoint',\n        'break',\n        'dbg_down',\n        'dbg_err',\n        'dbg_up',\n        'dbg_x',\n        'forcomposite',\n        'fordiv',\n        'forell',\n        'forpart',\n        'forprime',\n        'forstep',\n        'forsubgroup',\n        'forvec',\n        'for',\n        'iferr',\n        'if',\n        'local',\n        'my',\n        'next',\n        'return',\n        'until',\n        'while'\n      ]\n      keywords = keywords\n        .map(function (keyword) {\n          return keyword.split('').join(' *')\n        })\n        .join('|')\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b')\n    })(),\n    function: /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern:\n        /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator:\n      /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}