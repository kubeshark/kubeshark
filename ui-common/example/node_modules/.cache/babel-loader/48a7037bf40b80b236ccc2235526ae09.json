{"ast":null,"code":"/*\nLanguage: WebAssembly\nWebsite: https://webassembly.org\nDescription:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\nCategory: web\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction wasm(hljs) {\n  hljs.regex;\n  const BLOCK_COMMENT = hljs.COMMENT(/\\(;/, /;\\)/);\n  BLOCK_COMMENT.contains.push(\"self\");\n  const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);\n  const KWS = [\"anyfunc\", \"block\", \"br\", \"br_if\", \"br_table\", \"call\", \"call_indirect\", \"data\", \"drop\", \"elem\", \"else\", \"end\", \"export\", \"func\", \"global.get\", \"global.set\", \"local.get\", \"local.set\", \"local.tee\", \"get_global\", \"get_local\", \"global\", \"if\", \"import\", \"local\", \"loop\", \"memory\", \"memory.grow\", \"memory.size\", \"module\", \"mut\", \"nop\", \"offset\", \"param\", \"result\", \"return\", \"select\", \"set_global\", \"set_local\", \"start\", \"table\", \"tee_local\", \"then\", \"type\", \"unreachable\"];\n  const FUNCTION_REFERENCE = {\n    begin: [/(?:func|call|call_indirect)/, /\\s+/, /\\$[^\\s)]+/],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    }\n  };\n  const ARGUMENT = {\n    className: \"variable\",\n    begin: /\\$[\\w_]+/\n  };\n  const PARENS = {\n    match: /(\\((?!;)|\\))+/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n  const NUMBER = {\n    className: \"number\",\n    relevance: 0,\n    // borrowed from Prism, TODO: split out into variants\n    match: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/\n  };\n  const TYPE = {\n    // look-ahead prevents us from gobbling up opcodes\n    match: /(i32|i64|f32|f64)(?!\\.)/,\n    className: \"type\"\n  };\n  const MATH_OPERATIONS = {\n    className: \"keyword\",\n    // borrowed from Prism, TODO: split out into variants\n    match: /\\b(f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))\\b/\n  };\n  const OFFSET_ALIGN = {\n    match: [/(?:offset|align)/, /\\s*/, /=/],\n    className: {\n      1: \"keyword\",\n      3: \"operator\"\n    }\n  };\n  return {\n    name: 'WebAssembly',\n    keywords: {\n      $pattern: /[\\w.]+/,\n      keyword: KWS\n    },\n    contains: [LINE_COMMENT, BLOCK_COMMENT, OFFSET_ALIGN, ARGUMENT, PARENS, FUNCTION_REFERENCE, hljs.QUOTE_STRING_MODE, TYPE, MATH_OPERATIONS, NUMBER]\n  };\n}\n\nmodule.exports = wasm;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/highlight.js/lib/languages/wasm.js"],"names":["wasm","hljs","regex","BLOCK_COMMENT","COMMENT","contains","push","LINE_COMMENT","KWS","FUNCTION_REFERENCE","begin","className","ARGUMENT","PARENS","match","relevance","NUMBER","TYPE","MATH_OPERATIONS","OFFSET_ALIGN","name","keywords","$pattern","keyword","QUOTE_STRING_MODE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClBA,EAAAA,IAAI,CAACC,KAAL;AACA,QAAMC,aAAa,GAAGF,IAAI,CAACG,OAAL,CAAa,KAAb,EAAoB,KAApB,CAAtB;AACAD,EAAAA,aAAa,CAACE,QAAd,CAAuBC,IAAvB,CAA4B,MAA5B;AACA,QAAMC,YAAY,GAAGN,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAArB;AAEA,QAAMI,GAAG,GAAG,CACV,SADU,EAEV,OAFU,EAGV,IAHU,EAIV,OAJU,EAKV,UALU,EAMV,MANU,EAOV,eAPU,EAQV,MARU,EASV,MATU,EAUV,MAVU,EAWV,MAXU,EAYV,KAZU,EAaV,QAbU,EAcV,MAdU,EAeV,YAfU,EAgBV,YAhBU,EAiBV,WAjBU,EAkBV,WAlBU,EAmBV,WAnBU,EAoBV,YApBU,EAqBV,WArBU,EAsBV,QAtBU,EAuBV,IAvBU,EAwBV,QAxBU,EAyBV,OAzBU,EA0BV,MA1BU,EA2BV,QA3BU,EA4BV,aA5BU,EA6BV,aA7BU,EA8BV,QA9BU,EA+BV,KA/BU,EAgCV,KAhCU,EAiCV,QAjCU,EAkCV,OAlCU,EAmCV,QAnCU,EAoCV,QApCU,EAqCV,QArCU,EAsCV,YAtCU,EAuCV,WAvCU,EAwCV,OAxCU,EAyCV,OAzCU,EA0CV,WA1CU,EA2CV,MA3CU,EA4CV,MA5CU,EA6CV,aA7CU,CAAZ;AAgDA,QAAMC,kBAAkB,GAAG;AACzBC,IAAAA,KAAK,EAAE,CACL,6BADK,EAEL,KAFK,EAGL,WAHK,CADkB;AAMzBC,IAAAA,SAAS,EAAE;AACT,SAAG,SADM;AAET,SAAG;AAFM;AANc,GAA3B;AAYA,QAAMC,QAAQ,GAAG;AACfD,IAAAA,SAAS,EAAE,UADI;AAEfD,IAAAA,KAAK,EAAE;AAFQ,GAAjB;AAKA,QAAMG,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAE,eADM;AAEbH,IAAAA,SAAS,EAAE,aAFE;AAGbI,IAAAA,SAAS,EAAE;AAHE,GAAf;AAMA,QAAMC,MAAM,GAAG;AACbL,IAAAA,SAAS,EAAE,QADE;AAEbI,IAAAA,SAAS,EAAE,CAFE;AAGb;AACAD,IAAAA,KAAK,EAAE;AAJM,GAAf;AAOA,QAAMG,IAAI,GAAG;AACX;AACAH,IAAAA,KAAK,EAAE,yBAFI;AAGXH,IAAAA,SAAS,EAAE;AAHA,GAAb;AAMA,QAAMO,eAAe,GAAG;AACtBP,IAAAA,SAAS,EAAE,SADW;AAEtB;AACAG,IAAAA,KAAK,EAAE;AAHe,GAAxB;AAMA,QAAMK,YAAY,GAAG;AACnBL,IAAAA,KAAK,EAAE,CACL,kBADK,EAEL,KAFK,EAGL,GAHK,CADY;AAMnBH,IAAAA,SAAS,EAAE;AACT,SAAG,SADM;AAET,SAAG;AAFM;AANQ,GAArB;AAYA,SAAO;AACLS,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERC,MAAAA,OAAO,EAAEf;AAFD,KAFL;AAMLH,IAAAA,QAAQ,EAAE,CACRE,YADQ,EAERJ,aAFQ,EAGRgB,YAHQ,EAIRP,QAJQ,EAKRC,MALQ,EAMRJ,kBANQ,EAORR,IAAI,CAACuB,iBAPG,EAQRP,IARQ,EASRC,eATQ,EAURF,MAVQ;AANL,GAAP;AAmBD;;AAEDS,MAAM,CAACC,OAAP,GAAiB1B,IAAjB","sourcesContent":["/*\nLanguage: WebAssembly\nWebsite: https://webassembly.org\nDescription:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\nCategory: web\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction wasm(hljs) {\n  hljs.regex;\n  const BLOCK_COMMENT = hljs.COMMENT(/\\(;/, /;\\)/);\n  BLOCK_COMMENT.contains.push(\"self\");\n  const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);\n\n  const KWS = [\n    \"anyfunc\",\n    \"block\",\n    \"br\",\n    \"br_if\",\n    \"br_table\",\n    \"call\",\n    \"call_indirect\",\n    \"data\",\n    \"drop\",\n    \"elem\",\n    \"else\",\n    \"end\",\n    \"export\",\n    \"func\",\n    \"global.get\",\n    \"global.set\",\n    \"local.get\",\n    \"local.set\",\n    \"local.tee\",\n    \"get_global\",\n    \"get_local\",\n    \"global\",\n    \"if\",\n    \"import\",\n    \"local\",\n    \"loop\",\n    \"memory\",\n    \"memory.grow\",\n    \"memory.size\",\n    \"module\",\n    \"mut\",\n    \"nop\",\n    \"offset\",\n    \"param\",\n    \"result\",\n    \"return\",\n    \"select\",\n    \"set_global\",\n    \"set_local\",\n    \"start\",\n    \"table\",\n    \"tee_local\",\n    \"then\",\n    \"type\",\n    \"unreachable\"\n  ];\n\n  const FUNCTION_REFERENCE = {\n    begin: [\n      /(?:func|call|call_indirect)/,\n      /\\s+/,\n      /\\$[^\\s)]+/\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    }\n  };\n\n  const ARGUMENT = {\n    className: \"variable\",\n    begin: /\\$[\\w_]+/\n  };\n\n  const PARENS = {\n    match: /(\\((?!;)|\\))+/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n\n  const NUMBER = {\n    className: \"number\",\n    relevance: 0,\n    // borrowed from Prism, TODO: split out into variants\n    match: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/\n  };\n\n  const TYPE = {\n    // look-ahead prevents us from gobbling up opcodes\n    match: /(i32|i64|f32|f64)(?!\\.)/,\n    className: \"type\"\n  };\n\n  const MATH_OPERATIONS = {\n    className: \"keyword\",\n    // borrowed from Prism, TODO: split out into variants\n    match: /\\b(f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))\\b/\n  };\n\n  const OFFSET_ALIGN = {\n    match: [\n      /(?:offset|align)/,\n      /\\s*/,\n      /=/\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"operator\"\n    }\n  };\n\n  return {\n    name: 'WebAssembly',\n    keywords: {\n      $pattern: /[\\w.]+/,\n      keyword: KWS\n    },\n    contains: [\n      LINE_COMMENT,\n      BLOCK_COMMENT,\n      OFFSET_ALIGN,\n      ARGUMENT,\n      PARENS,\n      FUNCTION_REFERENCE,\n      hljs.QUOTE_STRING_MODE,\n      TYPE,\n      MATH_OPERATIONS,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = wasm;\n"]},"metadata":{},"sourceType":"script"}