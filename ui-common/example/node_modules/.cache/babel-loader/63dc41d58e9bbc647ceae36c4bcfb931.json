{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar field_descriptor_1 = require(\"./field-descriptor\");\n\nvar ProtoBufField =\n/** @class */\nfunction () {\n  function ProtoBufField(fieldNumber, type, values) {\n    this.fieldNumber = fieldNumber;\n    this.type = type;\n    this.values = values;\n  } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\n  ProtoBufField.prototype.toSimple = function (prefix) {\n    prefix = prefix !== null && prefix !== void 0 ? prefix : '';\n\n    if (this.type != field_descriptor_1.default.TYPE_MESSAGE) {\n      // Values of a protobuf field of type other than message are never protobuf fields\n      var fieldName_1 = this.toFieldName(prefix);\n      var content = this.values.length > 1 ? this.values : this.values[0];\n      var ret_1 = {};\n      ret_1[fieldName_1] = content;\n      return ret_1;\n    }\n\n    var newPrefix = this.fieldNumber > 0 ? \"\" + prefix + this.fieldNumber + \".\" : '';\n    var submsgsMerged = {};\n    this.values.forEach(function (value) {\n      var submsg = value.toSimple(newPrefix); // Each sub-message has exactly 1 item because it represents 1 protobuf message.\n\n      var fieldName = Object.keys(submsg)[0];\n      var valuesToAdd = submsg[fieldName];\n\n      if (!(fieldName in submsgsMerged)) {\n        submsgsMerged[fieldName] = valuesToAdd;\n      } else if (!Array.isArray(submsgsMerged[fieldName])) {\n        submsgsMerged[fieldName] = [submsgsMerged[fieldName], valuesToAdd];\n      } else {\n        submsgsMerged[fieldName].push(valuesToAdd);\n      }\n    });\n\n    if (this.fieldNumber === 0) {\n      return submsgsMerged;\n    }\n\n    var ret = {};\n    var fieldName = this.toFieldName(prefix);\n    ret[fieldName] = submsgsMerged;\n    return ret;\n  };\n\n  ProtoBufField.prototype.toFieldName = function (prefix) {\n    return \"field_\" + prefix + this.fieldNumber;\n  };\n\n  return ProtoBufField;\n}();\n\nexports.default = ProtoBufField;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/protobuf-decoder/lib/protobuf-field.js"],"names":["Object","defineProperty","exports","value","field_descriptor_1","require","ProtoBufField","fieldNumber","type","values","prototype","toSimple","prefix","default","TYPE_MESSAGE","fieldName_1","toFieldName","content","length","ret_1","newPrefix","submsgsMerged","forEach","submsg","fieldName","keys","valuesToAdd","Array","isArray","push","ret"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAIC,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,CAAuBC,WAAvB,EAAoCC,IAApC,EAA0CC,MAA1C,EAAkD;AAC9C,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH,GAL0C,CAM3C;;;AACAH,EAAAA,aAAa,CAACI,SAAd,CAAwBC,QAAxB,GAAmC,UAAUC,MAAV,EAAkB;AACjDA,IAAAA,MAAM,GAAGA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,EAAzD;;AACA,QAAI,KAAKJ,IAAL,IAAaJ,kBAAkB,CAACS,OAAnB,CAA2BC,YAA5C,EAA0D;AACtD;AACA,UAAIC,WAAW,GAAG,KAAKC,WAAL,CAAiBJ,MAAjB,CAAlB;AACA,UAAIK,OAAO,GAAI,KAAKR,MAAL,CAAYS,MAAZ,GAAqB,CAArB,GAAyB,KAAKT,MAA9B,GAAuC,KAAKA,MAAL,CAAY,CAAZ,CAAtD;AACA,UAAIU,KAAK,GAAG,EAAZ;AACAA,MAAAA,KAAK,CAACJ,WAAD,CAAL,GAAqBE,OAArB;AACA,aAAOE,KAAP;AACH;;AACD,QAAIC,SAAS,GAAG,KAAKb,WAAL,GAAmB,CAAnB,GAAuB,KAAKK,MAAL,GAAc,KAAKL,WAAnB,GAAiC,GAAxD,GAA8D,EAA9E;AACA,QAAIc,aAAa,GAAG,EAApB;AACA,SAAKZ,MAAL,CAAYa,OAAZ,CAAoB,UAAUnB,KAAV,EAAiB;AACjC,UAAIoB,MAAM,GAAGpB,KAAK,CAACQ,QAAN,CAAeS,SAAf,CAAb,CADiC,CAEjC;;AACA,UAAII,SAAS,GAAGxB,MAAM,CAACyB,IAAP,CAAYF,MAAZ,EAAoB,CAApB,CAAhB;AACA,UAAIG,WAAW,GAAGH,MAAM,CAACC,SAAD,CAAxB;;AACA,UAAI,EAAEA,SAAS,IAAIH,aAAf,CAAJ,EAAmC;AAC/BA,QAAAA,aAAa,CAACG,SAAD,CAAb,GAA2BE,WAA3B;AACH,OAFD,MAGK,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcP,aAAa,CAACG,SAAD,CAA3B,CAAL,EAA8C;AAC/CH,QAAAA,aAAa,CAACG,SAAD,CAAb,GAA2B,CAACH,aAAa,CAACG,SAAD,CAAd,EAA2BE,WAA3B,CAA3B;AACH,OAFI,MAGA;AACDL,QAAAA,aAAa,CAACG,SAAD,CAAb,CAAyBK,IAAzB,CAA8BH,WAA9B;AACH;AACJ,KAdD;;AAeA,QAAI,KAAKnB,WAAL,KAAqB,CAAzB,EAA4B;AACxB,aAAOc,aAAP;AACH;;AACD,QAAIS,GAAG,GAAG,EAAV;AACA,QAAIN,SAAS,GAAG,KAAKR,WAAL,CAAiBJ,MAAjB,CAAhB;AACAkB,IAAAA,GAAG,CAACN,SAAD,CAAH,GAAiBH,aAAjB;AACA,WAAOS,GAAP;AACH,GAlCD;;AAmCAxB,EAAAA,aAAa,CAACI,SAAd,CAAwBM,WAAxB,GAAsC,UAAUJ,MAAV,EAAkB;AACpD,WAAO,WAAWA,MAAX,GAAoB,KAAKL,WAAhC;AACH,GAFD;;AAGA,SAAOD,aAAP;AACH,CA9CkC,EAAnC;;AA+CAJ,OAAO,CAACW,OAAR,GAAkBP,aAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar field_descriptor_1 = require(\"./field-descriptor\");\nvar ProtoBufField = /** @class */ (function () {\n    function ProtoBufField(fieldNumber, type, values) {\n        this.fieldNumber = fieldNumber;\n        this.type = type;\n        this.values = values;\n    }\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    ProtoBufField.prototype.toSimple = function (prefix) {\n        prefix = prefix !== null && prefix !== void 0 ? prefix : '';\n        if (this.type != field_descriptor_1.default.TYPE_MESSAGE) {\n            // Values of a protobuf field of type other than message are never protobuf fields\n            var fieldName_1 = this.toFieldName(prefix);\n            var content = (this.values.length > 1 ? this.values : this.values[0]);\n            var ret_1 = {};\n            ret_1[fieldName_1] = content;\n            return ret_1;\n        }\n        var newPrefix = this.fieldNumber > 0 ? \"\" + prefix + this.fieldNumber + \".\" : '';\n        var submsgsMerged = {};\n        this.values.forEach(function (value) {\n            var submsg = value.toSimple(newPrefix);\n            // Each sub-message has exactly 1 item because it represents 1 protobuf message.\n            var fieldName = Object.keys(submsg)[0];\n            var valuesToAdd = submsg[fieldName];\n            if (!(fieldName in submsgsMerged)) {\n                submsgsMerged[fieldName] = valuesToAdd;\n            }\n            else if (!Array.isArray(submsgsMerged[fieldName])) {\n                submsgsMerged[fieldName] = [submsgsMerged[fieldName], valuesToAdd];\n            }\n            else {\n                submsgsMerged[fieldName].push(valuesToAdd);\n            }\n        });\n        if (this.fieldNumber === 0) {\n            return submsgsMerged;\n        }\n        var ret = {};\n        var fieldName = this.toFieldName(prefix);\n        ret[fieldName] = submsgsMerged;\n        return ret;\n    };\n    ProtoBufField.prototype.toFieldName = function (prefix) {\n        return \"field_\" + prefix + this.fieldNumber;\n    };\n    return ProtoBufField;\n}());\nexports.default = ProtoBufField;\n"]},"metadata":{},"sourceType":"script"}