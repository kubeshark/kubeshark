{"ast":null,"code":"'use strict';\n\nmodule.exports = excelFormula;\nexcelFormula.displayName = 'excelFormula';\nexcelFormula.aliases = [];\n\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  };\n  Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/excel-formula.js"],"names":["module","exports","excelFormula","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","string","reference","alias","inside","operator","punctuation","sheet","file","path","range","cell","column","row","number","boolean"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAA,YAAY,CAACC,WAAb,GAA2B,cAA3B;AACAD,YAAY,CAACE,OAAb,GAAuB,EAAvB;;AACA,SAASF,YAAT,CAAsBG,KAAtB,EAA6B;AAC3BA,EAAAA,KAAK,CAACC,SAAN,CAAgB,eAAhB,IAAmC;AACjCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,oCADF;AAEPC,MAAAA,UAAU,EAAE,IAFL;AAGPC,MAAAA,MAAM,EAAE;AAHD,KADwB;AAMjCC,IAAAA,MAAM,EAAE;AACNH,MAAAA,OAAO,EAAE,qBADH;AAENE,MAAAA,MAAM,EAAE;AAFF,KANyB;AAUjCE,IAAAA,SAAS,EAAE;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,MAAAA,OAAO,EACL,sEATO;AAUTE,MAAAA,MAAM,EAAE,IAVC;AAWTG,MAAAA,KAAK,EAAE,QAXE;AAYTC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,IADJ;AAENC,QAAAA,WAAW,EAAE,GAFP;AAGNC,QAAAA,KAAK,EAAE;AACLT,UAAAA,OAAO,EAAE,UADJ;AAELK,UAAAA,KAAK,EAAE;AAFF,SAHD;AAONK,QAAAA,IAAI,EAAE;AACJV,UAAAA,OAAO,EAAE,cADL;AAEJM,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE;AADP;AAFJ,SAPA;AAaNG,QAAAA,IAAI,EAAE;AAbA;AAZC,KAVsB;AAsCjC,qBAAiB;AACfX,MAAAA,OAAO,EAAE,mBADM;AAEfK,MAAAA,KAAK,EAAE;AAFQ,KAtCgB;AA0CjCO,IAAAA,KAAK,EAAE;AACLZ,MAAAA,OAAO,EACL,sEAFG;AAGLK,MAAAA,KAAK,EAAE,UAHF;AAILC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,GADJ;AAENM,QAAAA,IAAI,EAAE,kBAFA;AAGNC,QAAAA,MAAM,EAAE,YAHF;AAINC,QAAAA,GAAG,EAAE;AAJC;AAJH,KA1C0B;AAqDjCF,IAAAA,IAAI,EAAE;AACJ;AACA;AACAb,MAAAA,OAAO,EAAE,sDAHL;AAIJK,MAAAA,KAAK,EAAE;AAJH,KArD2B;AA2DjCW,IAAAA,MAAM,EAAE,8CA3DyB;AA4DjCC,IAAAA,OAAO,EAAE,qBA5DwB;AA6DjCV,IAAAA,QAAQ,EAAE,wBA7DuB;AA8DjCC,IAAAA,WAAW,EAAE;AA9DoB,GAAnC;AAgEAX,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAhB,IAA0BD,KAAK,CAACC,SAAN,CAAgB,KAAhB,IACxBD,KAAK,CAACC,SAAN,CAAgB,eAAhB,CADF;AAED","sourcesContent":["'use strict'\n\nmodule.exports = excelFormula\nexcelFormula.displayName = 'excelFormula'\nexcelFormula.aliases = []\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern:\n        /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern:\n        /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  }\n  Prism.languages['xlsx'] = Prism.languages['xls'] =\n    Prism.languages['excel-formula']\n}\n"]},"metadata":{},"sourceType":"script"}