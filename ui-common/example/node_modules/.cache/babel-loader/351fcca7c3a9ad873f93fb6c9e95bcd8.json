{"ast":null,"code":"// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js"],"names":["React","ReactDOM","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","handleBlurVisible","window","clearTimeout","setTimeout","useIsFocusVisible","ref","useCallback","instance","findDOMNode","ownerDocument","process","env","NODE_ENV","useDebugValue","onBlurVisible"],"mappings":"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","sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}"]},"metadata":{},"sourceType":"module"}