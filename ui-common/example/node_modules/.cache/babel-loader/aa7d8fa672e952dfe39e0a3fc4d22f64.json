{"ast":null,"code":"'use strict';\n\nmodule.exports = sas;\nsas.displayName = 'sas';\nsas.aliases = [];\n\nfunction sas(Prism) {\n  ;\n\n  (function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source;\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i;\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    };\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    };\n    var macroKeyword = {\n      pattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    };\n    var comment = [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n      lookbehind: true\n    }];\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    };\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/;\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    };\n    var args = {\n      function: func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    };\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var globalStatements = {\n      pattern: /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var actionSets = /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/.source;\n    var casActions = {\n      pattern: RegExp(/(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(/<act>/g, function () {\n        return actionSets;\n      }), 'i'),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(/(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n          return actionSets;\n        }), 'i'),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        function: func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    };\n    var keywords = {\n      pattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    };\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(/^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern: /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern: /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          function: func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(/(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(/<str>/g, function () {\n          return stringPattern;\n        }), 'im'),\n        lookbehind: true,\n        inside: args\n      },\n\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern: /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      function: func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/sas.js"],"names":["module","exports","sas","displayName","aliases","Prism","stringPattern","source","number","numericConstant","pattern","RegExp","alias","macroVariable","macroKeyword","lookbehind","step","comment","string","greedy","punctuation","func","args","function","operator","arg","format","inside","keyword","equals","altformat","globalStatements","submitStatement","actionSets","casActions","replace","action","argument","keywords","languages","datalines","sql","groovy","lua","statement","rest","macro","input","datetime"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = sas\nsas.displayName = 'sas'\nsas.aliases = []\nfunction sas(Prism) {\n  ;(function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    }\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    }\n    var macroKeyword = {\n      pattern:\n        /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    }\n    var comment = [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n        lookbehind: true\n      }\n    ]\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    }\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    }\n    var args = {\n      function: func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    }\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var globalStatements = {\n      pattern:\n        /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var actionSets =\n      /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/\n        .source\n    var casActions = {\n      pattern: RegExp(\n        /(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(\n          /<act>/g,\n          function () {\n            return actionSets\n          }\n        ),\n        'i'\n      ),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(\n          /(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n            return actionSets\n          }),\n          'i'\n        ),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        function: func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    }\n    var keywords = {\n      pattern:\n        /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    }\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern:\n          /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(\n              /^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern:\n              /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern:\n          /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern:\n          /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern:\n          /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern:\n              /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          function: func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(\n          /(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(\n            /<str>/g,\n            function () {\n              return stringPattern\n            }\n          ),\n          'im'\n        ),\n        lookbehind: true,\n        inside: args\n      },\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern:\n          /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      function: func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}