{"ast":null,"code":"/**\n * @typedef {Object} CoreOptions\n * @property {string[]} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef {Object} FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g, basic);\n\n  if (options.subset || options.escapeOnly) {\n    return value;\n  }\n\n  return value // Surrogate pairs.\n  .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate) // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n  // non-ASCII ones).\n  .replace( // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g, basic);\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n\n  function surrogate(pair, index, all) {\n    return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);\n  }\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n\n\n  function basic(character, index, all) {\n    return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);\n  }\n}\n/**\n * @param {string[]} subset\n * @returns {RegExp}\n */\n\nfunction charactersToExpression(subset) {\n  /** @type {string[]} */\n  const groups = [];\n  let index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g');\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/stringify-entities/lib/core.js"],"names":["core","value","options","replace","subset","charactersToExpression","basic","escapeOnly","surrogate","pair","index","all","format","charCodeAt","character","groups","length","push","RegExp","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8B;AACnCD,EAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CACND,OAAO,CAACE,MAAR,GAAiBC,sBAAsB,CAACH,OAAO,CAACE,MAAT,CAAvC,GAA0D,WADpD,EAENE,KAFM,CAAR;;AAKA,MAAIJ,OAAO,CAACE,MAAR,IAAkBF,OAAO,CAACK,UAA9B,EAA0C;AACxC,WAAON,KAAP;AACD;;AAED,SACEA,KAAK,CACH;AADG,GAEFE,OAFH,CAEW,iCAFX,EAE8CK,SAF9C,EAGE;AACA;AAJF,GAKGL,OALH,EAMI;AACA,8DAPJ,EAQIG,KARJ,CADF;AAaA;AACF;AACA;AACA;AACA;;AACE,WAASE,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqC;AACnC,WAAOT,OAAO,CAACU,MAAR,CACL,CAACH,IAAI,CAACI,UAAL,CAAgB,CAAhB,IAAqB,MAAtB,IAAgC,KAAhC,GACEJ,IAAI,CAACI,UAAL,CAAgB,CAAhB,CADF,GAEE,MAFF,GAGE,OAJG,EAKLF,GAAG,CAACE,UAAJ,CAAeH,KAAK,GAAG,CAAvB,CALK,EAMLR,OANK,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASI,KAAT,CAAeQ,SAAf,EAA0BJ,KAA1B,EAAiCC,GAAjC,EAAsC;AACpC,WAAOT,OAAO,CAACU,MAAR,CACLE,SAAS,CAACD,UAAV,CAAqB,CAArB,CADK,EAELF,GAAG,CAACE,UAAJ,CAAeH,KAAK,GAAG,CAAvB,CAFK,EAGLR,OAHK,CAAP;AAKD;AACF;AAED;AACA;AACA;AACA;;AACA,SAASG,sBAAT,CAAgCD,MAAhC,EAAwC;AACtC;AACA,QAAMW,MAAM,GAAG,EAAf;AACA,MAAIL,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUN,MAAM,CAACY,MAAxB,EAAgC;AAC9BD,IAAAA,MAAM,CAACE,IAAP,CAAYb,MAAM,CAACM,KAAD,CAAN,CAAcP,OAAd,CAAsB,qBAAtB,EAA6C,MAA7C,CAAZ;AACD;;AAED,SAAO,IAAIe,MAAJ,CAAW,QAAQH,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAR,GAA2B,GAAtC,EAA2C,GAA3C,CAAP;AACD","sourcesContent":["/**\n * @typedef {Object} CoreOptions\n * @property {string[]} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef {Object} FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {string[]} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {string[]} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n"]},"metadata":{},"sourceType":"module"}