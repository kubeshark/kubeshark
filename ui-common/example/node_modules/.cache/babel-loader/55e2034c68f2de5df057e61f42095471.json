{"ast":null,"code":"'use strict';\n\nmodule.exports = pug;\npug.displayName = 'pug';\npug.aliases = [];\n\nfunction pug(Prism) {\n  ;\n\n  (function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [// Declaration\n      {\n        pattern: /(^[\\t ]*)mixin .+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^mixin/,\n          function: /\\w+(?=\\s*\\(|\\s*$)/,\n          punctuation: /[(),.]/\n        }\n      }, // Usage\n      {\n        pattern: /(^[\\t ]*)\\+.+/m,\n        lookbehind: true,\n        inside: {\n          name: {\n            pattern: /^\\+\\w+/,\n            alias: 'function'\n          },\n          rest: Prism.languages.javascript\n        }\n      }],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            pattern: /&[^(]+\\([^)]+\\)/,\n            inside: Prism.languages.javascript\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n              },\n              'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[!=(),]+/\n            }\n          }],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [{\n        pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }],\n      punctuation: /[.\\-!=|]+/\n    };\n    var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n    var filters = [{\n      filter: 'atpl',\n      language: 'twig'\n    }, {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n      filter: 'sass',\n      language: 'scss'\n    }, 'stylus'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\n            return filter.filter;\n          }), 'm'),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/pug.js"],"names":["module","exports","pug","displayName","aliases","Prism","languages","comment","pattern","lookbehind","inside","javascript","filter","alias","text","markup","doctype","each","keyword","punctuation","branch","rest","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern:\n          /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern:\n          /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern:\n          /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern:\n          /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: Prism.languages.javascript\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: Prism.languages.javascript\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: Prism.languages.javascript\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern =\n      /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/\n        .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('<filter_name>', function () {\n              return filter.filter\n            }),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}