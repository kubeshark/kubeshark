{"ast":null,"code":"'use strict';\n\nmodule.exports = mongodb;\nmongodb.displayName = 'mongodb';\nmongodb.aliases = [];\n\nfunction mongodb(Prism) {\n  ;\n\n  (function (Prism) {\n    var operators = [// query and projection\n    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update\n    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages\n    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields', // aggregation pipeline operators\n    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd', '$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField', // aggregation pipeline query modifiers\n    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\n    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$');\n    });\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {});\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    });\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n        greedy: true\n      }\n    };\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/mongodb.js"],"names":["module","exports","mongodb","displayName","aliases","Prism","operators","builtinFunctions","map","operator","replace","operatorsSource","join","languages","extend","insertBefore","property","pattern","greedy","inside","keyword","RegExp","string","url","entity","builtin","alias"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = mongodb\nmongodb.displayName = 'mongodb'\nmongodb.aliases = []\nfunction mongodb(Prism) {\n  ;(function (Prism) {\n    var operators = [\n      // query and projection\n      '$eq',\n      '$gt',\n      '$gte',\n      '$in',\n      '$lt',\n      '$lte',\n      '$ne',\n      '$nin',\n      '$and',\n      '$not',\n      '$nor',\n      '$or',\n      '$exists',\n      '$type',\n      '$expr',\n      '$jsonSchema',\n      '$mod',\n      '$regex',\n      '$text',\n      '$where',\n      '$geoIntersects',\n      '$geoWithin',\n      '$near',\n      '$nearSphere',\n      '$all',\n      '$elemMatch',\n      '$size',\n      '$bitsAllClear',\n      '$bitsAllSet',\n      '$bitsAnyClear',\n      '$bitsAnySet',\n      '$comment',\n      '$elemMatch',\n      '$meta',\n      '$slice', // update\n      '$currentDate',\n      '$inc',\n      '$min',\n      '$max',\n      '$mul',\n      '$rename',\n      '$set',\n      '$setOnInsert',\n      '$unset',\n      '$addToSet',\n      '$pop',\n      '$pull',\n      '$push',\n      '$pullAll',\n      '$each',\n      '$position',\n      '$slice',\n      '$sort',\n      '$bit', // aggregation pipeline stages\n      '$addFields',\n      '$bucket',\n      '$bucketAuto',\n      '$collStats',\n      '$count',\n      '$currentOp',\n      '$facet',\n      '$geoNear',\n      '$graphLookup',\n      '$group',\n      '$indexStats',\n      '$limit',\n      '$listLocalSessions',\n      '$listSessions',\n      '$lookup',\n      '$match',\n      '$merge',\n      '$out',\n      '$planCacheStats',\n      '$project',\n      '$redact',\n      '$replaceRoot',\n      '$replaceWith',\n      '$sample',\n      '$set',\n      '$skip',\n      '$sort',\n      '$sortByCount',\n      '$unionWith',\n      '$unset',\n      '$unwind',\n      '$setWindowFields', // aggregation pipeline operators\n      '$abs',\n      '$accumulator',\n      '$acos',\n      '$acosh',\n      '$add',\n      '$addToSet',\n      '$allElementsTrue',\n      '$and',\n      '$anyElementTrue',\n      '$arrayElemAt',\n      '$arrayToObject',\n      '$asin',\n      '$asinh',\n      '$atan',\n      '$atan2',\n      '$atanh',\n      '$avg',\n      '$binarySize',\n      '$bsonSize',\n      '$ceil',\n      '$cmp',\n      '$concat',\n      '$concatArrays',\n      '$cond',\n      '$convert',\n      '$cos',\n      '$dateFromParts',\n      '$dateToParts',\n      '$dateFromString',\n      '$dateToString',\n      '$dayOfMonth',\n      '$dayOfWeek',\n      '$dayOfYear',\n      '$degreesToRadians',\n      '$divide',\n      '$eq',\n      '$exp',\n      '$filter',\n      '$first',\n      '$floor',\n      '$function',\n      '$gt',\n      '$gte',\n      '$hour',\n      '$ifNull',\n      '$in',\n      '$indexOfArray',\n      '$indexOfBytes',\n      '$indexOfCP',\n      '$isArray',\n      '$isNumber',\n      '$isoDayOfWeek',\n      '$isoWeek',\n      '$isoWeekYear',\n      '$last',\n      '$last',\n      '$let',\n      '$literal',\n      '$ln',\n      '$log',\n      '$log10',\n      '$lt',\n      '$lte',\n      '$ltrim',\n      '$map',\n      '$max',\n      '$mergeObjects',\n      '$meta',\n      '$min',\n      '$millisecond',\n      '$minute',\n      '$mod',\n      '$month',\n      '$multiply',\n      '$ne',\n      '$not',\n      '$objectToArray',\n      '$or',\n      '$pow',\n      '$push',\n      '$radiansToDegrees',\n      '$range',\n      '$reduce',\n      '$regexFind',\n      '$regexFindAll',\n      '$regexMatch',\n      '$replaceOne',\n      '$replaceAll',\n      '$reverseArray',\n      '$round',\n      '$rtrim',\n      '$second',\n      '$setDifference',\n      '$setEquals',\n      '$setIntersection',\n      '$setIsSubset',\n      '$setUnion',\n      '$size',\n      '$sin',\n      '$slice',\n      '$split',\n      '$sqrt',\n      '$stdDevPop',\n      '$stdDevSamp',\n      '$strcasecmp',\n      '$strLenBytes',\n      '$strLenCP',\n      '$substr',\n      '$substrBytes',\n      '$substrCP',\n      '$subtract',\n      '$sum',\n      '$switch',\n      '$tan',\n      '$toBool',\n      '$toDate',\n      '$toDecimal',\n      '$toDouble',\n      '$toInt',\n      '$toLong',\n      '$toObjectId',\n      '$toString',\n      '$toLower',\n      '$toUpper',\n      '$trim',\n      '$trunc',\n      '$type',\n      '$week',\n      '$year',\n      '$zip',\n      '$count',\n      '$dateAdd',\n      '$dateDiff',\n      '$dateSubtract',\n      '$dateTrunc',\n      '$getField',\n      '$rand',\n      '$sampleRate',\n      '$setField',\n      '$unsetField', // aggregation pipeline query modifiers\n      '$comment',\n      '$explain',\n      '$hint',\n      '$max',\n      '$maxTimeMS',\n      '$min',\n      '$orderby',\n      '$query',\n      '$returnKey',\n      '$showDiskLoc',\n      '$natural'\n    ]\n    var builtinFunctions = [\n      'ObjectId',\n      'Code',\n      'BinData',\n      'DBRef',\n      'Timestamp',\n      'NumberLong',\n      'NumberDecimal',\n      'MaxKey',\n      'MinKey',\n      'RegExp',\n      'ISODate',\n      'UUID'\n    ]\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$')\n    })\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b'\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {})\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern:\n          /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    })\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern:\n          /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern:\n          /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n        greedy: true\n      }\n    }\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}