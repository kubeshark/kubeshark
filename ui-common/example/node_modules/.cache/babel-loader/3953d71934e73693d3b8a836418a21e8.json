{"ast":null,"code":"'use strict';\n\nmodule.exports = rust;\nrust.displayName = 'rust';\nrust.aliases = [];\n\nfunction rust(Prism) {\n  ;\n\n  (function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment;\n      });\n    }\n\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source;\n    });\n    Prism.languages.rust = {\n      comment: [{\n        pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [{\n        pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n        lookbehind: true,\n        alias: 'namespace'\n      }, {\n        pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n        lookbehind: true,\n        alias: 'namespace',\n        inside: {\n          punctuation: /::/\n        }\n      }],\n      keyword: [// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n      /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n      // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n      /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    };\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n    Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/rust.js"],"names":["module","exports","rust","displayName","aliases","Prism","multilineComment","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","string","char","attribute","alias","inside","rest","variable","punctuation","keyword","function","macro","constant","namespace","number","boolean","operator"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  ;(function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment\n      })\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source\n    })\n    Prism.languages.rust = {\n      comment: [\n        {\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern:\n          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [\n        {\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n          lookbehind: true,\n          alias: 'namespace'\n        },\n        {\n          pattern:\n            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /::/\n          }\n        }\n      ],\n      keyword: [\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n        /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n        /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n      ],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n    Prism.languages.rust['attribute'].inside['string'] =\n      Prism.languages.rust['string']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}