{"ast":null,"code":"'use strict';\n\nvar refractorHaskell = require('./haskell.js');\n\nmodule.exports = idris;\nidris.displayName = 'idris';\nidris.aliases = ['idr'];\n\nfunction idris(Prism) {\n  Prism.register(refractorHaskell);\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword: /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  });\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  });\n  Prism.languages.idr = Prism.languages.idris;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/idris.js"],"names":["refractorHaskell","require","module","exports","idris","displayName","aliases","Prism","register","languages","extend","comment","pattern","keyword","builtin","undefined","insertBefore","lookbehind","inside","punctuation","idr"],"mappings":"AAAA;;AACA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,cAAD,CAA9B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,CAAC,KAAD,CAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,gBAAf;AACAO,EAAAA,KAAK,CAACE,SAAN,CAAgBL,KAAhB,GAAwBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,SAAvB,EAAkC;AACxDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AADF,KAD+C;AAIxDC,IAAAA,OAAO,EACL,iTALsD;AAMxDC,IAAAA,OAAO,EAAEC;AAN+C,GAAlC,CAAxB;AAQAR,EAAAA,KAAK,CAACE,SAAN,CAAgBO,YAAhB,CAA6B,OAA7B,EAAsC,SAAtC,EAAiD;AAC/C,wBAAoB;AAClBJ,MAAAA,OAAO,EAAE,mDADS;AAElBK,MAAAA,UAAU,EAAE,IAFM;AAGlBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAHU;AAD2B,GAAjD;AASAZ,EAAAA,KAAK,CAACE,SAAN,CAAgBW,GAAhB,GAAsBb,KAAK,CAACE,SAAN,CAAgBL,KAAtC;AACD","sourcesContent":["'use strict'\nvar refractorHaskell = require('./haskell.js')\nmodule.exports = idris\nidris.displayName = 'idris'\nidris.aliases = ['idr']\nfunction idris(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword:\n      /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  })\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  })\n  Prism.languages.idr = Prism.languages.idris\n}\n"]},"metadata":{},"sourceType":"script"}