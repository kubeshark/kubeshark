{"ast":null,"code":"'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\n\nfunction http(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n    }\n\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [{\n            pattern: headerValueOf(/Content-Security-Policy/.source),\n            lookbehind: true,\n            alias: ['csp', 'languages-csp'],\n            inside: Prism.languages.csp\n          }, {\n            pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n            lookbehind: true,\n            alias: ['hpkp', 'languages-hpkp'],\n            inside: Prism.languages.hpkp\n          }, {\n            pattern: headerValueOf(/Strict-Transport-Security/.source),\n            lookbehind: true,\n            alias: ['hsts', 'languages-hsts'],\n            inside: Prism.languages.hsts\n          }, {\n            pattern: headerValueOf(/[^:]+/.source),\n            lookbehind: true\n          }],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    }; // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n\n    var options;\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp('(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' + // This is a little interesting:\n          // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n          // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n          // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n          // the body does not start with a [\\w-] character (as headers do).\n          /[^ \\t\\w-][\\s\\S]*/.source, 'i'),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        };\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options);\n    }\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/http.js"],"names":["module","exports","http","displayName","aliases","Prism","headerValueOf","name","RegExp","languages","pattern","inside","method","alias","lookbehind","uri","header","source","csp","hpkp","hsts","punctuation","langs","httpLanguages","javascript","json","xml","html","css","plain","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","insertBefore"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}