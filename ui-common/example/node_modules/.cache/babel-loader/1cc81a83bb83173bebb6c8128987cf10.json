{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { alpha } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","refType","SwitchBase","CheckBoxOutlineBlankIcon","CheckBoxIcon","alpha","IndeterminateCheckBoxIcon","capitalize","withStyles","styles","theme","root","color","palette","text","secondary","checked","disabled","indeterminate","colorPrimary","primary","main","backgroundColor","action","hoverOpacity","colorSecondary","defaultCheckedIcon","createElement","defaultIcon","defaultIndeterminateIcon","Checkbox","forwardRef","props","ref","_props$checkedIcon","checkedIcon","classes","_props$color","_props$icon","icon","iconProp","_props$indeterminate","_props$indeterminateI","indeterminateIcon","indeterminateIconProp","inputProps","_props$size","size","other","type","concat","cloneElement","fontSize","undefined","process","env","NODE_ENV","propTypes","bool","node","object","oneOf","disableRipple","id","string","inputRef","onChange","func","required","value","any","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { alpha } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);\nvar defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  var icon = indeterminate ? indeterminateIconProp : iconProp;\n  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  return /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: icon.props.fontSize === undefined && size === \"small\" ? size : icon.props.fontSize\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: indeterminateIcon.props.fontSize === undefined && size === \"small\" ? size : indeterminateIcon.props.fontSize\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"]},"metadata":{},"sourceType":"module"}