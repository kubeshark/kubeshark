{"ast":null,"code":"var _jsxFileName = \"/Users/leon/lib-test/liraz-test/example/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport TrafficViewer from 'liraz-test';\nimport \"liraz-test/dist/index.css\";\nimport Api from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api = Api.getInstance();\nvar WebSocketReadyState;\n\n(function (WebSocketReadyState) {\n  WebSocketReadyState[WebSocketReadyState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n  WebSocketReadyState[WebSocketReadyState[\"OPEN\"] = 1] = \"OPEN\";\n  WebSocketReadyState[WebSocketReadyState[\"CLOSING\"] = 2] = \"CLOSING\";\n  WebSocketReadyState[WebSocketReadyState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(WebSocketReadyState || (WebSocketReadyState = {}));\n\nconst App = () => {\n  _s();\n\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [isOpen, setisOpen] = useState(false);\n  const ws = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TrafficViewer, {\n      message: {},\n      isOpen: false,\n      closeWs: function () {},\n      sendQuery: function () {},\n      openSocket: function () {},\n      trafficViewerApiProp: api\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"ntyXkez9/bAT47ejjuEWobAF1fo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/example/src/App.tsx"],"names":["TrafficViewer","Api","api","getInstance","WebSocketReadyState","App","message","setMessage","useState","error","setError","isOpen","setisOpen","ws","useRef"],"mappings":";;;AACA,OAAOA,aAAP,MAA0B,YAA1B;AACA,OAAO,2BAAP;AAEA,OAAOC,GAAP,MAA6C,OAA7C;;;AAEA,MAAMC,GAAG,GAAGD,GAAG,CAACE,WAAJ,EAAZ;IACKC,mB;;WAAAA,mB;AAAAA,EAAAA,mB,CAAAA,mB;AAAAA,EAAAA,mB,CAAAA,mB;AAAAA,EAAAA,mB,CAAAA,mB;AAAAA,EAAAA,mB,CAAAA,mB;GAAAA,mB,KAAAA,mB;;AAQL,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMK,EAAE,GAAGC,MAAM,CAAC,IAAD,CAAjB;AAEA,sBAAO;AAAA,2BAEL,QAAC,aAAD;AAAe,MAAA,OAAO,EAAE,EAAxB;AAA4B,MAAA,MAAM,EAAE,KAApC;AAA2C,MAAA,OAAO,EAAE,YAAkB,CAErE,CAFD;AAEI,MAAA,SAAS,EAAE,YAAkB,CAEhC,CAJD;AAII,MAAA,UAAU,EAAE,YAAkB,CAEjC,CAND;AAMI,MAAA,oBAAoB,EAAEZ;AAN1B;AAAA;AAAA;AAAA;AAAA;AAFK,mBAAP;AAUD,CAhBD;;GAAMG,G;;KAAAA,G;AAkBN,eAAeA,GAAf","sourcesContent":["\nimport TrafficViewer from 'liraz-test';\nimport \"liraz-test/dist/index.css\"\n\nimport Api, {MizuWebsocketURL,getToken} from \"./api\";\n\nconst api = Api.getInstance()\nenum WebSocketReadyState{\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED\n}\n\n\nconst App = () => {\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [isOpen, setisOpen] = useState(false);\n  const ws = useRef(null);\n\n  return <>\n\n    <TrafficViewer message={{}} isOpen={false} closeWs={function (): void {\n      \n    } } sendQuery={function (): void {\n      \n    } } openSocket={function (): void {\n      \n    } } trafficViewerApiProp={api} ></TrafficViewer>\n  </>\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}