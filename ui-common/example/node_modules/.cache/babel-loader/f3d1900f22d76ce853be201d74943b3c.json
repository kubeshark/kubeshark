{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = ftl;\nftl.displayName = 'ftl';\nftl.aliases = [];\n\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/.source;\n\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      });\n    }\n\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [{\n        // raw string\n        pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n        greedy: true\n      }, {\n        pattern: RegExp(/(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(/<expr>/g, function () {\n          return FTL_EXPR;\n        })),\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: RegExp(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(/<expr>/g, function () {\n              return FTL_EXPR;\n            })),\n            lookbehind: true,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              rest: null\n            }\n          }\n        }\n      }],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator: /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    };\n    ftl.string[1].inside.interpolation.inside.rest = ftl;\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(/<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(/<expr>/g, function () {\n        return FTL_EXPR;\n      }), 'gi');\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'ftl', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/ftl.js"],"names":["refractorMarkupTemplating","require","module","exports","ftl","displayName","aliases","Prism","register","FTL_EXPR","source","i","replace","comment","string","pattern","greedy","RegExp","inside","interpolation","lookbehind","alias","rest","keyword","boolean","function","number","operator","punctuation","languages","directive","content","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}