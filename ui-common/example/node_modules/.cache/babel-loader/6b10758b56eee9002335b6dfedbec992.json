{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\nimport { stringifyPosition } from 'unist-util-stringify-position';\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null];\n    /** @type {Position} */\n\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    super();\n\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':');\n\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position;\n        }\n      } // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place;\n      } // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place;\n      }\n    } // Fields from `Error`\n\n\n    this.name = stringifyPosition(place) || '1:1';\n    this.message = typeof reason === 'object' ? reason.message : reason;\n    this.stack = typeof reason === 'object' ? reason.stack : '';\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n\n    this.reason = this.message;\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.fatal;\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n\n    this.line = position.start.line;\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n\n    this.column = position.start.column;\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n\n    this.source = parts[0];\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n\n    this.ruleId = parts[1];\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n\n    this.position = position; // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n\n    this.actual;\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n\n    this.expected;\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n\n    this.file;\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n\n    this.url;\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n\n    this.note;\n    /* eslint-enable no-unused-expressions */\n  }\n\n}\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/vfile-message/index.js"],"names":["stringifyPosition","VFileMessage","Error","constructor","reason","place","origin","parts","position","start","line","column","end","undefined","index","indexOf","slice","name","message","stack","fatal","source","ruleId","actual","expected","file","url","note","prototype"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n"]},"metadata":{},"sourceType":"module"}