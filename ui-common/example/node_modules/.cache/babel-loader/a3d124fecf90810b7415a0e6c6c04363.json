{"ast":null,"code":"'use strict';\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n\nfunction markdown(Prism) {\n  ;\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\n      }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, ''); // decode known entities\n\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase();\n\n        if (code[0] === '#') {\n          var value;\n\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16);\n          } else {\n            value = Number(code.slice(1));\n          }\n\n          return fromCodePoint(value);\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code];\n\n          if (known) {\n            return known;\n          } // unable to decode\n\n\n          return m;\n        }\n      });\n      return text;\n    }\n\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/markdown.js"],"names":["module","exports","markdown","displayName","aliases","Prism","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","lookbehind","greedy","inside","punctuation","alias","yaml","blockquote","table","code","title","hr","list","variable","string","bold","content","italic","strike","url","operator","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","push","classes","cls","match","grammar","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","highlight","textContent","value","tagPattern","markup","tag","KNOWN_ENTITY_NAMES","amp","lt","gt","quot","fromCodePoint","String","fromCharCode","html","text","m","parseInt","slice","Number","known","md"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow =\n      /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n        /__/g,\n        function () {\n          return tableCell\n        }\n      )\n    var tableLine =\n      /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n        .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern:\n            /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern:\n          /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string:\n            /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern:\n          /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (\n        inside\n      ) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        env.content = Prism.highlight(\n          textContent(env.content.value),\n          grammar,\n          codeLang\n        )\n      }\n    })\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi')\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    } // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, '') // decode known entities\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase()\n        if (code[0] === '#') {\n          var value\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16)\n          } else {\n            value = Number(code.slice(1))\n          }\n          return fromCodePoint(value)\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code]\n          if (known) {\n            return known\n          } // unable to decode\n          return m\n        }\n      })\n      return text\n    }\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}