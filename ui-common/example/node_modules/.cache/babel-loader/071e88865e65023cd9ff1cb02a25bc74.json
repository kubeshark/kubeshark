{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nvar style = {\n  \"loadingOverlayContainer\": \"_LoadingOverlay-module__loadingOverlayContainer__3eijD\",\n  \"loadingOverlaySpinner\": \"_LoadingOverlay-module__loadingOverlaySpinner__bGElx\",\n  \"rotation\": \"_LoadingOverlay-module__rotation__1jTYC\"\n};\nconst SpinnerShowDelayMs = 350;\n\nconst LoadingOverlay = _ref => {\n  let {\n    delay\n  } = _ref;\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    let isRelevant = true;\n    setTimeout(() => {\n      if (isRelevant) setIsVisible(true);\n    }, delay ?? SpinnerShowDelayMs);\n    return () => isRelevant = false;\n  }, [delay]);\n  return React.createElement(\"div\", {\n    className: style.loadingOverlayContainer,\n    hidden: !isVisible\n  }, React.createElement(\"div\", {\n    className: style.loadingOverlaySpinner\n  }));\n};\n\nexport { LoadingOverlay };","map":{"version":3,"mappings":";;;;;;AAGA,MAAMA,kBAAkB,GAAG,GAA3B;;AAMA,MAAMC,cAAc,GAAkC;AAAA,MAAC;AAACC;AAAD,GAAD;AAElD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,KAAD,CAA1C;AAGAC,WAAS,CAAC;AACN,QAAIC,UAAU,GAAG,IAAjB;AAEAC,cAAU,CAAC;AACP,UAAGD,UAAH,EACIH,YAAY,CAAC,IAAD,CAAZA;AAFE,OAGPF,KAAK,IAAIF,kBAHF,CAAVQ;AAKA,WAAO,MAAMD,UAAU,GAAG,KAA1B;AARK,KASN,CAACL,KAAD,CATM,CAATI;AAWA,SAAOG;AAAKC,aAAS,EAAEC,KAAK,CAACC,uBAAtB;AAA+CC,UAAM,EAAE,CAACV;AAAxD,KACHM;AAAKC,aAAS,EAAEC,KAAK,CAACG;AAAtB,IADGL,CAAP;AAhBJ","names":["SpinnerShowDelayMs","LoadingOverlay","delay","isVisible","setIsVisible","useState","useEffect","isRelevant","setTimeout","React","className","style","loadingOverlayContainer","hidden","loadingOverlaySpinner"],"sources":["../src/components/LoadingOverlay.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport style from './style/LoadingOverlay.module.sass';\n\nconst SpinnerShowDelayMs = 350;\n\ninterface LoadingOverlayProps {\n    delay?: number\n}\n\nconst LoadingOverlay: React.FC<LoadingOverlayProps> = ({delay}) => {\n\n    const [isVisible, setIsVisible] = useState(false);\n\n    // @ts-ignore\n    useEffect(() => {\n        let isRelevant = true;\n\n        setTimeout(() => {\n            if(isRelevant)\n                setIsVisible(true);\n        }, delay ?? SpinnerShowDelayMs);\n\n        return () => isRelevant = false;\n    }, [delay]);\n\n    return <div className={style.loadingOverlayContainer} hidden={!isVisible}>\n        <div className={style.loadingOverlaySpinner}/>\n    </div>\n};\n\nexport default LoadingOverlay;\n"]},"metadata":{},"sourceType":"module"}