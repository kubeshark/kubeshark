{"ast":null,"code":"const lineNumberify = function (ast) {\n  let lineNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return ast.reduce(function (result, node) {\n    if (node.type === 'text') {\n      if (node.value.indexOf('\\n') === -1) {\n        node.lineNumber = lineNumber;\n        result.nodes.push(node);\n        return result;\n      }\n\n      const lines = node.value.split('\\n');\n\n      for (let i = 0; i < lines.length; i++) {\n        result.nodes.push({\n          type: 'text',\n          value: i === lines.length - 1 ? lines[i] : lines[i] + '\\n',\n          lineNumber: i === 0 ? lineNumber : ++lineNumber\n        });\n      }\n\n      result.lineNumber = lineNumber;\n      return result;\n    }\n\n    if (node.children) {\n      node.lineNumber = lineNumber;\n      const processed = lineNumberify(node.children, lineNumber);\n      node.children = processed.nodes;\n      result.lineNumber = processed.lineNumber;\n      result.nodes.push(node);\n      return result;\n    }\n\n    result.nodes.push(node);\n    return result;\n  }, {\n    nodes: [],\n    lineNumber: lineNumber\n  });\n};\n\nconst wrapLines = function wrapLines(ast, markers, options) {\n  let i = 0;\n  const wrapped = markers.reduce(function (nodes, marker) {\n    const line = marker.line;\n    const children = [];\n\n    for (; i < ast.length; i++) {\n      if (ast[i].lineNumber < line) {\n        nodes.push(ast[i]);\n        continue;\n      }\n\n      if (ast[i].lineNumber === line) {\n        children.push(ast[i]);\n        continue;\n      }\n\n      if (ast[i].lineNumber > line) {\n        break;\n      }\n    }\n\n    nodes.push({\n      type: 'element',\n      tagName: 'div',\n      properties: {\n        className: [marker.className || options.prefix + 'marker']\n      },\n      children: children,\n      lineNumber: line\n    });\n    return nodes;\n  }, []);\n\n  for (; i < ast.length; i++) {\n    wrapped.push(ast[i]);\n  }\n\n  return wrapped;\n};\n\nconst addMarkers = (ast, options) => {\n  const markers = options.markers.map(marker => {\n    return marker.line ? marker : {\n      line: marker\n    };\n  }).sort((nodeA, nodeB) => {\n    return nodeA.line - nodeB.line;\n  });\n  const numbered = lineNumberify(ast).nodes;\n  const wrapped = wrapLines(numbered, markers, options);\n  return wrapped;\n};\n\nexport default addMarkers;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/react-lowlight/src/addMarkers.js"],"names":["lineNumberify","ast","lineNumber","reduce","result","node","type","value","indexOf","nodes","push","lines","split","i","length","children","processed","wrapLines","markers","options","wrapped","marker","line","tagName","properties","className","prefix","addMarkers","map","sort","nodeA","nodeB","numbered"],"mappings":"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","sourcesContent":["const lineNumberify = (ast, lineNumber = 1) => {\n  return ast.reduce(function (result, node) {\n    if (node.type === 'text') {\n      if (node.value.indexOf('\\n') === -1) {\n        node.lineNumber = lineNumber\n        result.nodes.push(node)\n        return result\n      }\n\n      const lines = node.value.split('\\n')\n      for (let i = 0; i < lines.length; i++) {\n        result.nodes.push({\n          type: 'text',\n          value: i === lines.length - 1 ? lines[i] : lines[i] + '\\n',\n          lineNumber: i === 0 ? lineNumber : ++lineNumber\n        })\n      }\n\n      result.lineNumber = lineNumber\n      return result\n    }\n\n    if (node.children) {\n      node.lineNumber = lineNumber\n      const processed = lineNumberify(node.children, lineNumber)\n      node.children = processed.nodes\n      result.lineNumber = processed.lineNumber\n      result.nodes.push(node)\n      return result\n    }\n\n    result.nodes.push(node)\n    return result\n  }, { nodes: [], lineNumber: lineNumber })\n}\n\nconst wrapLines = function wrapLines (ast, markers, options) {\n  let i = 0\n\n  const wrapped = markers.reduce(function (nodes, marker) {\n    const line = marker.line\n    const children = []\n    for (; i < ast.length; i++) {\n      if (ast[i].lineNumber < line) {\n        nodes.push(ast[i])\n        continue\n      }\n\n      if (ast[i].lineNumber === line) {\n        children.push(ast[i])\n        continue\n      }\n\n      if (ast[i].lineNumber > line) {\n        break\n      }\n    }\n\n    nodes.push({\n      type: 'element',\n      tagName: 'div',\n      properties: { className: [marker.className || (options.prefix + 'marker')] },\n      children: children,\n      lineNumber: line\n    })\n\n    return nodes\n  }, [])\n\n  for (; i < ast.length; i++) {\n    wrapped.push(ast[i])\n  }\n\n  return wrapped\n}\n\nconst addMarkers = (ast, options) => {\n  const markers = options.markers.map((marker) => {\n    return marker.line ? marker : { line: marker }\n  }).sort((nodeA, nodeB) => {\n    return nodeA.line - nodeB.line\n  })\n\n  const numbered = lineNumberify(ast).nodes\n  const wrapped = wrapLines(numbered, markers, options)\n  return wrapped\n}\n\nexport default addMarkers\n"]},"metadata":{},"sourceType":"module"}