{"ast":null,"code":"import * as axios from \"axios\";\nexport const MizuWebsocketURL = process.env.REACT_APP_OVERRIDE_WS_URL ? process.env.REACT_APP_OVERRIDE_WS_URL : window.location.protocol === 'https:' ? `wss://${window.location.host}/ws` : `ws://${window.location.host}/ws`;\nexport const FormValidationErrorType = \"formError\";\nconst CancelToken = axios.CancelToken;\nconst apiURL = process.env.REACT_APP_OVERRIDE_API_URL ? process.env.REACT_APP_OVERRIDE_API_URL : `${window.location.origin}/`;\nlet token = null;\nlet client = null;\nlet source = null;\nexport default class Api {\n  static getInstance() {\n    if (!Api.instance) {\n      Api.instance = new Api();\n    }\n\n    return Api.instance;\n  }\n\n  constructor() {\n    this.serviceMapStatus = async () => {\n      const response = await client.get(\"/servicemap/status\");\n      return response.data;\n    };\n\n    this.serviceMapData = async () => {\n      const response = await client.get(`/servicemap/get`);\n      return response.data;\n    };\n\n    this.serviceMapReset = async () => {\n      const response = await client.get(`/servicemap/reset`);\n      return response.data;\n    };\n\n    this.tapStatus = async () => {\n      const response = await client.get(\"/status/tap\");\n      return response.data;\n    };\n\n    this.getUsers = async function () {\n      let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      const response = await client.get(`/user/listUsers?usernameFilter=${filter}`);\n      return response.data;\n    };\n\n    this.getUserDetails = async userId => {\n      const response = await client.get(`/user/${userId}`);\n      return response.data;\n    };\n\n    this.updateUser = async user => {\n      const response = await client.put(`/user/${user.userId}`, user);\n      return response.data;\n    };\n\n    this.deleteUser = async userId => {\n      const response = await client.delete(`/user/${userId}`);\n      return response.data;\n    };\n\n    this.recoverUser = async data => {\n      const form = new FormData();\n      form.append('password', data.password);\n      form.append('inviteToken', data.inviteToken);\n\n      try {\n        const response = await client.post(`/user/recover`, form);\n        this.persistToken(response.data.token);\n        return response;\n      } catch (e) {\n        if (e.response.status === 400) {\n          const error = {\n            'type': FormValidationErrorType,\n            'messages': e.response.data\n          };\n          throw error;\n        } else {\n          throw e;\n        }\n      }\n    };\n\n    this.inviteExistingUser = async userId => {\n      const response = await client.post(`/user/${userId}/invite`);\n      return response.data;\n    };\n\n    this.genareteInviteLink = async userData => {\n      const response = await client.post(`/user/createUserAndInvite`, userData);\n      return response.data;\n    };\n\n    this.getWorkspaces = async () => {\n      const response = await client.get(`/workspace/`);\n      return response.data;\n    };\n\n    this.getSpecificWorkspace = async workspaceId => {\n      const response = await client.get(`/workspace/${workspaceId}`);\n      return response.data;\n    };\n\n    this.createWorkspace = async (workspaceData, linkUser) => {\n      let path = `/workspace/`;\n\n      if (linkUser) {\n        path = `/workspace/?linkUser=${linkUser}`;\n      }\n\n      const response = await client.post(path, workspaceData);\n      return response.data;\n    };\n\n    this.editWorkspace = async (workspaceId, workspaceData) => {\n      const response = await client.put(`/workspace/${workspaceId}`, workspaceData);\n      return response.data;\n    };\n\n    this.deleteWorkspace = async workspaceId => {\n      const response = await client.delete(`/workspace/${workspaceId}`);\n      return response.data;\n    };\n\n    this.getNamespaces = async () => {\n      const response = await client.get(`/kube/namespaces`);\n      return response.data;\n    };\n\n    this.analyzeStatus = async () => {\n      const response = await client.get(\"/status/analyze\");\n      return response.data;\n    };\n\n    this.getEntry = async (id, query) => {\n      const response = await client.get(`/entries/${id}?query=${query}`);\n      return response.data;\n    };\n\n    this.fetchEntries = async (leftOff, direction, query, limit, timeoutMs) => {\n      const response = await client.get(`/entries/?leftOff=${leftOff}&direction=${direction}&query=${query}&limit=${limit}&timeoutMs=${timeoutMs}`).catch(function (thrown) {\n        console.error(thrown.message);\n        return {};\n      });\n      return response.data;\n    };\n\n    this.getRecentTLSLinks = async () => {\n      const response = await client.get(\"/status/recentTLSLinks\");\n      return response.data;\n    };\n\n    this.getAuthStatus = async () => {\n      const response = await client.get(\"/status/auth\");\n      return response.data;\n    };\n\n    this.getOasServices = async () => {\n      const response = await client.get(\"/oas\");\n      return response.data;\n    };\n\n    this.getOasByService = async selectedService => {\n      const response = await client.get(`/oas/${selectedService}`);\n      return response.data;\n    };\n\n    this.validateQuery = async query => {\n      if (source) {\n        source.cancel();\n      }\n\n      source = CancelToken.source();\n      const form = new FormData();\n      form.append('query', query);\n      const response = await client.post(`/query/validate`, form, {\n        cancelToken: source.token\n      }).catch(function (thrown) {\n        if (!axios.isCancel(thrown)) {\n          console.error('Validate error', thrown.message);\n        }\n      });\n\n      if (!response) {\n        return null;\n      }\n\n      return response.data;\n    };\n\n    this.getServerConfig = async () => {\n      const response = await client.get(\"/config/\");\n      return response.data;\n    };\n\n    this.saveServerConfig = async newConfig => {\n      const response = await client.post(\"/config/\", newConfig);\n      return response.data;\n    };\n\n    this.getDefaultServerConfig = async () => {\n      const response = await client.get(\"/config/defaults\");\n      return response.data;\n    };\n\n    this.getServerMetadata = async () => {\n      const response = await client.get(\"/metadata/\");\n      return response.data;\n    };\n\n    this.isInstallNeeded = async () => {\n      const response = await client.get(\"/install/isNeeded\");\n      return response.data;\n    };\n\n    this.isAuthenticationNeeded = async () => {\n      try {\n        await client.get(\"/user/whoAmI\");\n        return false;\n      } catch (e) {\n        if (e.response.status === 401) {\n          return true;\n        }\n\n        throw e;\n      }\n    };\n\n    this.whoAmI = async () => {\n      const response = await client.get(\"/user/whoAmI\");\n      return response.data;\n    };\n\n    this.setupAdminUser = async password => {\n      const form = new FormData();\n      form.append('password', password);\n\n      try {\n        const response = await client.post(`/install/admin`, form);\n        this.persistToken(response.data.token);\n        return response;\n      } catch (e) {\n        if (e.response.status === 400) {\n          const error = {\n            'type': FormValidationErrorType,\n            'messages': e.response.data\n          };\n          throw error;\n        } else {\n          throw e;\n        }\n      }\n    };\n\n    this.login = async (username, password) => {\n      const form = new FormData();\n      form.append('username', username);\n      form.append('password', password);\n      const response = await client.post(`/user/login`, form);\n\n      if (response.status >= 200 && response.status < 300) {\n        this.persistToken(response.data.token);\n      }\n\n      return response;\n    };\n\n    this.persistToken = tk => {\n      token = tk;\n      client = this.getAxiosClient();\n      localStorage.setItem('token', token);\n    };\n\n    this.logout = async () => {\n      await client.post(`/user/logout`);\n      this.persistToken(null);\n    };\n\n    this.getAxiosClient = () => {\n      const headers = {\n        Accept: \"application/json\"\n      };\n\n      if (token) {\n        headers['x-session-token'] = `${token}`; // we use `x-session-token` instead of `Authorization` because the latter is reserved by kubectl proxy, making mizu view not work\n      }\n\n      return axios.create({\n        baseURL: apiURL,\n        timeout: 31000,\n        headers\n      });\n    };\n\n    token = localStorage.getItem(\"token\");\n    client = this.getAxiosClient();\n    source = null;\n  }\n\n}\nexport function getToken() {\n  return token;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/example/src/api.js"],"names":["axios","MizuWebsocketURL","process","env","REACT_APP_OVERRIDE_WS_URL","window","location","protocol","host","FormValidationErrorType","CancelToken","apiURL","REACT_APP_OVERRIDE_API_URL","origin","token","client","source","Api","getInstance","instance","constructor","serviceMapStatus","response","get","data","serviceMapData","serviceMapReset","tapStatus","getUsers","filter","getUserDetails","userId","updateUser","user","put","deleteUser","delete","recoverUser","form","FormData","append","password","inviteToken","post","persistToken","e","status","error","inviteExistingUser","genareteInviteLink","userData","getWorkspaces","getSpecificWorkspace","workspaceId","createWorkspace","workspaceData","linkUser","path","editWorkspace","deleteWorkspace","getNamespaces","analyzeStatus","getEntry","id","query","fetchEntries","leftOff","direction","limit","timeoutMs","catch","thrown","console","message","getRecentTLSLinks","getAuthStatus","getOasServices","getOasByService","selectedService","validateQuery","cancel","cancelToken","isCancel","getServerConfig","saveServerConfig","newConfig","getDefaultServerConfig","getServerMetadata","isInstallNeeded","isAuthenticationNeeded","whoAmI","setupAdminUser","login","username","tk","getAxiosClient","localStorage","setItem","logout","headers","Accept","create","baseURL","timeout","getItem","getToken"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nexport const MizuWebsocketURL = process.env.REACT_APP_OVERRIDE_WS_URL ? process.env.REACT_APP_OVERRIDE_WS_URL :\n    window.location.protocol === 'https:' ? `wss://${window.location.host}/ws` : `ws://${window.location.host}/ws`;\n\nexport const FormValidationErrorType = \"formError\";\n\nconst CancelToken = axios.CancelToken;\n\nconst apiURL = process.env.REACT_APP_OVERRIDE_API_URL ? process.env.REACT_APP_OVERRIDE_API_URL : `${window.location.origin}/`;\n\nlet token = null\nlet client = null\nlet source = null\n\nexport default class Api {\n    static instance;\n\n    static getInstance() {\n        if (!Api.instance) {\n            Api.instance = new Api();\n        }\n        return Api.instance;\n    }\n\n    constructor() {\n        token = localStorage.getItem(\"token\");\n\n        client = this.getAxiosClient();\n        source = null;\n    }\n\n    serviceMapStatus = async () => {\n        const response = await client.get(\"/servicemap/status\");\n        return response.data;\n    }\n\n    serviceMapData = async () => {\n        const response = await client.get(`/servicemap/get`);\n        return response.data;\n    }\n\n    serviceMapReset = async () => {\n        const response = await client.get(`/servicemap/reset`);\n        return response.data;\n    }\n\n    tapStatus = async () => {\n        const response = await client.get(\"/status/tap\");\n        return response.data;\n    }\n\n    //#region User api\n\n    getUsers = async(filter = \"\") =>{\n        const response = await client.get(`/user/listUsers?usernameFilter=${filter}`);\n        return response.data;\n    }\n\n    getUserDetails = async(userId) => {\n        const response = await client.get(`/user/${userId}`);\n        return response.data;\n    }\n\n    updateUser = async(user) => {\n        const response = await client.put(`/user/${user.userId}`,user);\n        return response.data;\n    }\n\n    deleteUser = async(userId) => {\n        const response = await client.delete(`/user/${userId}`);\n        return response.data;\n    }\n\n    recoverUser = async(data) => {\n        const form = new FormData();\n        form.append('password', data.password);\n        form.append('inviteToken', data.inviteToken);\n\n        try {\n            const response = await client.post(`/user/recover`, form);\n            this.persistToken(response.data.token);\n            return response;\n        } catch (e) {\n            if (e.response.status === 400) {\n                const error = {\n                    'type': FormValidationErrorType,\n                    'messages': e.response.data\n                };\n                throw error;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    inviteExistingUser = async(userId)  =>{\n        const response = await client.post(`/user/${userId}/invite`);\n        return response.data;\n    }\n\n     genareteInviteLink = async(userData)  =>{\n        const response = await client.post(`/user/createUserAndInvite`,userData);\n        return response.data;\n    }\n\n    //#endregion \n\n    //#region Workspace api\n    getWorkspaces = async() =>{\n        const response = await client.get(`/workspace/`);\n        return response.data;\n    }\n\n    getSpecificWorkspace = async(workspaceId) =>{\n        const response = await client.get(`/workspace/${workspaceId}`);\n        return response.data;\n    }\n\n    createWorkspace = async(workspaceData,linkUser) =>{\n        let path = `/workspace/`;\n        if(linkUser){\n            path = `/workspace/?linkUser=${linkUser}`;\n        }\n        const response = await client.post(path,workspaceData);\n        return response.data;\n    }    \n\n    editWorkspace = async(workspaceId, workspaceData) =>{\n        const response = await client.put(`/workspace/${workspaceId}`,workspaceData);\n        return response.data;\n    }   \n\n    deleteWorkspace = async(workspaceId) => {\n        const response = await client.delete(`/workspace/${workspaceId}`);\n        return response.data;\n    }\n\n    getNamespaces = async() =>{\n        const response = await client.get(`/kube/namespaces`);\n        return response.data;\n    }\n\n    //#endregion\n\n    analyzeStatus = async () => {\n        const response = await client.get(\"/status/analyze\");\n        return response.data;\n    }\n\n    getEntry = async (id, query) => {\n        const response = await client.get(`/entries/${id}?query=${query}`);\n        return response.data;\n    }\n\n    fetchEntries = async (leftOff, direction, query, limit, timeoutMs) => {\n        const response = await client.get(`/entries/?leftOff=${leftOff}&direction=${direction}&query=${query}&limit=${limit}&timeoutMs=${timeoutMs}`).catch(function (thrown) {\n            console.error(thrown.message);\n            return {};\n        });\n        return response.data;\n    }\n\n    getRecentTLSLinks = async () => {\n        const response = await client.get(\"/status/recentTLSLinks\");\n        return response.data;\n    }\n\n    getAuthStatus = async () => {\n        const response = await client.get(\"/status/auth\");\n        return response.data;\n    }\n\n    getOasServices = async () => {\n        const response = await client.get(\"/oas\");\n        return response.data;\n    }\n\n    getOasByService = async (selectedService) => {\n        const response = await client.get(`/oas/${selectedService}`);\n        return response.data;\n    }\n\n    validateQuery = async (query) => {\n        if (source) {\n            source.cancel();\n        }\n        source = CancelToken.source();\n\n        const form = new FormData();\n        form.append('query', query)\n        const response = await client.post(`/query/validate`, form, {\n            cancelToken: source.token\n        }).catch(function (thrown) {\n            if (!axios.isCancel(thrown)) {\n                console.error('Validate error', thrown.message);\n            }\n        });\n\n        if (!response) {\n            return null;\n        }\n\n        return response.data;\n    }\n\n    getServerConfig = async () => {\n        const response = await client.get(\"/config/\");\n        return response.data;\n    }\n\n    saveServerConfig = async (newConfig) => {\n        const response = await client.post(\"/config/\", newConfig);\n        return response.data;\n    }\n\n    getDefaultServerConfig = async () => {\n        const response = await client.get(\"/config/defaults\");\n        return response.data;\n    }\n\n    getServerMetadata = async () => {\n        const response = await client.get(\"/metadata/\");\n        return response.data;\n    }\n\n    isInstallNeeded = async () => {\n        const response = await client.get(\"/install/isNeeded\");\n        return response.data;\n    }\n\n    isAuthenticationNeeded = async () => {\n        try {\n            await client.get(\"/user/whoAmI\");\n            return false;\n        } catch (e) {\n            if (e.response.status === 401) {\n                return true;\n            }\n            throw e;\n        }\n    }\n\n    whoAmI = async () => {\n        const response = await client.get(\"/user/whoAmI\");\n        return response.data;\n    }\n\n    setupAdminUser = async (password) => {\n        const form = new FormData();\n        form.append('password', password);\n\n        try {\n            const response = await client.post(`/install/admin`, form);\n            this.persistToken(response.data.token);\n            return response;\n        } catch (e) {\n            if (e.response.status === 400) {\n                const error = {\n                    'type': FormValidationErrorType,\n                    'messages': e.response.data\n                };\n                throw error;\n            } else {\n                throw e;\n            }\n        }\n    }   \n\n    login = async (username, password) => {\n        const form = new FormData();\n        form.append('username', username);\n        form.append('password', password);\n\n        const response = await client.post(`/user/login`, form);\n        if (response.status >= 200 && response.status < 300) {\n            this.persistToken(response.data.token);\n        }\n\n        return response;\n    }\n\n    persistToken = (tk) => {\n        token = tk;\n        client = this.getAxiosClient();\n        localStorage.setItem('token', token);\n    }\n\n    logout = async () => {\n        await client.post(`/user/logout`);\n        this.persistToken(null);\n    }\n\n    getAxiosClient = () => {\n        const headers = {\n            Accept: \"application/json\"\n        }\n\n        if (token) {\n            headers['x-session-token'] = `${token}`; // we use `x-session-token` instead of `Authorization` because the latter is reserved by kubectl proxy, making mizu view not work\n        }\n        return axios.create({\n            baseURL: apiURL,\n            timeout: 31000,\n            headers\n        });\n    }\n}\n\nexport function getToken(){\n    return token\n}"]},"metadata":{},"sourceType":"module"}