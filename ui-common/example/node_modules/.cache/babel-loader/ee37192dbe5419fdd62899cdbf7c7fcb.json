{"ast":null,"code":"'use strict';\n\nmodule.exports = sml;\nsml.displayName = 'sml';\nsml.aliases = ['smlnj'];\n\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment: /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [{\n        // This is only an approximation since the real grammar is context-free\n        //\n        // Why the main loop so complex?\n        // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n        // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n        // followed by a long identifier.\n        pattern: RegExp(/((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source.replace(/<NOT-LAST>/g, function () {\n          return /\\s*(?:[*,]|->)/.source;\n        }).replace(/<TERMINAL>/g, function () {\n          return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/.source;\n        }).replace(/<LONG-ID>/g, function () {\n          return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source;\n        }).replace(/<KEYWORD>/g, function () {\n          return keywords.source;\n        }), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      }, {\n        pattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      }],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    };\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml;\n    Prism.languages.smlnj = Prism.languages.sml;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/sml.js"],"names":["module","exports","sml","displayName","aliases","Prism","keywords","languages","comment","string","pattern","greedy","RegExp","source","replace","lookbehind","inside","function","keyword","variable","number","word","alias","boolean","operator","punctuation","smlnj"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,CAAC,OAAD,CAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClB;AACA;AACA;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,QAAQ,GACV,yPADF;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBL,GAAhB,GAAsB;AACpB;AACAM,MAAAA,OAAO,EACL,2EAHkB;AAIpBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,qBADH;AAENC,QAAAA,MAAM,EAAE;AAFF,OAJY;AAQpB,oBAAc,CACZ;AACE;AACA;AACA;AACA;AACA;AACA;AACAD,QAAAA,OAAO,EAAEE,MAAM,CACb,2HAA2HC,MAA3H,CACGC,OADH,CACW,aADX,EAC0B,YAAY;AAClC,iBAAO,iBAAiBD,MAAxB;AACD,SAHH,EAIGC,OAJH,CAIW,aAJX,EAI0B,YAAY;AAClC,iBAAO,6FACJD,MADH;AAED,SAPH,EAQGC,OARH,CAQW,YARX,EAQyB,YAAY;AACjC,iBAAO,+BAA+BD,MAAtC;AACD,SAVH,EAWGC,OAXH,CAWW,YAXX,EAWyB,YAAY;AACjC,iBAAOR,QAAQ,CAACO,MAAhB;AACD,SAbH,CADa,EAeb,GAfa,CAPjB;AAwBEE,QAAAA,UAAU,EAAE,IAxBd;AAyBEJ,QAAAA,MAAM,EAAE,IAzBV;AA0BEK,QAAAA,MAAM,EAAE,IA1BV,CA0Be;;AA1Bf,OADY,EA6BZ;AACEN,QAAAA,OAAO,EACL,wFAFJ;AAGEK,QAAAA,UAAU,EAAE;AAHd,OA7BY,CARM;AA2CpBE,MAAAA,QAAQ,EAAE;AACRP,QAAAA,OAAO,EAAE,oCADD;AAERK,QAAAA,UAAU,EAAE;AAFJ,OA3CU;AA+CpBG,MAAAA,OAAO,EAAEZ,QA/CW;AAgDpBa,MAAAA,QAAQ,EAAE;AACRT,QAAAA,OAAO,EAAE,mBADD;AAERK,QAAAA,UAAU,EAAE;AAFJ,OAhDU;AAoDpBK,MAAAA,MAAM,EAAE,gDApDY;AAqDpBC,MAAAA,IAAI,EAAE;AACJX,QAAAA,OAAO,EAAE,0BADL;AAEJY,QAAAA,KAAK,EAAE;AAFH,OArDc;AAyDpBC,MAAAA,OAAO,EAAE,qBAzDW;AA0DpBC,MAAAA,QAAQ,EAAE,2CA1DU;AA2DpBC,MAAAA,WAAW,EAAE;AA3DO,KAAtB;AA6DApB,IAAAA,KAAK,CAACE,SAAN,CAAgBL,GAAhB,CAAoB,YAApB,EAAkC,CAAlC,EAAqCc,MAArC,GAA8CX,KAAK,CAACE,SAAN,CAAgBL,GAA9D;AACAG,IAAAA,KAAK,CAACE,SAAN,CAAgBmB,KAAhB,GAAwBrB,KAAK,CAACE,SAAN,CAAgBL,GAAxC;AACD,GAlEA,EAkEEG,KAlEF;AAmEF","sourcesContent":["'use strict'\n\nmodule.exports = sml\nsml.displayName = 'sml'\nsml.aliases = ['smlnj']\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment:\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [\n        {\n          // This is only an approximation since the real grammar is context-free\n          //\n          // Why the main loop so complex?\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n          // followed by a long identifier.\n          pattern: RegExp(\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n              .replace(/<NOT-LAST>/g, function () {\n                return /\\s*(?:[*,]|->)/.source\n              })\n              .replace(/<TERMINAL>/g, function () {\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n                  .source\n              })\n              .replace(/<LONG-ID>/g, function () {\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n              })\n              .replace(/<KEYWORD>/g, function () {\n                return keywords.source\n              }),\n            'i'\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern:\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    }\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n    Prism.languages.smlnj = Prism.languages.sml\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}