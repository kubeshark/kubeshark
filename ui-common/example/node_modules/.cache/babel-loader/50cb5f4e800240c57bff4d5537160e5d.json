{"ast":null,"code":"'use strict';\n\nmodule.exports = smali;\nsmali.displayName = 'smali';\nsmali.aliases = [];\n\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [{\n      // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n      pattern: /([();\\[])[BCDFIJSVZ]+/,\n      lookbehind: true\n    }, {\n      // e.g. .field mWifiOnUid:I\n      pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n      lookbehind: true\n    }],\n    keyword: [{\n      pattern: /(\\.end\\s+)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n      lookbehind: true\n    }],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  };\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/smali.js"],"names":["module","exports","smali","displayName","aliases","Prism","languages","comment","string","pattern","greedy","lookbehind","inside","namespace","punctuation","builtin","keyword","function","field","alias","register","boolean","number","label","operator"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpB;AACA;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtBK,IAAAA,OAAO,EAAE,KADa;AAEtBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,+DADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFc;AAMtB,kBAAc;AACZD,MAAAA,OAAO,EACL,mEAFU;AAGZE,MAAAA,UAAU,EAAE,IAHA;AAIZC,MAAAA,MAAM,EAAE;AACN,sBAAc;AACZH,UAAAA,OAAO,EAAE,gCADG;AAEZE,UAAAA,UAAU,EAAE;AAFA,SADR;AAKNE,QAAAA,SAAS,EAAE;AACTJ,UAAAA,OAAO,EAAE,gCADA;AAETE,UAAAA,UAAU,EAAE,IAFH;AAGTC,UAAAA,MAAM,EAAE;AACNE,YAAAA,WAAW,EAAE;AADP;AAHC,SALL;AAYNC,QAAAA,OAAO,EAAE;AAZH;AAJI,KANQ;AAyBtBA,IAAAA,OAAO,EAAE,CACP;AACE;AACAN,MAAAA,OAAO,EAAE,uBAFX;AAGEE,MAAAA,UAAU,EAAE;AAHd,KADO,EAMP;AACE;AACAF,MAAAA,OAAO,EAAE,sBAFX;AAGEE,MAAAA,UAAU,EAAE;AAHd,KANO,CAzBa;AAqCtBK,IAAAA,OAAO,EAAE,CACP;AACEP,MAAAA,OAAO,EAAE,kBADX;AAEEE,MAAAA,UAAU,EAAE;AAFd,KADO,EAKP;AACEF,MAAAA,OAAO,EAAE,2BADX;AAEEE,MAAAA,UAAU,EAAE;AAFd,KALO,EASP;AACEF,MAAAA,OAAO,EACL,yJAFJ;AAGEE,MAAAA,UAAU,EAAE;AAHd,KATO,CArCa;AAoDtBM,IAAAA,QAAQ,EAAE;AACRR,MAAAA,OAAO,EAAE,oCADD;AAERE,MAAAA,UAAU,EAAE;AAFJ,KApDY;AAwDtBO,IAAAA,KAAK,EAAE;AACLT,MAAAA,OAAO,EAAE,aADJ;AAELU,MAAAA,KAAK,EAAE;AAFF,KAxDe;AA4DtBC,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OAAO,EAAE,6BADD;AAERE,MAAAA,UAAU,EAAE,IAFJ;AAGRQ,MAAAA,KAAK,EAAE;AAHC,KA5DY;AAiEtBE,IAAAA,OAAO,EAAE;AACPZ,MAAAA,OAAO,EAAE,qCADF;AAEPE,MAAAA,UAAU,EAAE;AAFL,KAjEa;AAqEtBW,IAAAA,MAAM,EAAE;AACNb,MAAAA,OAAO,EACL,qJAFI;AAGNE,MAAAA,UAAU,EAAE;AAHN,KArEc;AA0EtBY,IAAAA,KAAK,EAAE;AACLd,MAAAA,OAAO,EAAE,QADJ;AAELE,MAAAA,UAAU,EAAE,IAFP;AAGLQ,MAAAA,KAAK,EAAE;AAHF,KA1Ee;AA+EtBK,IAAAA,QAAQ,EAAE,eA/EY;AAgFtBV,IAAAA,WAAW,EAAE;AAhFS,GAAxB;AAkFD","sourcesContent":["'use strict'\n\nmodule.exports = smali\nsmali.displayName = 'smali'\nsmali.aliases = []\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [\n      {\n        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n        pattern: /([();\\[])[BCDFIJSVZ]+/,\n        lookbehind: true\n      },\n      {\n        // e.g. .field mWifiOnUid:I\n        pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /(\\.end\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern:\n        /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}