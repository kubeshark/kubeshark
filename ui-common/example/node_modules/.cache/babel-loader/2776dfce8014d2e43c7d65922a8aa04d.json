{"ast":null,"code":"'use strict';\n\nmodule.exports = factor;\nfactor.displayName = 'factor';\nfactor.aliases = [];\n\nfunction factor(Prism) {\n  ;\n\n  (function (Prism) {\n    var comment_inside = {\n      function: /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    };\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    };\n    var factor = {\n      comment: [{\n        // ! single-line exclamation point comments with whitespace after/around the !\n        pattern: /(^|\\s)(?:! .*|!$)/,\n        lookbehind: true,\n        inside: comment_inside\n      },\n      /* from basis/multiline: */\n      {\n        // /* comment */, /* comment*/\n        pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }, {\n        // ![[ comment ]] , ![===[ comment]===]\n        pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: comment_inside\n      }],\n      number: [{\n        // basic base 10 integers 9, -9\n        pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n        pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n        pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // positive mixed numbers 23+1/5 +23+1/5\n        pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // negative mixed numbers -23-1/5\n        pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n        // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n        pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n        lookbehind: true\n      }, {\n        // NAN literal syntax NAN: 80000deadbeef, NAN: a\n        pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n        lookbehind: true\n      }, {\n        /*\n        base prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n        \"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\n        The values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n        <https://docs.factorcode.org/content/article-syntax-floats.html>\n        */\n        pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n        lookbehind: true\n      }],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      boolean: {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [{\n        // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n        pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: string_inside.number,\n          // trailing semicolon on its own line\n          'semicolon-or-setlocal': {\n            pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n            lookbehind: true,\n            alias: 'function'\n          }\n        }\n      }, {\n        // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n        pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }, {\n        // [[ string ]], [==[ string]==]\n        pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: string_inside\n      }],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\n      trying to do better is more work and regex-computation-time than it's worth though.\n      - we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n      - we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n      - we'd like if the following variable name conventions were recognised specifically:\n      special row variables = ..a b..\n      type and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\n      word throws unconditional error = *\n      any other word-like variable name = a ? q' etc\n      https://docs.factorcode.org/content/article-effects.html\n      these are pretty complicated to highlight properly without a real parser, and therefore out of scope\n      the old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n      */\n      // current solution is not great\n      'stack-effect-delimiter': [{\n        // opening parenthesis\n        pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // middle --\n        pattern: /(\\s)--(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing parenthesis\n        pattern: /(\\s)\\)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n\n      /*\n      full list of supported word naming conventions: (the convention appears outside of the [brackets])\n      set-[x]\n      change-[x]\n      with-[x]\n      new-[x]\n      >[string]\n      [base]>\n      [string]>[number]\n      +[symbol]+\n      [boolean-word]?\n      ?[of]\n      [slot-reader]>>\n      >>[slot-setter]\n      [slot-writer]<<\n      ([implementation-detail])\n      [mutater]!\n      [variant]*\n      [prettyprint].\n      $[help-markup]\n      <constructors>, SYNTAX:, etc are supported by their own patterns.\n      `with` and `new` from `kernel` are their own builtins.\n      see <https://docs.factorcode.org/content/article-conventions.html>\n      */\n      'conventionally-named-word': {\n        pattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [{\n        // opening\n        pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\}(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [{\n        // opening\n        pattern: /(^|\\s)\\[(?=\\s)/,\n        lookbehind: true,\n        alias: 'operator'\n      }, {\n        // closing\n        pattern: /(\\s)\\](?=\\s|$)/,\n        lookbehind: true,\n        alias: 'operator'\n      }],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n\n      /*\n      basic first-class string \"a\"\n      with escaped double-quote \"a\\\"\"\n      escaped backslash \"\\\\\"\n      and general escapes since Factor has so many \"\\N\"\n      syntax that works in the reference implementation that isn't fully\n      supported because it's an implementation detail:\n      \"string 1\"\"string 2\" -> 2 strings (works anyway)\n      \"string\"5 -> string, 5\n      \"string\"[ ] -> string, quotation\n      { \"a\"} -> array<string>\n      the rest of those examples all properly recognise the string, but not\n      the other object (number, quotation, etc)\n      this is fine for a regex-only implementation.\n      */\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    };\n\n    var escape = function (str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1');\n    };\n\n    var arrToWordsRegExp = function (arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)');\n    };\n\n    var builtins = {\n      'kernel-builtin': ['or', '2nipd', '4drop', 'tuck', 'wrapper', 'nip', 'wrapper?', 'callstack>array', 'die', 'dupd', 'callstack', 'callstack?', '3dup', 'hashcode', 'pick', '4nip', 'build', '>boolean', 'nipd', 'clone', '5nip', 'eq?', '?', '=', 'swapd', '2over', 'clear', '2dup', 'get-retainstack', 'not', 'tuple?', 'dup', '3nipd', 'call', '-rotd', 'object', 'drop', 'assert=', 'assert?', '-rot', 'execute', 'boa', 'get-callstack', 'curried?', '3drop', 'pickd', 'overd', 'over', 'roll', '3nip', 'swap', 'and', '2nip', 'rotd', 'throw', '(clone)', 'hashcode*', 'spin', 'reach', '4dup', 'equal?', 'get-datastack', 'assert', '2drop', '<wrapper>', 'boolean?', 'identity-hashcode', 'identity-tuple?', 'null', 'composed?', 'new', '5drop', 'rot', '-roll', 'xor', 'identity-tuple', 'boolean'],\n      'other-builtin-syntax': [// syntax\n      '=======', 'recursive', 'flushable', '>>', '<<<<<<', 'M\\\\', 'B', 'PRIVATE>', '\\\\', '======', 'final', 'inline', 'delimiter', 'deprecated', '<PRIVATE', '>>>>>>', '<<<<<<<', 'parse-complex', 'malformed-complex', 'read-only', '>>>>>>>', 'call-next-method', '<<', 'foldable', // literals\n      '$', '$[', '${'],\n      'sequences-builtin': ['member-eq?', 'mismatch', 'append', 'assert-sequence=', 'longer', 'repetition', 'clone-like', '3sequence', 'assert-sequence?', 'last-index-from', 'reversed', 'index-from', 'cut*', 'pad-tail', 'join-as', 'remove-eq!', 'concat-as', 'but-last', 'snip', 'nths', 'nth', 'sequence', 'longest', 'slice?', '<slice>', 'remove-nth', 'tail-slice', 'empty?', 'tail*', 'member?', 'virtual-sequence?', 'set-length', 'drop-prefix', 'iota', 'unclip', 'bounds-error?', 'unclip-last-slice', 'non-negative-integer-expected', 'non-negative-integer-expected?', 'midpoint@', 'longer?', '?set-nth', '?first', 'rest-slice', 'prepend-as', 'prepend', 'fourth', 'sift', 'subseq-start', 'new-sequence', '?last', 'like', 'first4', '1sequence', 'reverse', 'slice', 'virtual@', 'repetition?', 'set-last', 'index', '4sequence', 'max-length', 'set-second', 'immutable-sequence', 'first2', 'first3', 'supremum', 'unclip-slice', 'suffix!', 'insert-nth', 'tail', '3append', 'short', 'suffix', 'concat', 'flip', 'immutable?', 'reverse!', '2sequence', 'sum', 'delete-all', 'indices', 'snip-slice', '<iota>', 'check-slice', 'sequence?', 'head', 'append-as', 'halves', 'sequence=', 'collapse-slice', '?second', 'slice-error?', 'product', 'bounds-check?', 'bounds-check', 'immutable', 'virtual-exemplar', 'harvest', 'remove', 'pad-head', 'last', 'set-fourth', 'cartesian-product', 'remove-eq', 'shorten', 'shorter', 'reversed?', 'shorter?', 'shortest', 'head-slice', 'pop*', 'tail-slice*', 'but-last-slice', 'iota?', 'append!', 'cut-slice', 'new-resizable', 'head-slice*', 'sequence-hashcode', 'pop', 'set-nth', '?nth', 'second', 'join', 'immutable-sequence?', '<reversed>', '3append-as', 'virtual-sequence', 'subseq?', 'remove-nth!', 'length', 'last-index', 'lengthen', 'assert-sequence', 'copy', 'move', 'third', 'first', 'tail?', 'set-first', 'prefix', 'bounds-error', '<repetition>', 'exchange', 'surround', 'cut', 'min-length', 'set-third', 'push-all', 'head?', 'subseq-start-from', 'delete-slice', 'rest', 'sum-lengths', 'head*', 'infimum', 'remove!', 'glue', 'slice-error', 'subseq', 'push', 'replace-slice', 'subseq-as', 'unclip-last'],\n      'math-builtin': ['number=', 'next-power-of-2', '?1+', 'fp-special?', 'imaginary-part', 'float>bits', 'number?', 'fp-infinity?', 'bignum?', 'fp-snan?', 'denominator', 'gcd', '*', '+', 'fp-bitwise=', '-', 'u>=', '/', '>=', 'bitand', 'power-of-2?', 'log2-expects-positive', 'neg?', '<', 'log2', '>', 'integer?', 'number', 'bits>double', '2/', 'zero?', 'bits>float', 'float?', 'shift', 'ratio?', 'rect>', 'even?', 'ratio', 'fp-sign', 'bitnot', '>fixnum', 'complex?', '/i', 'integer>fixnum', '/f', 'sgn', '>bignum', 'next-float', 'u<', 'u>', 'mod', 'recip', 'rational', '>float', '2^', 'integer', 'fixnum?', 'neg', 'fixnum', 'sq', 'bignum', '>rect', 'bit?', 'fp-qnan?', 'simple-gcd', 'complex', '<fp-nan>', 'real', '>fraction', 'double>bits', 'bitor', 'rem', 'fp-nan-payload', 'real-part', 'log2-expects-positive?', 'prev-float', 'align', 'unordered?', 'float', 'fp-nan?', 'abs', 'bitxor', 'integer>fixnum-strict', 'u<=', 'odd?', '<=', '/mod', '>integer', 'real?', 'rational?', 'numerator'] // that's all for now\n\n    };\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k]);\n    });\n    var combinators = [// kernel\n    '2bi', 'while', '2tri', 'bi*', '4dip', 'both?', 'same?', 'tri@', 'curry', 'prepose', '3bi', '?if', 'tri*', '2keep', '3keep', 'curried', '2keepd', 'when', '2bi*', '2tri*', '4keep', 'bi@', 'keepdd', 'do', 'unless*', 'tri-curry', 'if*', 'loop', 'bi-curry*', 'when*', '2bi@', '2tri@', 'with', '2with', 'either?', 'bi', 'until', '3dip', '3curry', 'tri-curry*', 'tri-curry@', 'bi-curry', 'keepd', 'compose', '2dip', 'if', '3tri', 'unless', 'tuple', 'keep', '2curry', 'tri', 'most', 'while*', 'dip', 'composed', 'bi-curry@', // sequences\n    'find-last-from', 'trim-head-slice', 'map-as', 'each-from', 'none?', 'trim-tail', 'partition', 'if-empty', 'accumulate*', 'reject!', 'find-from', 'accumulate-as', 'collector-for-as', 'reject', 'map', 'map-sum', 'accumulate!', '2each-from', 'follow', 'supremum-by', 'map!', 'unless-empty', 'collector', 'padding', 'reduce-index', 'replicate-as', 'infimum-by', 'trim-tail-slice', 'count', 'find-index', 'filter', 'accumulate*!', 'reject-as', 'map-integers', 'map-find', 'reduce', 'selector', 'interleave', '2map', 'filter-as', 'binary-reduce', 'map-index-as', 'find', 'produce', 'filter!', 'replicate', 'cartesian-map', 'cartesian-each', 'find-index-from', 'map-find-last', '3map-as', '3map', 'find-last', 'selector-as', '2map-as', '2map-reduce', 'accumulate', 'each', 'each-index', 'accumulate*-as', 'when-empty', 'all?', 'collector-as', 'push-either', 'new-like', 'collector-for', '2selector', 'push-if', '2all?', 'map-reduce', '3each', 'any?', 'trim-slice', '2reduce', 'change-nth', 'produce-as', '2each', 'trim', 'trim-head', 'cartesian-find', 'map-index', // math\n    'if-zero', 'each-integer', 'unless-zero', '(find-integer)', 'when-zero', 'find-last-integer', '(all-integers?)', 'times', '(each-integer)', 'find-integer', 'all-integers?', // math.combinators\n    'unless-negative', 'if-positive', 'when-positive', 'when-negative', 'unless-positive', 'if-negative', // combinators\n    'case', '2cleave', 'cond>quot', 'case>quot', '3cleave', 'wrong-values', 'to-fixed-point', 'alist>quot', 'cond', 'cleave', 'call-effect', 'recursive-hashcode', 'spread', 'deep-spread>quot', // combinators.short-circuit\n    '2||', '0||', 'n||', '0&&', '2&&', '3||', '1||', '1&&', 'n&&', '3&&', // combinators.smart\n    'smart-unless*', 'keep-inputs', 'reduce-outputs', 'smart-when*', 'cleave>array', 'smart-with', 'smart-apply', 'smart-if', 'inputs/outputs', 'output>sequence-n', 'map-outputs', 'map-reduce-outputs', 'dropping', 'output>array', 'smart-map-reduce', 'smart-2map-reduce', 'output>array-n', 'nullary', 'input<sequence', 'append-outputs', 'drop-inputs', 'inputs', 'smart-2reduce', 'drop-outputs', 'smart-reduce', 'preserving', 'smart-when', 'outputs', 'append-outputs-as', 'smart-unless', 'smart-if*', 'sum-outputs', 'input<sequence-unsafe', 'output>sequence' // tafn\n    ];\n    factor.combinators.pattern = arrToWordsRegExp(combinators);\n    Prism.languages.factor = factor;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/factor.js"],"names":["module","exports","factor","displayName","aliases","Prism","comment_inside","function","string_inside","number","comment","pattern","lookbehind","inside","greedy","regexp","alias","variable","keyword","operator","boolean","string","combinators","escape","str","replace","arrToWordsRegExp","arr","RegExp","map","join","builtins","Object","keys","forEach","k","languages"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = factor\nfactor.displayName = 'factor'\nfactor.aliases = []\nfunction factor(Prism) {\n  ;(function (Prism) {\n    var comment_inside = {\n      function:\n        /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    }\n    var string_inside = {\n      number: /\\\\[^\\s']|%\\w/\n    }\n    var factor = {\n      comment: [\n        {\n          // ! single-line exclamation point comments with whitespace after/around the !\n          pattern: /(^|\\s)(?:! .*|!$)/,\n          lookbehind: true,\n          inside: comment_inside\n        },\n        /* from basis/multiline: */\n        {\n          // /* comment */, /* comment*/\n          pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        },\n        {\n          // ![[ comment ]] , ![===[ comment]===]\n          pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: comment_inside\n        }\n      ],\n      number: [\n        {\n          // basic base 10 integers 9, -9\n          pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // base prefix integers 0b010 0o70 0xad 0d10 0XAD -0xa9\n          pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // fractional ratios 1/5 -1/5 and the literal float approximations 1/5. -1/5.\n          pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // positive mixed numbers 23+1/5 +23+1/5\n          pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // negative mixed numbers -23-1/5\n          pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          // basic decimal floats -0.01 0. .0 .1 -.1 -1. -12.13 +12.13\n          // and scientific notation with base 10 exponents 3e4 3e-4 .3e-4\n          pattern:\n            /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n          lookbehind: true\n        },\n        {\n          // NAN literal syntax NAN: 80000deadbeef, NAN: a\n          pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n          lookbehind: true\n        },\n        {\n          /*\nbase prefix floats 0x1.0p3 (8.0) 0b1.010p2 (5.0) 0x1.p1 0b1.11111111p11111...\n\"The normalized hex form ±0x1.MMMMMMMMMMMMM[pP]±EEEE allows any floating-point number to be specified precisely.\nThe values of MMMMMMMMMMMMM and EEEE map directly to the mantissa and exponent fields of the binary IEEE 754 representation.\"\n<https://docs.factorcode.org/content/article-syntax-floats.html>\n*/\n          pattern:\n            /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n          lookbehind: true\n        }\n      ],\n      // R/ regexp?\\/\\\\/\n      regexp: {\n        pattern:\n          /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'number',\n        inside: {\n          variable: /\\\\\\S/,\n          keyword: /[+?*\\[\\]^$(){}.|]/,\n          operator: {\n            pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n            lookbehind: true\n          }\n        }\n      },\n      boolean: {\n        pattern: /(^|\\s)[tf](?=\\s|$)/,\n        lookbehind: true\n      },\n      // SBUF\" asd\", URL\" ://...\", P\" /etc/\"\n      'custom-string': {\n        pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          number: /\\\\\\S|%\\w|\\//\n        }\n      },\n      'multiline-string': [\n        {\n          // STRING: name \\n content \\n ; -> CONSTANT: name \"content\" (symbol)\n          pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            number: string_inside.number,\n            // trailing semicolon on its own line\n            'semicolon-or-setlocal': {\n              pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n              lookbehind: true,\n              alias: 'function'\n            }\n          }\n        },\n        {\n          // HEREDOC: marker \\n content \\n marker ; -> \"content\" (immediate)\n          pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        },\n        {\n          // [[ string ]], [==[ string]==]\n          pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: string_inside\n        }\n      ],\n      'special-using': {\n        pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          // this is essentially a regex for vocab names, which i don't want to specify\n          // but the USING: gets picked up as a vocab name\n          string: {\n            pattern: /(\\s)[^:\\s]+/,\n            lookbehind: true\n          }\n        }\n      },\n      /* this description of stack effect literal syntax is not complete and not as specific as theoretically possible\ntrying to do better is more work and regex-computation-time than it's worth though.\n- we'd like to have the \"delimiter\" parts of the stack effect [ (, --, and ) ] be a different (less-important or comment-like) colour to the stack effect contents\n- we'd like if nested stack effects were treated as such rather than just appearing flat (with `inside`)\n- we'd like if the following variable name conventions were recognised specifically:\nspecial row variables = ..a b..\ntype and stack effect annotations end with a colon = ( quot: ( a: ( -- ) -- b ) -- x ), ( x: number -- )\nword throws unconditional error = *\nany other word-like variable name = a ? q' etc\nhttps://docs.factorcode.org/content/article-effects.html\nthese are pretty complicated to highlight properly without a real parser, and therefore out of scope\nthe old pattern, which may be later useful, was: (^|\\s)(?:call|execute|eval)?\\((?:\\s+[^\"\\r\\n\\t ]\\S*)*?\\s+--(?:\\s+[^\"\\n\\t ]\\S*)*?\\s+\\)(?=\\s|$)\n*/\n      // current solution is not great\n      'stack-effect-delimiter': [\n        {\n          // opening parenthesis\n          pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // middle --\n          pattern: /(\\s)--(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing parenthesis\n          pattern: /(\\s)\\)(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      combinators: {\n        pattern: null,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'kernel-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'sequences-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'math-builtin': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      'constructor-word': {\n        // <array> but not <=>\n        pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'other-builtin-syntax': {\n        pattern: null,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      /*\nfull list of supported word naming conventions: (the convention appears outside of the [brackets])\nset-[x]\nchange-[x]\nwith-[x]\nnew-[x]\n>[string]\n[base]>\n[string]>[number]\n+[symbol]+\n[boolean-word]?\n?[of]\n[slot-reader]>>\n>>[slot-setter]\n[slot-writer]<<\n([implementation-detail])\n[mutater]!\n[variant]*\n[prettyprint].\n$[help-markup]\n<constructors>, SYNTAX:, etc are supported by their own patterns.\n`with` and `new` from `kernel` are their own builtins.\nsee <https://docs.factorcode.org/content/article-conventions.html>\n*/\n      'conventionally-named-word': {\n        pattern:\n          /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'colon-syntax': {\n        pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'semicolon-or-setlocal': {\n        pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      // do not highlight leading } or trailing X{ at the begin/end of the file as it's invalid syntax\n      'curly-brace-literal-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\}(?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      // do not highlight leading ] or trailing [ at the begin/end of the file as it's invalid syntax\n      'quotation-delimiter': [\n        {\n          // opening\n          pattern: /(^|\\s)\\[(?=\\s)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        {\n          // closing\n          pattern: /(\\s)\\](?=\\s|$)/,\n          lookbehind: true,\n          alias: 'operator'\n        }\n      ],\n      'normal-word': {\n        pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n        lookbehind: true\n      },\n      /*\nbasic first-class string \"a\"\nwith escaped double-quote \"a\\\"\"\nescaped backslash \"\\\\\"\nand general escapes since Factor has so many \"\\N\"\nsyntax that works in the reference implementation that isn't fully\nsupported because it's an implementation detail:\n\"string 1\"\"string 2\" -> 2 strings (works anyway)\n\"string\"5 -> string, 5\n\"string\"[ ] -> string, quotation\n{ \"a\"} -> array<string>\nthe rest of those examples all properly recognise the string, but not\nthe other object (number, quotation, etc)\nthis is fine for a regex-only implementation.\n*/\n      string: {\n        pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n        greedy: true,\n        inside: string_inside\n      }\n    }\n    var escape = function (str) {\n      return (str + '').replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    var arrToWordsRegExp = function (arr) {\n      return new RegExp('(^|\\\\s)(?:' + arr.map(escape).join('|') + ')(?=\\\\s|$)')\n    }\n    var builtins = {\n      'kernel-builtin': [\n        'or',\n        '2nipd',\n        '4drop',\n        'tuck',\n        'wrapper',\n        'nip',\n        'wrapper?',\n        'callstack>array',\n        'die',\n        'dupd',\n        'callstack',\n        'callstack?',\n        '3dup',\n        'hashcode',\n        'pick',\n        '4nip',\n        'build',\n        '>boolean',\n        'nipd',\n        'clone',\n        '5nip',\n        'eq?',\n        '?',\n        '=',\n        'swapd',\n        '2over',\n        'clear',\n        '2dup',\n        'get-retainstack',\n        'not',\n        'tuple?',\n        'dup',\n        '3nipd',\n        'call',\n        '-rotd',\n        'object',\n        'drop',\n        'assert=',\n        'assert?',\n        '-rot',\n        'execute',\n        'boa',\n        'get-callstack',\n        'curried?',\n        '3drop',\n        'pickd',\n        'overd',\n        'over',\n        'roll',\n        '3nip',\n        'swap',\n        'and',\n        '2nip',\n        'rotd',\n        'throw',\n        '(clone)',\n        'hashcode*',\n        'spin',\n        'reach',\n        '4dup',\n        'equal?',\n        'get-datastack',\n        'assert',\n        '2drop',\n        '<wrapper>',\n        'boolean?',\n        'identity-hashcode',\n        'identity-tuple?',\n        'null',\n        'composed?',\n        'new',\n        '5drop',\n        'rot',\n        '-roll',\n        'xor',\n        'identity-tuple',\n        'boolean'\n      ],\n      'other-builtin-syntax': [\n        // syntax\n        '=======',\n        'recursive',\n        'flushable',\n        '>>',\n        '<<<<<<',\n        'M\\\\',\n        'B',\n        'PRIVATE>',\n        '\\\\',\n        '======',\n        'final',\n        'inline',\n        'delimiter',\n        'deprecated',\n        '<PRIVATE',\n        '>>>>>>',\n        '<<<<<<<',\n        'parse-complex',\n        'malformed-complex',\n        'read-only',\n        '>>>>>>>',\n        'call-next-method',\n        '<<',\n        'foldable', // literals\n        '$',\n        '$[',\n        '${'\n      ],\n      'sequences-builtin': [\n        'member-eq?',\n        'mismatch',\n        'append',\n        'assert-sequence=',\n        'longer',\n        'repetition',\n        'clone-like',\n        '3sequence',\n        'assert-sequence?',\n        'last-index-from',\n        'reversed',\n        'index-from',\n        'cut*',\n        'pad-tail',\n        'join-as',\n        'remove-eq!',\n        'concat-as',\n        'but-last',\n        'snip',\n        'nths',\n        'nth',\n        'sequence',\n        'longest',\n        'slice?',\n        '<slice>',\n        'remove-nth',\n        'tail-slice',\n        'empty?',\n        'tail*',\n        'member?',\n        'virtual-sequence?',\n        'set-length',\n        'drop-prefix',\n        'iota',\n        'unclip',\n        'bounds-error?',\n        'unclip-last-slice',\n        'non-negative-integer-expected',\n        'non-negative-integer-expected?',\n        'midpoint@',\n        'longer?',\n        '?set-nth',\n        '?first',\n        'rest-slice',\n        'prepend-as',\n        'prepend',\n        'fourth',\n        'sift',\n        'subseq-start',\n        'new-sequence',\n        '?last',\n        'like',\n        'first4',\n        '1sequence',\n        'reverse',\n        'slice',\n        'virtual@',\n        'repetition?',\n        'set-last',\n        'index',\n        '4sequence',\n        'max-length',\n        'set-second',\n        'immutable-sequence',\n        'first2',\n        'first3',\n        'supremum',\n        'unclip-slice',\n        'suffix!',\n        'insert-nth',\n        'tail',\n        '3append',\n        'short',\n        'suffix',\n        'concat',\n        'flip',\n        'immutable?',\n        'reverse!',\n        '2sequence',\n        'sum',\n        'delete-all',\n        'indices',\n        'snip-slice',\n        '<iota>',\n        'check-slice',\n        'sequence?',\n        'head',\n        'append-as',\n        'halves',\n        'sequence=',\n        'collapse-slice',\n        '?second',\n        'slice-error?',\n        'product',\n        'bounds-check?',\n        'bounds-check',\n        'immutable',\n        'virtual-exemplar',\n        'harvest',\n        'remove',\n        'pad-head',\n        'last',\n        'set-fourth',\n        'cartesian-product',\n        'remove-eq',\n        'shorten',\n        'shorter',\n        'reversed?',\n        'shorter?',\n        'shortest',\n        'head-slice',\n        'pop*',\n        'tail-slice*',\n        'but-last-slice',\n        'iota?',\n        'append!',\n        'cut-slice',\n        'new-resizable',\n        'head-slice*',\n        'sequence-hashcode',\n        'pop',\n        'set-nth',\n        '?nth',\n        'second',\n        'join',\n        'immutable-sequence?',\n        '<reversed>',\n        '3append-as',\n        'virtual-sequence',\n        'subseq?',\n        'remove-nth!',\n        'length',\n        'last-index',\n        'lengthen',\n        'assert-sequence',\n        'copy',\n        'move',\n        'third',\n        'first',\n        'tail?',\n        'set-first',\n        'prefix',\n        'bounds-error',\n        '<repetition>',\n        'exchange',\n        'surround',\n        'cut',\n        'min-length',\n        'set-third',\n        'push-all',\n        'head?',\n        'subseq-start-from',\n        'delete-slice',\n        'rest',\n        'sum-lengths',\n        'head*',\n        'infimum',\n        'remove!',\n        'glue',\n        'slice-error',\n        'subseq',\n        'push',\n        'replace-slice',\n        'subseq-as',\n        'unclip-last'\n      ],\n      'math-builtin': [\n        'number=',\n        'next-power-of-2',\n        '?1+',\n        'fp-special?',\n        'imaginary-part',\n        'float>bits',\n        'number?',\n        'fp-infinity?',\n        'bignum?',\n        'fp-snan?',\n        'denominator',\n        'gcd',\n        '*',\n        '+',\n        'fp-bitwise=',\n        '-',\n        'u>=',\n        '/',\n        '>=',\n        'bitand',\n        'power-of-2?',\n        'log2-expects-positive',\n        'neg?',\n        '<',\n        'log2',\n        '>',\n        'integer?',\n        'number',\n        'bits>double',\n        '2/',\n        'zero?',\n        'bits>float',\n        'float?',\n        'shift',\n        'ratio?',\n        'rect>',\n        'even?',\n        'ratio',\n        'fp-sign',\n        'bitnot',\n        '>fixnum',\n        'complex?',\n        '/i',\n        'integer>fixnum',\n        '/f',\n        'sgn',\n        '>bignum',\n        'next-float',\n        'u<',\n        'u>',\n        'mod',\n        'recip',\n        'rational',\n        '>float',\n        '2^',\n        'integer',\n        'fixnum?',\n        'neg',\n        'fixnum',\n        'sq',\n        'bignum',\n        '>rect',\n        'bit?',\n        'fp-qnan?',\n        'simple-gcd',\n        'complex',\n        '<fp-nan>',\n        'real',\n        '>fraction',\n        'double>bits',\n        'bitor',\n        'rem',\n        'fp-nan-payload',\n        'real-part',\n        'log2-expects-positive?',\n        'prev-float',\n        'align',\n        'unordered?',\n        'float',\n        'fp-nan?',\n        'abs',\n        'bitxor',\n        'integer>fixnum-strict',\n        'u<=',\n        'odd?',\n        '<=',\n        '/mod',\n        '>integer',\n        'real?',\n        'rational?',\n        'numerator'\n      ] // that's all for now\n    }\n    Object.keys(builtins).forEach(function (k) {\n      factor[k].pattern = arrToWordsRegExp(builtins[k])\n    })\n    var combinators = [\n      // kernel\n      '2bi',\n      'while',\n      '2tri',\n      'bi*',\n      '4dip',\n      'both?',\n      'same?',\n      'tri@',\n      'curry',\n      'prepose',\n      '3bi',\n      '?if',\n      'tri*',\n      '2keep',\n      '3keep',\n      'curried',\n      '2keepd',\n      'when',\n      '2bi*',\n      '2tri*',\n      '4keep',\n      'bi@',\n      'keepdd',\n      'do',\n      'unless*',\n      'tri-curry',\n      'if*',\n      'loop',\n      'bi-curry*',\n      'when*',\n      '2bi@',\n      '2tri@',\n      'with',\n      '2with',\n      'either?',\n      'bi',\n      'until',\n      '3dip',\n      '3curry',\n      'tri-curry*',\n      'tri-curry@',\n      'bi-curry',\n      'keepd',\n      'compose',\n      '2dip',\n      'if',\n      '3tri',\n      'unless',\n      'tuple',\n      'keep',\n      '2curry',\n      'tri',\n      'most',\n      'while*',\n      'dip',\n      'composed',\n      'bi-curry@', // sequences\n      'find-last-from',\n      'trim-head-slice',\n      'map-as',\n      'each-from',\n      'none?',\n      'trim-tail',\n      'partition',\n      'if-empty',\n      'accumulate*',\n      'reject!',\n      'find-from',\n      'accumulate-as',\n      'collector-for-as',\n      'reject',\n      'map',\n      'map-sum',\n      'accumulate!',\n      '2each-from',\n      'follow',\n      'supremum-by',\n      'map!',\n      'unless-empty',\n      'collector',\n      'padding',\n      'reduce-index',\n      'replicate-as',\n      'infimum-by',\n      'trim-tail-slice',\n      'count',\n      'find-index',\n      'filter',\n      'accumulate*!',\n      'reject-as',\n      'map-integers',\n      'map-find',\n      'reduce',\n      'selector',\n      'interleave',\n      '2map',\n      'filter-as',\n      'binary-reduce',\n      'map-index-as',\n      'find',\n      'produce',\n      'filter!',\n      'replicate',\n      'cartesian-map',\n      'cartesian-each',\n      'find-index-from',\n      'map-find-last',\n      '3map-as',\n      '3map',\n      'find-last',\n      'selector-as',\n      '2map-as',\n      '2map-reduce',\n      'accumulate',\n      'each',\n      'each-index',\n      'accumulate*-as',\n      'when-empty',\n      'all?',\n      'collector-as',\n      'push-either',\n      'new-like',\n      'collector-for',\n      '2selector',\n      'push-if',\n      '2all?',\n      'map-reduce',\n      '3each',\n      'any?',\n      'trim-slice',\n      '2reduce',\n      'change-nth',\n      'produce-as',\n      '2each',\n      'trim',\n      'trim-head',\n      'cartesian-find',\n      'map-index', // math\n      'if-zero',\n      'each-integer',\n      'unless-zero',\n      '(find-integer)',\n      'when-zero',\n      'find-last-integer',\n      '(all-integers?)',\n      'times',\n      '(each-integer)',\n      'find-integer',\n      'all-integers?', // math.combinators\n      'unless-negative',\n      'if-positive',\n      'when-positive',\n      'when-negative',\n      'unless-positive',\n      'if-negative', // combinators\n      'case',\n      '2cleave',\n      'cond>quot',\n      'case>quot',\n      '3cleave',\n      'wrong-values',\n      'to-fixed-point',\n      'alist>quot',\n      'cond',\n      'cleave',\n      'call-effect',\n      'recursive-hashcode',\n      'spread',\n      'deep-spread>quot', // combinators.short-circuit\n      '2||',\n      '0||',\n      'n||',\n      '0&&',\n      '2&&',\n      '3||',\n      '1||',\n      '1&&',\n      'n&&',\n      '3&&', // combinators.smart\n      'smart-unless*',\n      'keep-inputs',\n      'reduce-outputs',\n      'smart-when*',\n      'cleave>array',\n      'smart-with',\n      'smart-apply',\n      'smart-if',\n      'inputs/outputs',\n      'output>sequence-n',\n      'map-outputs',\n      'map-reduce-outputs',\n      'dropping',\n      'output>array',\n      'smart-map-reduce',\n      'smart-2map-reduce',\n      'output>array-n',\n      'nullary',\n      'input<sequence',\n      'append-outputs',\n      'drop-inputs',\n      'inputs',\n      'smart-2reduce',\n      'drop-outputs',\n      'smart-reduce',\n      'preserving',\n      'smart-when',\n      'outputs',\n      'append-outputs-as',\n      'smart-unless',\n      'smart-if*',\n      'sum-outputs',\n      'input<sequence-unsafe',\n      'output>sequence' // tafn\n    ]\n    factor.combinators.pattern = arrToWordsRegExp(combinators)\n    Prism.languages.factor = factor\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}