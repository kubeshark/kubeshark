{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar transformData = require('./transformData');\n\nvar isCancel = require('../cancel/isCancel');\n\nvar defaults = require('../defaults');\n\nvar Cancel = require('../cancel/Cancel');\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\n\n\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\n\n\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config); // Ensure headers exist\n\n  config.headers = config.headers || {}; // Transform request data\n\n  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers\n\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n  var adapter = config.adapter || defaults.adapter;\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config); // Transform response data\n\n    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config); // Transform response data\n\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/axios/lib/core/dispatchRequest.js"],"names":["utils","require","transformData","isCancel","defaults","Cancel","throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","module","exports","dispatchRequest","headers","data","call","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","then","onAdapterResolution","response","transformResponse","onAdapterRejection","reason","Promise","reject"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,kBAAD,CAApB;AAEA;AACA;AACA;;;AACA,SAASK,4BAAT,CAAsCC,MAAtC,EAA8C;AAC5C,MAAIA,MAAM,CAACC,WAAX,EAAwB;AACtBD,IAAAA,MAAM,CAACC,WAAP,CAAmBC,gBAAnB;AACD;;AAED,MAAIF,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAACG,MAAP,CAAcC,OAAnC,EAA4C;AAC1C,UAAM,IAAIN,MAAJ,CAAW,UAAX,CAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAO,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBP,MAAzB,EAAiC;AAChDD,EAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADgD,CAGhD;;AACAA,EAAAA,MAAM,CAACQ,OAAP,GAAiBR,MAAM,CAACQ,OAAP,IAAkB,EAAnC,CAJgD,CAMhD;;AACAR,EAAAA,MAAM,CAACS,IAAP,GAAcd,aAAa,CAACe,IAAd,CACZV,MADY,EAEZA,MAAM,CAACS,IAFK,EAGZT,MAAM,CAACQ,OAHK,EAIZR,MAAM,CAACW,gBAJK,CAAd,CAPgD,CAchD;;AACAX,EAAAA,MAAM,CAACQ,OAAP,GAAiBf,KAAK,CAACmB,KAAN,CACfZ,MAAM,CAACQ,OAAP,CAAeK,MAAf,IAAyB,EADV,EAEfb,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACc,MAAtB,KAAiC,EAFlB,EAGfd,MAAM,CAACQ,OAHQ,CAAjB;AAMAf,EAAAA,KAAK,CAACsB,OAAN,CACE,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,QAAlD,CADF,EAEE,SAASC,iBAAT,CAA2BF,MAA3B,EAAmC;AACjC,WAAOd,MAAM,CAACQ,OAAP,CAAeM,MAAf,CAAP;AACD,GAJH;AAOA,MAAIG,OAAO,GAAGjB,MAAM,CAACiB,OAAP,IAAkBpB,QAAQ,CAACoB,OAAzC;AAEA,SAAOA,OAAO,CAACjB,MAAD,CAAP,CAAgBkB,IAAhB,CAAqB,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACjErB,IAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADiE,CAGjE;;AACAoB,IAAAA,QAAQ,CAACX,IAAT,GAAgBd,aAAa,CAACe,IAAd,CACdV,MADc,EAEdoB,QAAQ,CAACX,IAFK,EAGdW,QAAQ,CAACZ,OAHK,EAIdR,MAAM,CAACqB,iBAJO,CAAhB;AAOA,WAAOD,QAAP;AACD,GAZM,EAYJ,SAASE,kBAAT,CAA4BC,MAA5B,EAAoC;AACrC,QAAI,CAAC3B,QAAQ,CAAC2B,MAAD,CAAb,EAAuB;AACrBxB,MAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADqB,CAGrB;;AACA,UAAIuB,MAAM,IAAIA,MAAM,CAACH,QAArB,EAA+B;AAC7BG,QAAAA,MAAM,CAACH,QAAP,CAAgBX,IAAhB,GAAuBd,aAAa,CAACe,IAAd,CACrBV,MADqB,EAErBuB,MAAM,CAACH,QAAP,CAAgBX,IAFK,EAGrBc,MAAM,CAACH,QAAP,CAAgBZ,OAHK,EAIrBR,MAAM,CAACqB,iBAJc,CAAvB;AAMD;AACF;;AAED,WAAOG,OAAO,CAACC,MAAR,CAAeF,MAAf,CAAP;AACD,GA5BM,CAAP;AA6BD,CA3DD","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}