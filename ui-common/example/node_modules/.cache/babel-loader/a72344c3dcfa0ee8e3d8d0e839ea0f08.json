{"ast":null,"code":"'use strict';\n\nmodule.exports = purebasic;\npurebasic.displayName = 'purebasic';\npurebasic.aliases = [];\n\nfunction purebasic(Prism) {\n  /*\n  Original Code by Bas Groothedde\n  !!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)\n  ==> https://codepen.io/ImagineProgramming/details/JYydBy/\n  slightly changed to pass all tests\n  */\n  // PureBasic support, steal stuff from ansi-c\n  Prism.languages.purebasic = Prism.languages.extend('clike', {\n    comment: /;.*/,\n    keyword: /\\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\\b/i,\n    function: /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n    number: /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,\n    operator: /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n  });\n  Prism.languages.insertBefore('purebasic', 'keyword', {\n    tag: /#\\w+\\$?/,\n    asm: {\n      pattern: /(^[\\t ]*)!.*/m,\n      lookbehind: true,\n      alias: 'tag',\n      inside: {\n        comment: /;.*/,\n        string: {\n          pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: true\n        },\n        // Anonymous label references, i.e.: jmp @b\n        'label-reference-anonymous': {\n          pattern: /(!\\s*j[a-z]+\\s+)@[fb]/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        // Named label reference, i.e.: jne label1\n        'label-reference-addressed': {\n          pattern: /(!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        keyword: [/\\b(?:extern|global)\\b[^;\\r\\n]*/i, /\\b(?:CPU|DEFAULT|FLOAT)\\b.*/],\n        function: {\n          pattern: /^([\\t ]*!\\s*)[\\da-z]+(?=\\s|$)/im,\n          lookbehind: true\n        },\n        'function-inline': {\n          pattern: /(:\\s*)[\\da-z]+(?=\\s)/i,\n          lookbehind: true,\n          alias: 'function'\n        },\n        label: {\n          pattern: /^([\\t ]*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        register: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\\d+)\\b/i,\n        number: /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n        operator: /[\\[\\]*+\\-/%<>=&|$!,.:]/\n      }\n    }\n  });\n  delete Prism.languages.purebasic['class-name'];\n  delete Prism.languages.purebasic['boolean'];\n  Prism.languages.pbfasm = Prism.languages['purebasic'];\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/purebasic.js"],"names":["module","exports","purebasic","displayName","aliases","Prism","languages","extend","comment","keyword","function","number","operator","insertBefore","tag","asm","pattern","lookbehind","alias","inside","string","greedy","label","register","pbfasm"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AACAA,SAAS,CAACC,WAAV,GAAwB,WAAxB;AACAD,SAAS,CAACE,OAAV,GAAoB,EAApB;;AACA,SAASF,SAAT,CAAmBG,KAAnB,EAA0B;AACxB;AACF;AACA;AACA;AACA;AACA;AACE;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,SAAhB,GAA4BG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAC1DC,IAAAA,OAAO,EAAE,KADiD;AAE1DC,IAAAA,OAAO,EACL,s8BAHwD;AAI1DC,IAAAA,QAAQ,EAAE,0BAJgD;AAK1DC,IAAAA,MAAM,EAAE,6DALkD;AAM1DC,IAAAA,QAAQ,EACN;AAPwD,GAAhC,CAA5B;AASAP,EAAAA,KAAK,CAACC,SAAN,CAAgBO,YAAhB,CAA6B,WAA7B,EAA0C,SAA1C,EAAqD;AACnDC,IAAAA,GAAG,EAAE,SAD8C;AAEnDC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,EAAE,eADN;AAEHC,MAAAA,UAAU,EAAE,IAFT;AAGHC,MAAAA,KAAK,EAAE,KAHJ;AAIHC,MAAAA,MAAM,EAAE;AACNX,QAAAA,OAAO,EAAE,KADH;AAENY,QAAAA,MAAM,EAAE;AACNJ,UAAAA,OAAO,EAAE,mCADH;AAENK,UAAAA,MAAM,EAAE;AAFF,SAFF;AAMN;AACA,qCAA6B;AAC3BL,UAAAA,OAAO,EAAE,wBADkB;AAE3BC,UAAAA,UAAU,EAAE,IAFe;AAG3BC,UAAAA,KAAK,EAAE;AAHoB,SAPvB;AAYN;AACA,qCAA6B;AAC3BF,UAAAA,OAAO,EAAE,wCADkB;AAE3BC,UAAAA,UAAU,EAAE,IAFe;AAG3BC,UAAAA,KAAK,EAAE;AAHoB,SAbvB;AAkBNT,QAAAA,OAAO,EAAE,CACP,iCADO,EAEP,6BAFO,CAlBH;AAsBNC,QAAAA,QAAQ,EAAE;AACRM,UAAAA,OAAO,EAAE,iCADD;AAERC,UAAAA,UAAU,EAAE;AAFJ,SAtBJ;AA0BN,2BAAmB;AACjBD,UAAAA,OAAO,EAAE,uBADQ;AAEjBC,UAAAA,UAAU,EAAE,IAFK;AAGjBC,UAAAA,KAAK,EAAE;AAHU,SA1Bb;AA+BNI,QAAAA,KAAK,EAAE;AACLN,UAAAA,OAAO,EAAE,6CADJ;AAELC,UAAAA,UAAU,EAAE,IAFP;AAGLC,UAAAA,KAAK,EAAE;AAHF,SA/BD;AAoCNK,QAAAA,QAAQ,EACN,+GArCI;AAsCNZ,QAAAA,MAAM,EACJ,iMAvCI;AAwCNC,QAAAA,QAAQ,EAAE;AAxCJ;AAJL;AAF8C,GAArD;AAkDA,SAAOP,KAAK,CAACC,SAAN,CAAgBJ,SAAhB,CAA0B,YAA1B,CAAP;AACA,SAAOG,KAAK,CAACC,SAAN,CAAgBJ,SAAhB,CAA0B,SAA1B,CAAP;AACAG,EAAAA,KAAK,CAACC,SAAN,CAAgBkB,MAAhB,GAAyBnB,KAAK,CAACC,SAAN,CAAgB,WAAhB,CAAzB;AACD","sourcesContent":["'use strict'\n\nmodule.exports = purebasic\npurebasic.displayName = 'purebasic'\npurebasic.aliases = []\nfunction purebasic(Prism) {\n  /*\nOriginal Code by Bas Groothedde\n!!MANY THANKS!! I never would have made this, regex and me will never be best friends ;)\n==> https://codepen.io/ImagineProgramming/details/JYydBy/\nslightly changed to pass all tests\n*/\n  // PureBasic support, steal stuff from ansi-c\n  Prism.languages.purebasic = Prism.languages.extend('clike', {\n    comment: /;.*/,\n    keyword:\n      /\\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\\b/i,\n    function: /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n    number: /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,\n    operator:\n      /(?:@\\*?|\\?|\\*)\\w+|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n  })\n  Prism.languages.insertBefore('purebasic', 'keyword', {\n    tag: /#\\w+\\$?/,\n    asm: {\n      pattern: /(^[\\t ]*)!.*/m,\n      lookbehind: true,\n      alias: 'tag',\n      inside: {\n        comment: /;.*/,\n        string: {\n          pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          greedy: true\n        },\n        // Anonymous label references, i.e.: jmp @b\n        'label-reference-anonymous': {\n          pattern: /(!\\s*j[a-z]+\\s+)@[fb]/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        // Named label reference, i.e.: jne label1\n        'label-reference-addressed': {\n          pattern: /(!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        keyword: [\n          /\\b(?:extern|global)\\b[^;\\r\\n]*/i,\n          /\\b(?:CPU|DEFAULT|FLOAT)\\b.*/\n        ],\n        function: {\n          pattern: /^([\\t ]*!\\s*)[\\da-z]+(?=\\s|$)/im,\n          lookbehind: true\n        },\n        'function-inline': {\n          pattern: /(:\\s*)[\\da-z]+(?=\\s)/i,\n          lookbehind: true,\n          alias: 'function'\n        },\n        label: {\n          pattern: /^([\\t ]*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n          lookbehind: true,\n          alias: 'fasm-label'\n        },\n        register:\n          /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\\d+)\\b/i,\n        number:\n          /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n        operator: /[\\[\\]*+\\-/%<>=&|$!,.:]/\n      }\n    }\n  })\n  delete Prism.languages.purebasic['class-name']\n  delete Prism.languages.purebasic['boolean']\n  Prism.languages.pbfasm = Prism.languages['purebasic']\n}\n"]},"metadata":{},"sourceType":"script"}