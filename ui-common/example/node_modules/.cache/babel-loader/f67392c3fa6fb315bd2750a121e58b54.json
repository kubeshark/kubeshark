{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      mountedState = _React$useState[0],\n      setMountedState = _React$useState[1];\n\n  useEnhancedEffect(function () {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(function () {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/@material-ui/core/esm/NoSsr/NoSsr.js"],"names":["React","PropTypes","exactProp","useEnhancedEffect","window","process","env","NODE_ENV","useLayoutEffect","useEffect","NoSsr","props","children","_props$defer","defer","_props$fallback","fallback","_React$useState","useState","mountedState","setMountedState","createElement","Fragment","propTypes","node","bool"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAIC,iBAAiB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA1D,GAAmEP,KAAK,CAACQ,eAAzE,GAA2FR,KAAK,CAACS,SAAzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,YAAY,GAAGF,KAAK,CAACG,KADzB;AAAA,MAEIA,KAAK,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,KAA1B,GAAkCA,YAF9C;AAAA,MAGIE,eAAe,GAAGJ,KAAK,CAACK,QAH5B;AAAA,MAIIA,QAAQ,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,IAA7B,GAAoCA,eAJnD;;AAMA,MAAIE,eAAe,GAAGjB,KAAK,CAACkB,QAAN,CAAe,KAAf,CAAtB;AAAA,MACIC,YAAY,GAAGF,eAAe,CAAC,CAAD,CADlC;AAAA,MAEIG,eAAe,GAAGH,eAAe,CAAC,CAAD,CAFrC;;AAIAd,EAAAA,iBAAiB,CAAC,YAAY;AAC5B,QAAI,CAACW,KAAL,EAAY;AACVM,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJgB,EAId,CAACN,KAAD,CAJc,CAAjB;AAKAd,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAY;AAC1B,QAAIK,KAAJ,EAAW;AACTM,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACN,KAAD,CAJH,EAhBoB,CAoBP;;AAEb,SAAO,aAAad,KAAK,CAACqB,aAAN,CAAoBrB,KAAK,CAACsB,QAA1B,EAAoC,IAApC,EAA0CH,YAAY,GAAGP,QAAH,GAAcI,QAApE,CAApB;AACD;;AAEDX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCG,KAAK,CAACa,SAAN,GAAkB;AACxD;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEX,EAAAA,QAAQ,EAAEX,SAAS,CAACuB,IAToC;;AAWxD;AACF;AACA;AACA;AACEV,EAAAA,KAAK,EAAEb,SAAS,CAACwB,IAfuC;;AAiBxD;AACF;AACA;AACET,EAAAA,QAAQ,EAAEf,SAAS,CAACuB;AApBoC,CAA1D,GAqBI,KAAK,CArBT;;AAuBA,IAAInB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAG,EAAAA,KAAK,CAAC,cAAc,EAAf,CAAL,GAA0BR,SAAS,CAACQ,KAAK,CAACa,SAAP,CAAnC;AACD;;AAED,eAAeb,KAAf","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      mountedState = _React$useState[0],\n      setMountedState = _React$useState[1];\n\n  useEnhancedEffect(function () {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(function () {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;"]},"metadata":{},"sourceType":"module"}