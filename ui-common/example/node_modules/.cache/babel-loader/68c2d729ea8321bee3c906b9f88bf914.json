{"ast":null,"code":"'use strict';\n\nmodule.exports = robotframework;\nrobotframework.displayName = 'robotframework';\nrobotframework.aliases = [];\n\nfunction robotframework(Prism) {\n  ;\n\n  (function (Prism) {\n    var comment = {\n      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    var variable = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        punctuation: /^[$@&%]\\{|\\}$/\n      }\n    };\n\n    function createSection(name, inside) {\n      var extendecInside = {};\n      extendecInside['section-header'] = {\n        pattern: /^ ?\\*{3}.+?\\*{3}/,\n        alias: 'keyword'\n      }; // copy inside tokens\n\n      for (var token in inside) {\n        extendecInside[token] = inside[token];\n      }\n\n      extendecInside['tag'] = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\[|\\]/\n        }\n      };\n      extendecInside['variable'] = variable;\n      extendecInside['comment'] = comment;\n      return {\n        pattern: RegExp(/^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(/<name>/g, function () {\n          return name;\n        }), 'im'),\n        alias: 'section',\n        inside: extendecInside\n      };\n    }\n\n    var docTag = {\n      pattern: /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n      lookbehind: true,\n      alias: 'string'\n    };\n    var testNameLike = {\n      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        variable: variable\n      }\n    };\n    var testPropertyLike = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      inside: {\n        variable: variable\n      }\n    };\n    Prism.languages['robotframework'] = {\n      settings: createSection('Settings', {\n        documentation: {\n          pattern: /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        property: {\n          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n          lookbehind: true\n        }\n      }),\n      variables: createSection('Variables'),\n      'test-cases': createSection('Test Cases', {\n        'test-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      keywords: createSection('Keywords', {\n        'keyword-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      tasks: createSection('Tasks', {\n        'task-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      comment: comment\n    };\n    Prism.languages.robot = Prism.languages['robotframework'];\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/robotframework.js"],"names":["module","exports","robotframework","displayName","aliases","Prism","comment","pattern","lookbehind","greedy","variable","inside","punctuation","createSection","name","extendecInside","alias","token","RegExp","source","replace","docTag","testNameLike","testPropertyLike","languages","settings","documentation","property","variables","keywords","tasks","robot"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = robotframework\nrobotframework.displayName = 'robotframework'\nrobotframework.aliases = []\nfunction robotframework(Prism) {\n  ;(function (Prism) {\n    var comment = {\n      pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    var variable = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        punctuation: /^[$@&%]\\{|\\}$/\n      }\n    }\n    function createSection(name, inside) {\n      var extendecInside = {}\n      extendecInside['section-header'] = {\n        pattern: /^ ?\\*{3}.+?\\*{3}/,\n        alias: 'keyword'\n      } // copy inside tokens\n      for (var token in inside) {\n        extendecInside[token] = inside[token]\n      }\n      extendecInside['tag'] = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\[|\\]/\n        }\n      }\n      extendecInside['variable'] = variable\n      extendecInside['comment'] = comment\n      return {\n        pattern: RegExp(\n          /^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(\n            /<name>/g,\n            function () {\n              return name\n            }\n          ),\n          'im'\n        ),\n        alias: 'section',\n        inside: extendecInside\n      }\n    }\n    var docTag = {\n      pattern:\n        /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n      lookbehind: true,\n      alias: 'string'\n    }\n    var testNameLike = {\n      pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      alias: 'function',\n      inside: {\n        variable: variable\n      }\n    }\n    var testPropertyLike = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n      lookbehind: true,\n      inside: {\n        variable: variable\n      }\n    }\n    Prism.languages['robotframework'] = {\n      settings: createSection('Settings', {\n        documentation: {\n          pattern:\n            /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n          lookbehind: true,\n          alias: 'string'\n        },\n        property: {\n          pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n          lookbehind: true\n        }\n      }),\n      variables: createSection('Variables'),\n      'test-cases': createSection('Test Cases', {\n        'test-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      keywords: createSection('Keywords', {\n        'keyword-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      tasks: createSection('Tasks', {\n        'task-name': testNameLike,\n        documentation: docTag,\n        property: testPropertyLike\n      }),\n      comment: comment\n    }\n    Prism.languages.robot = Prism.languages['robotframework']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}