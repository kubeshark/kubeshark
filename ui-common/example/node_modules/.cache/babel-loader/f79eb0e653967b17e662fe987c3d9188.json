{"ast":null,"code":"'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator: /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    });\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    };\n    delete Prism.languages.ruby.function;\n    var percentExpression = '(?:' + [/([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source, /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source].join('|') + ')';\n    var symbolName = /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/.source;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [{\n        pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          regex: /[\\s\\S]+/\n        }\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [{\n        pattern: RegExp(/(^|[^:]):/.source + symbolName),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: RegExp(/([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source),\n        lookbehind: true,\n        greedy: true\n      }],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [{\n        pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?/\n            }\n          },\n          interpolation: interpolation,\n          string: /[\\s\\S]+/\n        }\n      }, {\n        pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n            inside: {\n              symbol: /\\b\\w+/,\n              punctuation: /^<<[-~]?'|'$/\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }],\n      'command-literal': [{\n        pattern: RegExp(/%x/.source + percentExpression),\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }, {\n        pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation,\n          command: {\n            pattern: /[\\s\\S]+/,\n            alias: 'string'\n          }\n        }\n      }]\n    });\n    delete Prism.languages.ruby.string;\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    });\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/ruby.js"],"names":["module","exports","ruby","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","lookbehind","inside","punctuation","keyword","operator","insertBefore","alias","interpolation","content","delimiter","function","percentExpression","source","join","symbolName","RegExp","regex","variable","symbol","string","command","builtin","constant","rb"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      },\n      'class-name': {\n        pattern:\n          /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword:\n        /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n      operator:\n        /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n      punctuation: /[(){}[\\].,;]/\n    })\n    Prism.languages.insertBefore('ruby', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    var interpolation = {\n      pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n      lookbehind: true,\n      inside: {\n        content: {\n          pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        }\n      }\n    }\n    delete Prism.languages.ruby.function\n    var percentExpression =\n      '(?:' +\n      [\n        /([^a-zA-Z0-9\\s{(\\[<=])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n        /\\((?:[^()\\\\]|\\\\[\\s\\S]|\\((?:[^()\\\\]|\\\\[\\s\\S])*\\))*\\)/.source,\n        /\\{(?:[^{}\\\\]|\\\\[\\s\\S]|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\})*\\}/.source,\n        /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S]|\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\])*\\]/.source,\n        /<(?:[^<>\\\\]|\\\\[\\s\\S]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)*>/.source\n      ].join('|') +\n      ')'\n    var symbolName =\n      /(?:\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|(?:\\b[a-zA-Z_]\\w*|[^\\s\\0-\\x7F]+)[?!]?|\\$.)/\n        .source\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      'regex-literal': [\n        {\n          pattern: RegExp(\n            /%r/.source + percentExpression + /[egimnosux]{0,6}/.source\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n          lookbehind: true,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            regex: /[\\s\\S]+/\n          }\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: [\n        {\n          pattern: RegExp(/(^|[^:]):/.source + symbolName),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /([\\r\\n{(,][ \\t]*)/.source + symbolName + /(?=:(?!:))/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'method-definition': {\n        pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n        lookbehind: true,\n        inside: {\n          function: /\\b\\w+$/,\n          keyword: /^self\\b/,\n          'class-name': /^\\w+/,\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'string', {\n      'string-literal': [\n        {\n          pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern:\n            /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?/\n              }\n            },\n            interpolation: interpolation,\n            string: /[\\s\\S]+/\n          }\n        },\n        {\n          pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n          alias: 'heredoc-string',\n          greedy: true,\n          inside: {\n            delimiter: {\n              pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n              inside: {\n                symbol: /\\b\\w+/,\n                punctuation: /^<<[-~]?'|'$/\n              }\n            },\n            string: /[\\s\\S]+/\n          }\n        }\n      ],\n      'command-literal': [\n        {\n          pattern: RegExp(/%x/.source + percentExpression),\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        },\n        {\n          pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation,\n            command: {\n              pattern: /[\\s\\S]+/,\n              alias: 'string'\n            }\n          }\n        }\n      ]\n    })\n    delete Prism.languages.ruby.string\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin:\n        /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    })\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}