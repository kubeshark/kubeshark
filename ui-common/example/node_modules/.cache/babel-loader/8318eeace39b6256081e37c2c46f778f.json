{"ast":null,"code":"'use strict';\n\nconst unicode = require('../common/unicode');\n\nconst ERR = require('../common/error-codes'); //Aliases\n\n\nconst $ = unicode.CODE_POINTS; //Const\n\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nclass Preprocessor {\n  constructor() {\n    this.html = null;\n    this.pos = -1;\n    this.lastGapPos = -1;\n    this.lastCharPos = -1;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n  }\n\n  _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n\n  _addGap() {\n    this.gapStack.push(this.lastGapPos);\n    this.lastGapPos = this.pos;\n  }\n\n  _processSurrogate(cp) {\n    //NOTE: try to peek a surrogate pair\n    if (this.pos !== this.lastCharPos) {\n      const nextCp = this.html.charCodeAt(this.pos + 1);\n\n      if (unicode.isSurrogatePair(nextCp)) {\n        //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n        this.pos++; //NOTE: add gap that should be avoided during retreat\n\n        this._addGap();\n\n        return unicode.getSurrogatePairCodePoint(cp, nextCp);\n      }\n    } //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n    else if (!this.lastChunkWritten) {\n      this.endOfChunkHit = true;\n      return $.EOF;\n    } //NOTE: isolated surrogate\n\n\n    this._err(ERR.surrogateInInputStream);\n\n    return cp;\n  }\n\n  dropParsedChunk() {\n    if (this.pos > this.bufferWaterline) {\n      this.lastCharPos -= this.pos;\n      this.html = this.html.substring(this.pos);\n      this.pos = 0;\n      this.lastGapPos = -1;\n      this.gapStack = [];\n    }\n  }\n\n  write(chunk, isLastChunk) {\n    if (this.html) {\n      this.html += chunk;\n    } else {\n      this.html = chunk;\n    }\n\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n    this.lastChunkWritten = isLastChunk;\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n  }\n\n  advance() {\n    this.pos++;\n\n    if (this.pos > this.lastCharPos) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return $.EOF;\n    }\n\n    let cp = this.html.charCodeAt(this.pos); //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n    //must be ignored.\n\n    if (this.skipNextNewLine && cp === $.LINE_FEED) {\n      this.skipNextNewLine = false;\n\n      this._addGap();\n\n      return this.advance();\n    } //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n\n    if (cp === $.CARRIAGE_RETURN) {\n      this.skipNextNewLine = true;\n      return $.LINE_FEED;\n    }\n\n    this.skipNextNewLine = false;\n\n    if (unicode.isSurrogate(cp)) {\n      cp = this._processSurrogate(cp);\n    } //OPTIMIZATION: first check if code point is in the common allowed\n    //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n    //before going into detailed performance cost validation.\n\n\n    const isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;\n\n    if (!isCommonValidRange) {\n      this._checkForProblematicCharacters(cp);\n    }\n\n    return cp;\n  }\n\n  _checkForProblematicCharacters(cp) {\n    if (unicode.isControlCodePoint(cp)) {\n      this._err(ERR.controlCharacterInInputStream);\n    } else if (unicode.isUndefinedCodePoint(cp)) {\n      this._err(ERR.noncharacterInInputStream);\n    }\n  }\n\n  retreat() {\n    if (this.pos === this.lastGapPos) {\n      this.lastGapPos = this.gapStack.pop();\n      this.pos--;\n    }\n\n    this.pos--;\n  }\n\n}\n\nmodule.exports = Preprocessor;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/parse5/lib/tokenizer/preprocessor.js"],"names":["unicode","require","ERR","$","CODE_POINTS","DEFAULT_BUFFER_WATERLINE","Preprocessor","constructor","html","pos","lastGapPos","lastCharPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","_err","_addGap","push","_processSurrogate","cp","nextCp","charCodeAt","isSurrogatePair","getSurrogatePairCodePoint","EOF","surrogateInInputStream","dropParsedChunk","substring","write","chunk","isLastChunk","length","insertHtmlAtCurrentPos","advance","LINE_FEED","CARRIAGE_RETURN","isSurrogate","isCommonValidRange","_checkForProblematicCharacters","isControlCodePoint","controlCharacterInInputStream","isUndefinedCodePoint","noncharacterInInputStream","retreat","pop","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n"]},"metadata":{},"sourceType":"script"}