{"ast":null,"code":"'use strict';\n\nmodule.exports = livescript;\nlivescript.displayName = 'livescript';\nlivescript.aliases = [];\n\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    }],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [{\n      pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /<\\[[\\s\\S]*?\\]>/,\n      greedy: true\n    }, /\\\\[^\\s,;\\])}]+/],\n    regex: [{\n      pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n      greedy: true,\n      inside: {\n        comment: {\n          pattern: /(^|[^\\\\])#.*/,\n          lookbehind: true\n        }\n      }\n    }, {\n      pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n      greedy: true\n    }],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [// Spaced .\n    {\n      pattern: /( )\\.(?= )/,\n      lookbehind: true\n    }, // Full list, in order:\n    // .= .~ .. ...\n    // .&. .^. .<<. .>>. .>>>.\n    // := :: ::=\n    // &&\n    // || |>\n    // < << <<< <<<<\n    // <- <-- <-! <--!\n    // <~ <~~ <~! <~~!\n    // <| <= <?\n    // > >> >= >?\n    // - -- -> -->\n    // + ++\n    // @ @@\n    // % %%\n    // * **\n    // ! != !~=\n    // !~> !~~>\n    // !-> !-->\n    // ~ ~> ~~> ~=\n    // = ==\n    // ^ ^^\n    // / ?\n    /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  };\n  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/livescript.js"],"names":["module","exports","livescript","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","inside","variable","interpolation","alias","string","regex","keyword","boolean","argument","number","identifier","operator","punctuation","rest"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = livescript\nlivescript.displayName = 'livescript'\nlivescript.aliases = []\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      }\n    ],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [\n      {\n        pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /<\\[[\\s\\S]*?\\]>/,\n        greedy: true\n      },\n      /\\\\[^\\s,;\\])}]+/\n    ],\n    regex: [\n      {\n        pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n        greedy: true,\n        inside: {\n          comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: true\n          }\n        }\n      },\n      {\n        pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n        greedy: true\n      }\n    ],\n    keyword: {\n      pattern:\n        /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern:\n        /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n      // Spaced .\n      {\n        pattern: /( )\\.(?= )/,\n        lookbehind: true\n      }, // Full list, in order:\n      // .= .~ .. ...\n      // .&. .^. .<<. .>>. .>>>.\n      // := :: ::=\n      // &&\n      // || |>\n      // < << <<< <<<<\n      // <- <-- <-! <--!\n      // <~ <~~ <~! <~~!\n      // <| <= <?\n      // > >> >= >?\n      // - -- -> -->\n      // + ++\n      // @ @@\n      // % %%\n      // * **\n      // ! != !~=\n      // !~> !~~>\n      // !-> !-->\n      // ~ ~> ~~> ~=\n      // = ==\n      // ^ ^^\n      // / ?\n      /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n    ],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  }\n  Prism.languages.livescript['interpolated-string'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.livescript\n}\n"]},"metadata":{},"sourceType":"script"}