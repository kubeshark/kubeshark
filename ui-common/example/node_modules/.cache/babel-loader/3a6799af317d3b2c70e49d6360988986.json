{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      }, // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/refractor/lang/php.js"],"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","comment","constant","pattern","alias","greedy","lookbehind","number","operator","punctuation","languages","delimiter","variable","package","inside","keyword","function","property","string_interpolation","string","interpolation","insertBefore","attribute","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}