{"ast":null,"code":"/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = [];\n  var input = String(value || '');\n  var index = input.indexOf(',');\n  var start = 0;\n  /** @type {boolean} */\n\n  var end;\n  /** @type {string} */\n\n  var token;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    token = input.slice(start, index).trim();\n\n    if (token || !end) {\n      tokens.push(token);\n    }\n\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n\n  return tokens;\n}\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\n\nexport function stringify(values, options) {\n  var settings = options || {}; // Ensure the last empty entry is seen.\n\n  if (values[values.length - 1] === '') {\n    values = values.concat('');\n  }\n\n  return values.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/hast-util-to-html/node_modules/comma-separated-tokens/index.js"],"names":["parse","value","tokens","input","String","index","indexOf","start","end","token","length","slice","trim","push","stringify","values","options","settings","concat","join","padRight","padLeft"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAC3B;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACH,KAAK,IAAI,EAAV,CAAlB;AACA,MAAII,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA;;AACA,MAAIC,GAAJ;AACA;;AACA,MAAIC,KAAJ;;AAEA,SAAO,CAACD,GAAR,EAAa;AACX,QAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,MAAAA,KAAK,GAAGF,KAAK,CAACO,MAAd;AACAF,MAAAA,GAAG,GAAG,IAAN;AACD;;AAEDC,IAAAA,KAAK,GAAGN,KAAK,CAACQ,KAAN,CAAYJ,KAAZ,EAAmBF,KAAnB,EAA0BO,IAA1B,EAAR;;AAEA,QAAIH,KAAK,IAAI,CAACD,GAAd,EAAmB;AACjBN,MAAAA,MAAM,CAACW,IAAP,CAAYJ,KAAZ;AACD;;AAEDF,IAAAA,KAAK,GAAGF,KAAK,GAAG,CAAhB;AACAA,IAAAA,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,EAAmBC,KAAnB,CAAR;AACD;;AAED,SAAOL,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACzC,MAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B,CADyC,CAGzC;;AACA,MAAID,MAAM,CAACA,MAAM,CAACL,MAAP,GAAgB,CAAjB,CAAN,KAA8B,EAAlC,EAAsC;AACpCK,IAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAc,EAAd,CAAT;AACD;;AAED,SAAOH,MAAM,CACVI,IADI,CAEH,CAACF,QAAQ,CAACG,QAAT,GAAoB,GAApB,GAA0B,EAA3B,IACE,GADF,IAEGH,QAAQ,CAACI,OAAT,KAAqB,KAArB,GAA6B,EAA7B,GAAkC,GAFrC,CAFG,EAMJT,IANI,EAAP;AAOD","sourcesContent":["/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n"]},"metadata":{},"sourceType":"module"}