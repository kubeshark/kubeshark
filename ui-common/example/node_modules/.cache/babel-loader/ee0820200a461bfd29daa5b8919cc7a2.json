{"ast":null,"code":"import { createElement as h, forwardRef } from 'react';\nimport { lowlight as low } from 'lowlight/lib/core.js';\nimport { mapWithDepth } from './mapChildren.js';\nimport addMarkers from './addMarkers.js';\nconst Lowlight = forwardRef((props, ref) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.language && low.listLanguages().length === 0) {\n      console.warn('No language definitions seems to be registered, ' + 'did you forget to call `Lowlight.registerLanguage`?');\n    }\n  }\n\n  const result = props.language ? low.highlight(props.language, props.value, {\n    prefix: props.prefix\n  }) : low.highlightAuto(props.value, {\n    prefix: props.prefix,\n    subset: props.subset\n  });\n  let ast = result.children;\n\n  if (props.markers && props.markers.length && ast.length) {\n    ast = addMarkers(ast, {\n      prefix: props.prefix,\n      markers: props.markers\n    });\n  }\n\n  const value = ast.length === 0 ? props.value : ast.map(mapWithDepth(0));\n  const codeProps = {\n    className: 'hljs',\n    style: {},\n    ref: null\n  };\n  const preProps = {\n    ref,\n    className: props.className\n  };\n\n  if (result.data.language) {\n    codeProps.className += ' ' + result.data.language;\n  }\n\n  if (props.inline) {\n    codeProps.style = {\n      display: 'inline'\n    };\n    codeProps.className = props.className;\n    codeProps.ref = ref;\n  }\n\n  const code = h('code', codeProps, value);\n  return props.inline ? code : h('pre', preProps, code);\n});\nLowlight.displayName = 'Lowlight';\nLowlight.defaultProps = {\n  className: 'lowlight',\n  inline: false,\n  prefix: 'hljs-'\n};\nLowlight.registerLanguage = low.registerLanguage;\n\nLowlight.hasLanguage = lang => {\n  return low.listLanguages().includes(lang);\n};\n\nexport default Lowlight;","map":{"version":3,"sources":["/Users/leon/lib-test/liraz-test/node_modules/react-lowlight/src/Lowlight.js"],"names":["createElement","h","forwardRef","lowlight","low","mapWithDepth","addMarkers","Lowlight","props","ref","process","env","NODE_ENV","language","listLanguages","length","console","warn","result","highlight","value","prefix","highlightAuto","subset","ast","children","markers","map","codeProps","className","style","preProps","data","inline","display","code","displayName","defaultProps","registerLanguage","hasLanguage","lang","includes"],"mappings":"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","sourcesContent":["import { createElement as h, forwardRef } from 'react'\nimport { lowlight as low } from 'lowlight/lib/core.js'\n\nimport { mapWithDepth } from './mapChildren.js'\nimport addMarkers from './addMarkers.js'\n\nconst Lowlight = forwardRef((props, ref) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.language && low.listLanguages().length === 0) {\n      console.warn(\n        'No language definitions seems to be registered, ' +\n        'did you forget to call `Lowlight.registerLanguage`?'\n      )\n    }\n  }\n\n  const result = props.language\n    ? low.highlight(props.language, props.value, { prefix: props.prefix })\n    : low.highlightAuto(props.value, { prefix: props.prefix, subset: props.subset })\n\n  let ast = result.children\n  if (props.markers && props.markers.length && ast.length) {\n    ast = addMarkers(ast, { prefix: props.prefix, markers: props.markers })\n  }\n\n  const value = ast.length === 0 ? props.value : ast.map(mapWithDepth(0))\n\n  const codeProps = {\n    className: 'hljs',\n    style: {},\n    ref: null\n  }\n\n  const preProps = {\n    ref,\n    className: props.className\n  }\n\n  if (result.data.language) {\n    codeProps.className += (' ' + result.data.language)\n  }\n\n  if (props.inline) {\n    codeProps.style = { display: 'inline' }\n    codeProps.className = props.className\n    codeProps.ref = ref\n  }\n\n  const code = h('code', codeProps, value)\n  return props.inline ? code : h('pre', preProps, code)\n})\n\nLowlight.displayName = 'Lowlight'\n\nLowlight.defaultProps = {\n  className: 'lowlight',\n  inline: false,\n  prefix: 'hljs-'\n}\n\nLowlight.registerLanguage = low.registerLanguage\n\nLowlight.hasLanguage = (lang) => {\n  return low.listLanguages().includes(lang)\n}\n\nexport default Lowlight\n"]},"metadata":{},"sourceType":"module"}