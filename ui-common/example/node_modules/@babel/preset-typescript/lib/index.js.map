{"version":3,"file":"index.js","sources":["../src/normalize-options.ts","../src/index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport default function normalizeOptions(options = {} as any) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    TopLevelOptions.allExtensions,\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\n    TopLevelOptions.isTSX,\n    options.isTSX,\n    false,\n  );\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(\n      allExtensions,\n      \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n    );\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport default declare((api, opts) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (isTSX, disallowAmbiguousJSXLike) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (isTSX, disallowAmbiguousJSXLike) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [\n              [\n                transformTypeScript,\n                pluginOptions(isTSX, disallowAmbiguousJSXLike),\n              ],\n            ],\n          },\n        ]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called`\n        [\n          {\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false, false)]],\n          },\n          {\n            test: /\\.mts$/,\n            sourceType: \"module\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.cts$/,\n            sourceType: \"script\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.tsx$/,\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: [[transformTypeScript, pluginOptions(true, false)]],\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","allExtensions","disallowAmbiguousJSXLike","isTSX","jsxPragmaFrag","optimizeConstEnums","validateStringOption","validateBooleanOption","invariant","declare","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test","sourceType"],"mappings":"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"}