{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/transpilers/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as ts from 'typescript';\nimport type { Service } from '../index';\n\n/**\n * Third-party transpilers are implemented as a CommonJS module with a\n * named export \"create\"\n */\nexport interface TranspilerModule {\n  create: TranspilerFactory;\n}\n/**\n * Called by ts-node to create a custom transpiler.\n */\nexport type TranspilerFactory = (\n  options: CreateTranspilerOptions\n) => Transpiler;\nexport interface CreateTranspilerOptions {\n  // TODO this is confusing because its only a partial Service.  Rename?\n  // Careful: must avoid stripInternal breakage by guarding with Extract<>\n  service: Pick<\n    Service,\n    Extract<'config' | 'options' | 'projectLocalResolveHelper', keyof Service>\n  >;\n}\nexport interface Transpiler {\n  // TODOs\n  // Create spec for returning diagnostics?  Currently transpilers are allowed to\n  // throw an error but that's it.\n  transpile(input: string, options: TranspileOptions): TranspileOutput;\n}\nexport interface TranspileOptions {\n  fileName: string;\n}\nexport interface TranspileOutput {\n  outputText: string;\n  diagnostics?: ts.Diagnostic[];\n  sourceMapText?: string;\n}\n"]}