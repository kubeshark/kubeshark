name: validations
on:
  pull_request:
    branches:
      - 'develop'
      - 'main'
  push:
    branches:
      - 'develop'
      - 'main'
jobs:
  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build CLI
        run: make cli

  build-agent:
    name: Build Agent
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - shell: bash
        run: |
          sudo apt-get install libpcap-dev

      - name: Build Agent
        run: make agent

  run-unit-tests-cli:
    name: Run CLI unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Unit Test
        run: make unit-test-cli

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2

  run-unit-tests-agent:
    name: Run Agent unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - shell: bash
        run: |
          sudo apt-get install libpcap-dev

      - name: Unit Test
        run: make unit-test-agent

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2

  deploy-minikube:
    name: Deploy minikube
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Start minikube
        uses: medyagh/setup-minikube@master

      - name: Try the cluster !
        run: kubectl get pods -A

      - name: Deploy httpbin
        run: |
          kubectl create namespace ns1
          kubectl create deployment httpbin --image=kennethreitz/httpbin -n ns1
          kubectl expose deployment httpbin --type=NodePort --port=80 -n ns1

      - name: Test service URLs
        run: |
          minikube service list
          minikube service example --url
          echo "------------------opening the service------------------"
          curl $(minikube service example --url)


