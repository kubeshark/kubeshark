---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeshark-dex-config-map
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubeshark.labels" . | nindent 4 }}
data:
  dex-config.yaml: |
    # The base path of Dex and the external name of the OpenID Connect service.
    # This is the canonical URL that all clients MUST use to refer to Dex. If a
    # path is provided, Dex's HTTP service will listen at a non-root URL.

{{- if .Values.tap.ingress.enabled }}
    issuer: https://{{ .Values.tap.ingress.host }}/dex
{{- else }}
    issuer: http://0.0.0.0:{{ .Values.tap.proxy.front.port }}/dex
{{- end }}
    # The storage configuration determines where Dex stores its state.
    # Supported options include:
    #   - SQL flavors
    #   - key-value stores (eg. etcd)
    #   - Kubernetes Custom Resources
    #
    # See the documentation (https://dexidp.io/docs/storage/) for further information.
    storage:
      type: memory

      # type: sqlite3
      # config:
      #   file: /var/dex/dex.db

      # type: mysql
      # config:
      #   host: 127.0.0.1
      #   port: 3306
      #   database: dex
      #   user: mysql
      #   password: mysql
      #   ssl:
      #     mode: "false"

      # type: postgres
      # config:
      #   host: 127.0.0.1
      #   port: 5432
      #   database: dex
      #   user: postgres
      #   password: postgres
      #   ssl:
      #     mode: disable

      # type: etcd
      # config:
      #   endpoints:
      #     - http://127.0.0.1:2379
      #   namespace: dex/

      # type: kubernetes
      # config:
      #   kubeConfigFile: $HOME/.kube/config

    # HTTP service configuration
    web:
      http: 0.0.0.0:5556
    #  https: 127.0.0.1:5554

      # Uncomment to enable HTTPS endpoint.
      # tlsCert: /etc/dex/tls.crt
      # tlsKey: /etc/dex/tls.key
      # tlsMinVersion: 1.2
      # tlsMaxVersion: 1.3

    # Dex UI configuration
    # frontend:
    #   issuer: dex
    #   logoURL: theme/logo.png
    #   dir: ""
    #   theme: light

    # Telemetry configuration
    telemetry:
      http: 0.0.0.0:5558

    # logger:
    #   level: "debug"
    #   format: "text" # can also be "json"

    # gRPC API configuration
    # Uncomment this block to enable the gRPC API.
    # See the documentation (https://dexidp.io/docs/api/) for further information.
    # grpc:
    #   addr: 127.0.0.1:5557
    #   tlsCert: examples/grpc-client/server.crt
    #   tlsKey: examples/grpc-client/server.key
    #   tlsClientCA: examples/grpc-client/ca.crt

    # Expiration configuration for tokens, signing keys, etc.
    # expiry:
    #   deviceRequests: "5m"
    #   signingKeys: "6h"
    #   idTokens: "24h"
    #   refreshTokens:
    #     disableRotation: false
    #     reuseInterval: "3s"
    #     validIfNotUsedFor: "2160h" # 90 days
    #     absoluteLifetime: "3960h" # 165 days

    # OAuth2 configuration
    # oauth2:
    #   # use ["code", "token", "id_token"] to enable implicit flow for web-only clients
    #   responseTypes: [ "code" ] # also allowed are "token" and "id_token"
    #
    #   # By default, Dex will ask for approval to share data with application
    #   # (approval for sharing data from connected IdP to Dex is separate process on IdP)
    #   skipApprovalScreen: false
    #
    #   # If only one authentication method is enabled, the default behavior is to
    #   # go directly to it. For connected IdPs, this redirects the browser away
    #   # from application to upstream provider such as the Google login page
    #   alwaysShowLoginScreen: false
    #
    #   # Uncomment to use a specific connector for password grants
    #   passwordConnector: local

    # Static clients registered in Dex by default.
    #
    # Alternatively, clients may be added through the gRPC API.
    staticClients:
     - id: kubeshark-hub
       secret: enter a secret for Kubeshark Hub
       name: 'Kubeshark Hub'
       redirectURIs:
{{- if .Values.tap.ingress.enabled }}
         - https://{{ .Values.tap.ingress.host }}/api/oauth2/callback
{{- else }}
         - http://0.0.0.0:{{ .Values.tap.proxy.front.port }}/api/oauth2/callback
{{- end }}

    # Connectors are used to authenticate users against upstream identity providers.
    #
    # See the documentation (https://dexidp.io/docs/connectors/) for further information.
    connectors:
      - type: oidc
        id: descope
        name: Descope
        config:
          # Canonical URL of the provider, also used for configuration discovery.
          # This value MUST match the value returned in the provider config discovery.
          #
          # See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
          issuer: enter issuer URL

          # Connector config values starting with a "$" will read from the environment.
          clientID: enter client ID
          clientSecret: enter client secret

          # Dex's issuer URL + "/callback"

{{- if .Values.tap.ingress.enabled }}
          redirectURI: https://{{ .Values.tap.ingress.host }}/dex/callback
{{- else }}
          redirectURI: http://0.0.0.0:{{ .Values.tap.proxy.front.port }}/dex/callback
{{- end }}
          # Some providers require passing client_secret via POST parameters instead
          # of basic auth, despite the OAuth2 RFC discouraging it. Many of these
          # cases are caught internally, but some may need to uncomment the
          # following field.
          #
          # basicAuthUnsupported: true

          # List of additional scopes to request in token response
          # Default is profile and email
          # Full list at https://dexidp.io/docs/custom-scopes-claims-clients/
          # scopes:
          #  - profile
          #  - email
          #  - groups

          # Some providers return claims without "email_verified", when they had no usage of emails verification in enrollment process
          # or if they are acting as a proxy for another IDP etc AWS Cognito with an upstream SAML IDP
          # This can be overridden with the below option
          # insecureSkipEmailVerified: true

          # Groups claims (like the rest of oidc claims through dex) only refresh when the id token is refreshed
          # meaning the regular refresh flow doesn't update the groups claim. As such by default the oidc connector
          # doesn't allow groups claims. If you are okay with having potentially stale group claims you can use
          # this option to enable groups claims through the oidc connector on a per-connector basis.
          # This can be overridden with the below option
          # insecureEnableGroups: true

          # When enabled, the OpenID Connector will query the UserInfo endpoint for additional claims. UserInfo claims
          # take priority over claims returned by the IDToken. This option should be used when the IDToken doesn't contain
          # all the claims requested.
          # https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
          # getUserInfo: true

          # The set claim is used as user id.
          # Claims list at https://openid.net/specs/openid-connect-core-1_0.html#Claims
          # Default: sub
          # userIDKey: nickname

          # The set claim is used as user name.
          # Default: name
          # userNameKey: nickname

          # The acr_values variable specifies the Authentication Context Class Values within
          # the Authentication Request that the Authorization Server is being requested to process
          # from this Client.
          # acrValues:
          #  - <value>
          #  - <value>

          # For offline_access, the prompt parameter is set by default to "prompt=consent".
          # However this is not supported by all OIDC providers, some of them support different
          # value for prompt, like "prompt=login" or "prompt=none"
          # promptType: consent

          # Some providers return non-standard claims (eg. mail).
          # Use claimMapping to map those claims to standard claims:
          # https://openid.net/specs/openid-connect-core-1_0.html#Claims
          # claimMapping can only map a non-standard claim to a standard one if it's not returned in the id_token.
          claimMapping:
          # The set claim is used as preferred username.
          # Default: preferred_username
          # preferred_username: other_user_name

          # The set claim is used as email.
          # Default: email
          # email: mail

          # The set claim is used as groups.
          # Default: groups
          # groups: "cognito:groups"

          # overrideClaimMapping will be used to override the options defined in claimMappings.
          # i.e. if there are 'email' and `preferred_email` claims available, by default Dex will always use the `email` claim independent of the claimMapping.email.
          # This setting allows you to override the default behavior of Dex and enforce the mappings defined in `claimMapping`.
          overrideClaimMapping: false

          # The section to override options discovered automatically from
          # the providers' discovery URL (.well-known/openid-configuration).
          providerDiscoveryOverrides:
          # tokenURL provides a way to user overwrite the token URL
          # from the .well-known/openid-configuration 'token_endpoint'.
          # tokenURL: ""
          #
          # authURL provides a way to user overwrite the authorization URL
          # from the .well-known/openid-configuration 'authorization_endpoint'.
          # authURL: ""


    # Enable the password database.
    #
    # It's a "virtual" connector (identity provider) that stores
    # login credentials in Dex's store.
    enablePasswordDB: true

    # If this option isn't chosen users may be added through the gRPC API.
    # A static list of passwords for the password connector.
    #
    # Alternatively, passwords may be added/updated through the gRPC API.
    # staticPasswords: []

