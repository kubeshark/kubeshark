---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  labels:
    app: kubeshark-worker-daemon-set
    kubeshark-created-by: kubeshark
    kubeshark-managed-by: kubeshark
  name: kubeshark-worker-daemon-set
  namespace: '{{ .Values.tap.selfnamespace }}'
spec:
  selector:
    matchLabels:
      app: kubeshark-worker-daemon-set
      kubeshark-created-by: kubeshark
      kubeshark-managed-by: kubeshark
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kubeshark-worker-daemon-set
        kubeshark-created-by: kubeshark
        kubeshark-managed-by: kubeshark
      name: kubeshark-worker-daemon-set
      namespace: kubeshark
    spec:
      containers:
        - command:
            - '{{ .Values.tap.debug | ternary "./worker -debug" "./worker" }}'
            - -i
            - any
            - -port
            - '{{ .Values.tap.proxy.worker.srvport }}'
            - -packet-capture
            - '{{ .Values.tap.packetcapture }}'
            - -servicemesh
            - -tls
            - -procfs
            - /hostproc
          image: '{{ .Values.tap.docker.registry }}/worker:{{ .Values.tap.docker.tag }}'
          imagePullPolicy: '{{ .Values.tap.docker.imagepullpolicy }}'
          name: kubeshark-worker-daemon-set
          ports:
            - containerPort: {{ .Values.tap.proxy.worker.srvport }}
              hostPort: {{ .Values.tap.proxy.worker.srvport }}
          resources:
            limits:
              cpu: '{{ .Values.tap.resources.worker.limits.cpu }}'
              memory: '{{ .Values.tap.resources.worker.limits.memory }}'
            requests:
              cpu: '{{ .Values.tap.resources.worker.requests.cpu }}'
              memory: '{{ .Values.tap.resources.worker.requests.memory }}'
          securityContext:
            capabilities:
              add:
                - NET_RAW
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_PTRACE
                - DAC_OVERRIDE
                - SYS_RESOURCE
              drop:
                - ALL
          volumeMounts:
            - mountPath: /hostproc
              name: proc
              readOnly: true
            - mountPath: /sys
              name: sys
              readOnly: true
{{- if .Values.tap.persistentstorage }}
            - mountPath: /app/data
              name: kubeshark-persistent-volume
{{- end }}
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      serviceAccountName: kubeshark-service-account
      terminationGracePeriodSeconds: 0
      tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
      volumes:
        - hostPath:
            path: /proc
          name: proc
        - hostPath:
            path: /sys
          name: sys
{{- if .Values.tap.persistentstorage }}
        - name: kubeshark-persistent-volume
          persistentVolumeClaim:
            claimName: kubeshark-persistent-volume-claim
{{- end }}
